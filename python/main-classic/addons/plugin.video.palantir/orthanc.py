import base64;exec base64.b64decode('# -*- coding: utf-8 -*-
import base64
import os
import sqlite3
import sys
import unicodedata
import urlparse
from urlparse import parse_qsl
if 97 - 97: OOoOoO0o0o0OO + IIII . Ii % oOO
import xbmc
import xbmcaddon
import xbmcgui
import xbmcplugin
import anor
if 1 - 1: II - iiIIi1i1Iii - I1 - IIoooO0ooO0oo * OOO
import ithil
if 5 - 5: i1iI1 + o00oO0oo0O0O0 - ii1I1ii1IiIi1 % oooOoO - IiII1IiI
try :
 import json
except :
 import simplejson as json
 if 85 - 85: oo
 if 70 - 70: iIi11 + Ii1I / I1IiI1III11i + ooOooO0OOO % IiII1i1I / iIi11
def oo0o ( s ) :
 return '' . join ( ( c for c in unicodedata . normalize ( 'NFD' , s ) if unicodedata . category ( c ) != 'Mn' ) )
 if 95 - 95: IIoooO0ooO0oo - iIi11 + I1IiI1III11i + IiII1i1I
 if 56 - 56: Ii / ooOooO0OOO + iiIIi1i1Iii . oOO * iiIIi1i1Iii . I1
def O0000O ( bas ) :
 ithil . O0ooo00Ooo ( bas )
 if 76 - 76: iIi11 * IiII1i1I % oOO - IiII1i1I / oOO
 if 79 - 79: OOoOoO0o0o0OO + Ii1I - iIi11
def IiiiIiI1IIi ( ) :
 import xbmc
 O0ooOo0 = xbmc . Keyboard ( "" )
 O0ooOo0 . doModal ( )
 IiooO0o0000 = ''
 if ( O0ooOo0 . isConfirmed ( ) ) :
  IiooO0o0000 = O0ooOo0 . getText ( )
 return IiooO0o0000
 if 51 - 51: iiIIi1i1Iii % i1iI1 % oooOoO % OOoOoO0o0o0OO * Ii % OOoOoO0o0o0OO
 if 56 - 56: ii1I1ii1IiIi1 . oooOoO * Ii
 if 63 - 63: OOoOoO0o0o0OO . iiIIi1i1Iii / IIoooO0ooO0oo . Ii / IIoooO0ooO0oo % ii1I1ii1IiIi1
I111i11I1I = 'utf-8'
i11ii = '.tmp'
o0O0oO0 = 'action'
IIIi1111iI = xbmcaddon . Addon ( )
iiIIiiiI11 = IIIi1111iI . getAddonInfo ( 'version' )
O00O000 = xbmc . translatePath ( IIIi1111iI . getAddonInfo ( 'path' ) . decode ( I111i11I1I ) )
O0OOO = xbmc . translatePath ( IIIi1111iI . getAddonInfo ( 'profile' ) . decode ( I111i11I1I ) )
iIi11iI1ii1I = os . path . join ( O00O000 , "resources/media/" )
if 91 - 91: i1iI1 / oooOoO / iiIIi1i1Iii + OOoOoO0o0o0OO / ii1I1ii1IiIi1 . ooOooO0OOO
iiI = base64 . urlsafe_b64decode ( 'JXMvbW9yaWElcw==' ) % ( O0OOO , i11ii )
oo000OoOOO0Oo = '%s/bree.fav' % O0OOO
o0O0o = [ "serie_id" , "nombre" , "link" , "nombre" , "anno" , "sinopsis" , "caratula" , "poster" , "has_content" , "audio" ,
 "category" , "date(updated)" ]
oo0oO0OO0OO0O = [ "peli_id" , "nombre" , "link" , "nombre" , "anno" , "sinopsis" , "caratula" , "poster" , "'N'" , "audio" , "category" ,
 "date(updated)" ]
I1I1i = [ "peli_id" , "''" , "''" , "hd" , "''" , "''" , "link" , "quality" , "nombre" , "anno" ,
 "sinopsis" ,
 "caratula" , "poster" , "updated"
 ]
iIiiIIi1III1 = 200
OOooO = ", CASE When unicode(upper(substr(nombre, 1, 1))) >= 192 AND unicode(upper(substr(nombre, 1, 1))) <= 198 Then 'A'When unicode(upper(substr(nombre, 1, 1))) >= 204 AND unicode(upper(substr(nombre, 1, 1))) <= 207 Then 'I'When unicode(upper(substr(nombre, 1, 1))) >= 200 AND unicode(upper(substr(nombre, 1, 1))) <= 203 Then 'E'When unicode(upper(substr(nombre, 1, 1))) >= 217 AND unicode(upper(substr(nombre, 1, 1))) <= 220 Then 'U'When unicode(upper(substr(nombre, 1, 1))) >= 210 AND unicode(upper(substr(nombre, 1, 1))) <= 214 Then 'O' WHEN unicode(upper(substr(nombre, 1, 1))) >= 65 AND unicode(upper(substr(nombre, 1, 1))) <= 90 THEN upper(substr(nombre, 1, 1)) ELSE '!0-9..'  END alfa "
o00 = 'series'
if 34 - 34: Ii1I + I1IiI1III11i
if not os . path . exists ( O0OOO ) :
 try :
  os . makedirs ( O0OOO )
 except :
  pass
Iii1I1i = urlparse . parse_qs ( sys . argv [ 2 ] [ 1 : ] )
o00I11Iii11i1Ii1 = sys . argv [ 0 ]
iiII = int ( sys . argv [ 1 ] )
try :
 if 51 - 51: IIII / iiIIi1i1Iii
 oOOO0O0 = anor . I1i1I1iI11I ( base64 . urlsafe_b64decode (
 'c2VsZWN0IGlkUGF0aCBmcm9tIHBhdGggd2hlcmUgc3RyUGF0aD0icGx1Z2luOi8vcGx1Z2luLnZpZGVvLnBhbGFudGlyLyI=' ) ) [ 1 ] [ 0 ] [ 0 ]
except :
 oOOO0O0 = 0
 if 67 - 67: ii1I1ii1IiIi1 - ooOooO0OOO + oooOoO * I1
 if 29 - 29: oo . OOoOoO0o0o0OO / II - I1IiI1III11i / iIi11 . I1
def I1iIi11Ii1I11 ( path , type = 'r' ) :
 iiIIi1ii = open ( str ( path ) , type )
 O0OOo = iiIIi1ii . read ( )
 iiIIi1ii . close ( )
 return O0OOo
 if 4 - 4: IiII1i1I % IiII1IiI
 if 15 - 15: oo / IiII1i1I
if os . path . exists ( oo000OoOOO0Oo ) == True :
 i1I = json . loads ( base64 . urlsafe_b64decode ( I1iIi11Ii1I11 ( oo000OoOOO0Oo ) ) )
else :
 i1I = { }
 if 16 - 16: OOoOoO0o0o0OO / o00oO0oo0O0O0 . II
 if 96 - 96: I1 * oOO . ooOooO0OOO
def iIiI1iiII1Ii ( nombre , caratula = None , poster = None , video = { } , isPlayable = False ) :
 ooOoO0O0 = xbmcgui . ListItem ( label = nombre , iconImage = caratula )
 if caratula and poster :
  ooOoO0O0 . setArt ( i1iIii ( caratula , poster ) )
 if len ( video ) > 0 :
  ooOoO0O0 . setInfo ( 'video' , video )
 if isPlayable :
  ooOoO0O0 . setProperty ( 'IsPlayable' , 'true' )
 return ooOoO0O0
 if 79 - 79: iiIIi1i1Iii - o00oO0oo0O0O0 % OOO
 if 39 - 39: oOO - OOO / ooOooO0OOO . Ii1I . Ii1I . Ii
 if 88 - 88: o00oO0oo0O0O0 % II - ooOooO0OOO
def o0OO ( idFile , idPath , fileName , to_watch ) :
 if to_watch :
  Oo0oOOOO = ( 'Marcar como visto' , 'XBMC.RunPlugin(%s?action=to_watch&idFile=%s&idPath=%s&fileName=%s)' % (
 o00I11Iii11i1Ii1 , idFile , idPath , base64 . urlsafe_b64encode ( fileName ) ) )
 else :
  Oo0oOOOO = ( 'Marcar como no visto' ,
 'XBMC.RunPlugin(%s?action=to_unwatch&idFile=%s&idPath=%s&fileName=%s)' % (
 o00I11Iii11i1Ii1 , idFile , idPath , base64 . urlsafe_b64encode ( fileName ) ) )
 return Oo0oOOOO
 if 86 - 86: OOO
 if 78 - 78: oo * ii1I1ii1IiIi1 + OOoOoO0o0o0OO / iIi11 - ooOooO0OOO + Ii
def IiI ( idFile , idPath , fileName , to_watch ) :
 fileName = base64 . urlsafe_b64decode ( fileName )
 if to_watch :
  IIii1IIIi11 = 1
 else :
  IIii1IIIi11 = 0
 if int ( idFile ) > 0 :
  Iii1 = "update files set playCount=%s where idFile=%s AND idPath=%s AND strFilename='%s'" % (
 IIii1IIIi11 , idFile , idPath , fileName )
 else :
  Iii1 = "insert into files (idFile, idPath, strFilename, playCount, lastPlayed) VALUES (%s, %s, '%s', %s, %s)" % (
 '(select max (idFile) +1 from files)' , idPath , fileName , IIii1IIIi11 , "datetime('now')" )
 anor . I1i1I1iI11I ( Iii1 )
 xbmc . executebuiltin ( "XBMC.Container.Refresh" )
 if 4 - 4: Ii % IIoooO0ooO0oo - iIi11 / I1IiI1III11i - II + IiII1i1I
 if 45 - 45: IIII
 if 97 - 97: OOoOoO0o0o0OO % OOO * IIII % oo - oo
def oOoOOo ( id , type , nombre , url , caratula , poster , refresh = None ) :
 try :
  nombre = nombre . encode ( 'utf-8' , 'ignore' )
 except ( UnicodeEncodeError , UnicodeDecodeError ) :
  pass
 if not caratula :
  caratula = 'None'
 if not poster :
  poster = 'None'
 if id not in i1I :
  Oo0oOOOO = ( 'Añadir a tus favoritos Palantir' ,
 'XBMC.RunPlugin(%s?action=addfav&id=%s&nombre=%s&url=%s&caratula=%s&poster=%s&type=%s)' % (
 o00I11Iii11i1Ii1 , id , base64 . urlsafe_b64encode ( nombre ) , base64 . urlsafe_b64encode ( url ) ,
 base64 . urlsafe_b64encode ( caratula ) , base64 . urlsafe_b64encode ( poster ) , type ) )
 else :
  Oo0oOOOO = ( 'Eliminar de tus favoritos Palantir' ,
 'XBMC.RunPlugin(%s?action=rmfav&id=%s&nombre=%s&url=%s&caratula=%s&poster=%s&refresh=%s&type=%s)' % (
 o00I11Iii11i1Ii1 , id , base64 . urlsafe_b64encode ( nombre ) , base64 . urlsafe_b64encode ( url ) ,
 base64 . urlsafe_b64encode ( caratula ) , base64 . urlsafe_b64encode ( poster ) , refresh , type ) )
 return Oo0oOOOO
 if 11 - 11: iIi11 + IIoooO0ooO0oo - iIi11
 if 50 - 50: I1 / ii1I1ii1IiIi1 - i1iI1 + iIi11 . Ii . IIII
def iii1iIII1111I ( options ) :
 i11i1 = json . loads ( base64 . urlsafe_b64decode ( I1iIi11Ii1I11 ( oo000OoOOO0Oo ) ) )
 i11i1 . pop ( options [ 'id' ] , None )
 iI1 = open ( oo000OoOOO0Oo , "w" )
 iI1 . write ( base64 . urlsafe_b64encode ( json . dumps ( i11i1 ) ) )
 iI1 . close ( )
 if 'refresh' in options and options [ 'refresh' ] :
  xbmc . executebuiltin ( "XBMC.Container.Refresh" )
  if 94 - 94: oooOoO
  if 75 - 75: IiII1i1I * IiII1IiI * IIII + Ii % iiIIi1i1Iii
def O0O00O0O ( ) :
 IiiiIiiIII = [ ]
 if os . path . exists ( oo000OoOOO0Oo ) == False :
  I1IiiI = open ( oo000OoOOO0Oo , "w" )
  I1IiiI . write ( base64 . urlsafe_b64encode ( json . dumps ( { } ) ) )
  I1IiiI . close ( )
 else :
  items = json . loads ( base64 . urlsafe_b64decode ( I1iIi11Ii1I11 ( oo000OoOOO0Oo ) ) )
  for Ooo , o0OOoo0 in items . iteritems ( ) :
   ii1Ii = o0OOoo0 [ 0 ] . encode ( 'utf-8' )
   OOOO0 = o0OOoo0 [ 1 ] . encode ( 'utf-8' )
   try :
    if 42 - 42: iIi11 * oooOoO . IiII1IiI + IIII * OOoOoO0o0o0OO
    OOOO0 = o0OOoo0 [ 1 ] . encode ( 'utf-8' , 'ignore' )
   except :
    pass
   ooIIII = o0OOoo0 [ 2 ] . encode ( 'utf-8' )
   O0oOooOoOo0 = o0OOoo0 [ 3 ] . encode ( 'utf-8' )
   oOO00OoO0oo = o0OOoo0 [ 4 ] . encode ( 'utf-8' )
   oo0o0ooooO = o0OOoo0 [ 5 ] . encode ( 'utf-8' )
   O000000O0OoOo = base64 . urlsafe_b64decode ( oOO00OoO0oo )
   OoOO0OO0o0O = base64 . urlsafe_b64decode ( O0oOooOoOo0 )
   OOOO0 = base64 . urlsafe_b64decode ( OOOO0 )
   IIiiII111i = False
   if len ( ii1Ii . split ( '-' ) ) == 3 :
    IIiiII111i = True
   ooOoO0O0 = iIiI1iiII1Ii ( nombre = OOOO0 , caratula = OoOO0OO0o0O , poster = O000000O0OoOo , isPlayable = IIiiII111i )
   ooOoO0O0 . addContextMenuItems ( [ oOoOOo ( id = str ( o0OOoo0 [ 0 ] ) , nombre = OOOO0 , url = ooIIII ,
 caratula = O0oOooOoOo0 , poster = oOO00OoO0oo , refresh = True , type = oo0o0ooooO ) ] )
   if 11 - 11: ooOooO0OOO
   IiiiIiiIII . append ( ( base64 . urlsafe_b64decode ( ooIIII ) , ooOoO0O0 , not IIiiII111i ) )
 try :
  if 23 - 23: oooOoO * OOO % iIi11 . IiII1i1I
  xbmc . executebuiltin ( "Container.SetViewMode(500)" )
 except :
  pass
 xbmcplugin . addDirectoryItems ( iiII , IiiiIiiIII , len ( IiiiIiiIII ) )
 xbmcplugin . endOfDirectory ( iiII )
 if 29 - 29: II - IIoooO0ooO0oo % I1IiI1III11i / II * ooOooO0OOO % II
 if 95 - 95: i1iI1
def I11IIii1I ( options ) :
 I1i11i1I1iIi = { }
 OOOO0 = options [ 'nombre' ]
 O0oOo0O0OO = False
 if os . path . exists ( oo000OoOOO0Oo ) == False :
  I1i11i1I1iIi [ options [ 'id' ] ] = (
 options [ 'id' ] , options [ 'nombre' ] , options [ 'url' ] , options [ 'caratula' ] , options [ 'poster' ] , options [ 'type' ] )
  I1IiiI = open ( oo000OoOOO0Oo , "w" )
  I1IiiI . write ( base64 . urlsafe_b64encode ( json . dumps ( I1i11i1I1iIi ) ) )
  I1IiiI . close ( )
 else :
  i11i1 = json . loads ( base64 . urlsafe_b64decode ( I1iIi11Ii1I11 ( oo000OoOOO0Oo ) ) )
  i11i1 [ options [ 'id' ] ] = ( options [ 'id' ] , options [ 'nombre' ] , options [ 'url' ] , options [ 'caratula' ] , options [ 'poster' ] , options [ 'type' ] )
  iI1 = open ( oo000OoOOO0Oo , "w" )
  iI1 . write ( base64 . urlsafe_b64encode ( json . dumps ( i11i1 ) ) )
  iI1 . close ( )
 xbmc . executebuiltin ( "XBMC.Container.Refresh" )
 O0oo00 = xbmcgui . Dialog ( )
 O0oo00 . notification ( 'Palantir' ,
 'Favorito añadido a tus [COLOR gold]%s[/COLOR] Palantir' % options [ 'type' ] ,
 xbmcgui . NOTIFICATION_INFO , 3000 )
 if 80 - 80: IiII1IiI * iiIIi1i1Iii / oOO / Ii1I / OOO + o00oO0oo0O0O0
 if 81 - 81: II - ii1I1ii1IiIi1 / iIi11 + oooOoO
def i1iIii ( caratula , poster ) :
 if caratula == None :
  caratula = ''
 if poster == None :
  poster = ''
 return { 'icon' : caratula , 'fanart' : poster , 'thumb' : caratula }
 if 51 - 51: IiII1IiI + II + IiII1i1I . II
 if 86 - 86: OOO / IiII1IiI * IiII1IiI * o00oO0oo0O0O0
 if 90 - 90: I1 - IiII1i1I % OOoOoO0o0o0OO - OOO . i1iI1 / IIII
def Iiooo ( dimension ) :
 if dimension :
  i1IoO = dimension . split ( "x" )
  if len ( i1IoO ) == 2 :
   OoO0OO = int ( i1IoO [ 0 ] )
   i1II1 = int ( i1IoO [ 1 ] )
   if OoO0OO == 0 or i1II1 == 0 :
    return ""
   elif OoO0OO <= 720 and i1II1 <= 480 :
    return "[COLOR oldlace](SD)[/COLOR]"
   elif OoO0OO <= 768 and i1II1 <= 576 :
    return "[COLOR moccasin](HD)[/COLOR]"
   elif OoO0OO <= 960 and i1II1 <= 544 :
    return "[COLOR peachpuff](HD)[/COLOR]"
   elif OoO0OO <= 1280 and i1II1 <= 720 :
    return "[COLOR sandybrown](720)[/COLOR]"
   else :
    return "[COLOR chocolate](1080)[/COLOR]"
  else :
   return ""
 return ""
 if 17 - 17: oOO - IIII + I1
 if 27 - 27: I1
 if 63 - 63: o00oO0oo0O0O0
def I1iii1 ( serie_sinop , serie_caratula , serie_poster , temp_sinop , temp_caratula , temp_poster ) :
 i11i1 = [ ]
 if temp_sinop == None :
  i11i1 . append ( serie_sinop )
 else :
  i11i1 . append ( temp_sinop )
 if temp_caratula == None :
  i11i1 . append ( serie_caratula )
 else :
  i11i1 . append ( temp_caratula )
 if temp_poster == None :
  i11i1 . append ( serie_poster )
 else :
  i11i1 . append ( temp_poster )
 return i11i1
 if 43 - 43: I1 % IiII1IiI
 if 29 - 29: IIII . ooOooO0OOO . ooOooO0OOO % oo + I1IiI1III11i - I1IiI1III11i
 if 74 - 74: Ii / oooOoO
def IIIIoo ( operator , value , params ) :
 iiIiii1 = sqlite3 . connect ( iiI )
 Oo0ooO00 = iiIiii1 . cursor ( )
 IIIII = 1
 if 'page' in params and 'c_page' in params and 'alfa' in params :
  IIIII = int ( params [ 'c_page' ] )
  Oo0ooO00 . execute ( "Select " + "," . join (
 o0O0o ) + OOooO + " from series where lower(category) " + operator + " ? AND " + base64 . urlsafe_b64decode (
 params [ 'alfa' ] ) + " AND " + base64 . urlsafe_b64decode (
 params [ 'page' ] ) + " order by alfa asc, nombre asc LIMIT " + str ( iIiiIIi1III1 ) , ( value , ) )
 else :
  params [ 'c_page' ] = 1
  Oo0ooO00 . execute ( "Select " + "," . join (
 o0O0o ) + OOooO + " from series where lower(category) " + operator + " ? order by alfa asc, nombre asc LIMIT " + str (
 iIiiIIi1III1 ) , ( value , ) )
 Ii1iI1i1iI1iI = Oo0ooO00 . fetchall ( )
 iiIiii1 . close ( )
 params [ 'c_page' ] = IIIII
 I11 ( Ii1iI1i1iI1iI , False , True , False , params )
 if 33 - 33: Ii1I - i1iI1
 if 85 - 85: II % iiIIi1i1Iii - i1iI1 - oOO
def o0Oo0oo00 ( fields , table ) :
 iiIiii1 = sqlite3 . connect ( iiI )
 Oo0ooO00 = iiIiii1 . cursor ( )
 Oo0ooO00 . execute ( "Select " + "," . join ( fields ) + " from " + table + " order by updated desc limit 200" )
 Ii1iI1i1iI1iI = Oo0ooO00 . fetchall ( )
 iiIiii1 . close ( )
 I11 ( Ii1iI1i1iI1iI , True , True , True )
 if 15 - 15: oo - I1IiI1III11i / OOO . iiIIi1i1Iii - OOO + i1iI1
 if 17 - 17: I1IiI1III11i - IiII1i1I + IiII1IiI * IiII1i1I
def OooO0OOo0 ( order ) :
 iiIiii1 = sqlite3 . connect ( iiI )
 Oo0ooO00 = iiIiii1 . cursor ( )
 Oo0ooO00 . execute ( "Select " + "," . join ( o0O0o ) + " from series order by " + order + " desc, nombre asc limit 200" )
 Ii1iI1i1iI1iI = Oo0ooO00 . fetchall ( )
 iiIiii1 . close ( )
 I11 ( Ii1iI1i1iI1iI , True , True , False )
 if 32 - 32: IIoooO0ooO0oo - OOO / oooOoO
def iII1iIIiIi11I ( order , params ) :
 if 40 - 40: IIII + oo - oooOoO . OOO . OOO . OOoOoO0o0o0OO
 if 58 - 58: IiII1IiI * OOoOoO0o0o0OO
 if 58 - 58: II % I1IiI1III11i * OOoOoO0o0o0OO * oooOoO . iIi11
 if 62 - 62: Ii - II - i1iI1
 if 41 - 41: I1IiI1III11i + oooOoO . o00oO0oo0O0O0 % iIi11
 if 100 - 100: i1iI1 . Ii - OOoOoO0o0o0OO - OOO - oooOoO
 Ii1iI1i1iI1iI = I1Ii1IiIIiI ( "pelis" ,
 [ "peli_id" , "''" , "''" , "hd" , "''" , "''" , "link" , "quality" , "nombre" , "anno" , "sinopsis" ,
 "caratula" , "poster" , "strftime('%Y-%m-%d',updated), puntos"
 ] , [ ] , [ ] , order , params )
 oOOoo0 ( Ii1iI1i1iI1iI , 'pelis' , info = params )
 if 21 - 21: oOO
def I1II1IIiii ( serie_attr , type ) :
 ooooOOo00 = IiiiIiI1IIi ( )
 if ooooOOo00 :
  iiIiii1 = sqlite3 . connect ( iiI )
  Oo0ooO00 = iiIiii1 . cursor ( )
  if 41 - 41: oo % o00oO0oo0O0O0 + iIi11
  ooooOOo00 = '%' + ooooOOo00 + '%'
  try :
   Oo0ooO00 . execute ( "Select " + "," . join (
 serie_attr ) + OOooO + " from " + type + " where nombre like ? order by alfa asc, nombre asc" ,
 ( unicode ( ooooOOo00 . decode ( 'utf-8' ) ) , ) )
  except :
   Oo0ooO00 . execute ( "Select " + "," . join (
 serie_attr ) + OOooO + " from " + type + " where nombre like ? order by alfa asc, nombre asc" ,
 ( oo0o ( unicode ( ooooOOo00 . decode ( 'utf-8' ) ) ) . upper ( ) , ) )
  Ii1iI1i1iI1iI = Oo0ooO00 . fetchall ( )
  if len ( Ii1iI1i1iI1iI ) == 0 :
   Oo0ooO00 . execute ( "Select " + "," . join ( serie_attr ) + " from " + type + " where nombre like ? order by nombre asc" ,
 ( oo0o ( unicode ( ooooOOo00 . decode ( 'utf-8' ) ) ) . upper ( ) , ) )
   Ii1iI1i1iI1iI = Oo0ooO00 . fetchall ( )
  iiIiii1 . close ( )
  if type == o00 :
   I11 ( Ii1iI1i1iI1iI , True , True , False )
  else :
   oOOoo0 ( Ii1iI1i1iI1iI , 'pelis' )
   if 80 - 80: I1IiI1III11i * IIoooO0ooO0oo * ooOooO0OOO + IiII1i1I
   if 30 - 30: IiII1IiI * oOO + oooOoO
   if 83 - 83: oo + iIi11
def i1i1IIiIi ( audio = None , category = 'General' ) :
 if not audio :
  iiIiii1 = sqlite3 . connect ( iiI )
  Oo0ooO00 = iiIiii1 . cursor ( )
  Oo0ooO00 . execute ( "Select audio,count(audio) from series where audio!='Castellano' group by audio order by audio" )
  Ii1iI1i1iI1iI = Oo0ooO00 . fetchall ( )
  iiIiii1 . close ( )
  IiiiIiiIII = [ ]
  for Ii1I111 in Ii1iI1i1iI1iI :
   audio = Ii1I111 [ 0 ]
   o0 = Ii1I111 [ 1 ]
   Ii1 = '[COLOR gold]%s[/COLOR] (%s)' % ( audio , o0 )
   ooOoO0O0 = iIiI1iiII1Ii ( nombre = Ii1 , caratula = '' )
   ooIIII = '{0}?action=seriesByLang&lang={1}' . format ( o00I11Iii11i1Ii1 , audio )
   o0O = True
   IiiiIiiIII . append ( ( ooIIII , ooOoO0O0 , o0O ) )
  try :
   if 79 - 79: I1IiI1III11i + OOoOoO0o0o0OO - ii1I1ii1IiIi1 / Ii * I1IiI1III11i . oooOoO
   xbmc . executebuiltin ( "Container.SetViewMode(502)" )
  except :
   pass
  xbmcplugin . addDirectoryItems ( iiII , IiiiIiiIII , len ( IiiiIiiIII ) )
  xbmcplugin . endOfDirectory ( iiII )
 else :
  Ii1iI1i1iI1iI = I1Ii1IiIIiI ( "series" , o0O0o , [ "audio" ] , [ audio ] , [ "nombre" ] )
  I11 ( Ii1iI1i1iI1iI , True , None , False )
  if 81 - 81: o00oO0oo0O0O0 * II * Ii + iiIIi1i1Iii + iIi11
  if 80 - 80: Ii1I . IIII
def OOOOOoO0oo0oo00 ( letra = None , type = '' ) :
 o00O0o00o = { 'A' : 'unicode(upper(substr(nombre, 1, 1))) >= 192 AND unicode(upper(substr(nombre, 1, 1))) <= 198' ,
 'E' : 'unicode(upper(substr(nombre, 1, 1))) >= 200 AND unicode(upper(substr(nombre, 1, 1))) <= 203' ,
 'I' : 'unicode(upper(substr(nombre, 1, 1))) >= 204 AND unicode(upper(substr(nombre, 1, 1))) <= 207' ,
 'O' : 'unicode(upper(substr(nombre, 1, 1))) >= 210 AND unicode(upper(substr(nombre, 1, 1))) <= 214' ,
 'U' : 'unicode(upper(substr(nombre, 1, 1))) >= 217 AND unicode(upper(substr(nombre, 1, 1))) <= 220' }
 i1 = '!0-9..'
 IiIiii1111I11 = 'unicode(upper(substr(nombre, 1, 1))) >= 65 AND unicode(upper(substr(nombre, 1, 1))) <= 90'
 if type == 'serie' :
  i11I = o0O0o
 else :
  i11I = oo0oO0OO0OO0O
 if not letra :
  ii = "" . join ( [ "When " + Oo00oOO + " Then '" + ii11Ii11i + "'" for ii11Ii11i , Oo00oOO in o00O0o00o . iteritems ( ) ] )
  iiIiii1 = sqlite3 . connect ( iiI )
  Oo0ooO00 = iiIiii1 . cursor ( )
  Oo0ooO00 . execute (
 "select alfa, count (alfa) from (select CASE " + ii + " WHEN " + IiIiii1111I11 + " THEN upper(substr(nombre, 1, 1)) ELSE '!0-9..'  END alfa, nombre, " + type + "_id from " + type + "s) group by alfa order by alfa" )
  Ii1iI1i1iI1iI = Oo0ooO00 . fetchall ( )
  iiIiii1 . close ( )
  IiiiIiiIII = [ ]
  for Ii1I111 in Ii1iI1i1iI1iI :
   letra = Ii1I111 [ 0 ]
   o0 = Ii1I111 [ 1 ]
   Ii1 = '[COLOR gold]%s[/COLOR] (%s)' % ( letra , o0 )
   ooOoO0O0 = iIiI1iiII1Ii ( nombre = Ii1 , caratula = '' )
   ooIIII = '{0}?action={1}sByAZ&letra={2}' . format ( o00I11Iii11i1Ii1 , type , letra )
   o0O = True
   IiiiIiiIII . append ( ( ooIIII , ooOoO0O0 , o0O ) )
  try :
   if 88 - 88: I1 % o00oO0oo0O0O0 * iiIIi1i1Iii + ii1I1ii1IiIi1 % I1IiI1III11i . OOO
   xbmc . executebuiltin ( "Container.SetViewMode(502)" )
  except :
   pass
  xbmcplugin . addDirectoryItems ( iiII , IiiiIiiIII , len ( IiiiIiiIII ) )
  xbmcplugin . endOfDirectory ( iiII )
 else :
  iiIiii1 = sqlite3 . connect ( iiI )
  Oo0ooO00 = iiIiii1 . cursor ( )
  if letra in o00O0o00o :
   o00O0o00o [ letra ] = o00O0o00o [ letra ] + ' OR'
  elif letra == i1 :
   o00O0o00o [ letra ] = "AND" . join ( [ " NOT ( " + Oo00oOO + ") " for ii11Ii11i , Oo00oOO in o00O0o00o . iteritems ( ) ] ) + " AND NOT (" + IiIiii1111I11 + ") OR"
  else :
   o00O0o00o [ letra ] = ''
  if type == 'peli' :
   i11I = I1I1i
  Oo0ooO00 . execute (
 "select " + "," . join ( i11I ) + " from " + type + "s where " + o00O0o00o [ letra ] + " upper(substr(nombre, 1, 1)) == ? order by nombre" ,
 ( letra , ) )
  Ii1iI1i1iI1iI = Oo0ooO00 . fetchall ( )
  iiIiii1 . close ( )
  if type == 'peli' :
   oOOoo0 ( Ii1iI1i1iI1iI , type = 'pelis' )
  else :
   I11 ( Ii1iI1i1iI1iI , True , True , False )
   if 45 - 45: oooOoO / OOoOoO0o0o0OO - II + Ii . iiIIi1i1Iii
   if 36 - 36: oooOoO
def OOOo00ooo0Oo ( option ) :
 oOo = [ ]
 if "Series" == option :
  oOo . append ( { 'title' : 'Series' , o0O0oO0 : o00 , 'ico' : o00 , 'fan' : 'fanart_palantir' } )
  oOo . append ( { 'title' : 'Series A-Z' , o0O0oO0 : 'seriesByAZ' , 'ico' : o00 , 'fan' : 'fanart_palantir' } )
  oOo . append (
 { 'title' : 'Series Infantiles' , o0O0oO0 : 'seriesInf' , 'ico' : 'dibujos' , 'fan' : 'fanart_palantir' } )
  oOo . append ( { 'title' : 'Series Retro' , o0O0oO0 : 'retro' , 'ico' : 'retro' , 'fan' : 'fanart_palantir' } )
  oOo . append ( { 'title' : 'Series Otros Idiomas' , o0O0oO0 : 'seriesByLang' , 'ico' : 'buscar' , 'fan' : 'fanart_series' } )
  oOo . append ( { 'title' : 'Series Recientes' , o0O0oO0 : 'ultimas_series' , 'ico' : 'series_recientes' ,
 'fan' : 'fanart_palantir' } )
  oOo . append ( { 'title' : 'Más Vistas' , o0O0oO0 : 'series_mas_vistas' , 'ico' : 'buscar' , 'fan' : 'fanart_series' } )
  oOo . append ( { 'title' : 'Mas Vistas Último Mes' , o0O0oO0 : 'series_mas_vistas_mes' , 'ico' : 'buscar' , 'fan' : 'fanart_series' } )
 elif "Pelis" == option :
  oOo . append ( { 'title' : 'Pelis A-Z' , o0O0oO0 : 'pelisByAZ' , 'ico' : 'pelis' , 'fan' : 'fanart_palantir' } )
  oOo . append (
 { 'title' : 'Pelis (Genero)' , o0O0oO0 : 'list_generos' , 'ico' : 'pelis_genero' , 'fan' : 'fanart_palantir' } )
  oOo . append ( { 'title' : 'Pelis (Año)' , o0O0oO0 : 'anyo' , 'ico' : 'pelis_anyo' , 'fan' : 'fanart_palantir' } )
  oOo . append ( { 'title' : 'Sagas' , o0O0oO0 : 'sagas' , 'ico' : 'sagas' , 'fan' : 'fanart_palantir' } )
  oOo . append (
 { 'title' : 'Top Pelis (Año)' , o0O0oO0 : 'anyo_top' , 'ico' : 'top_pelis' , 'fan' : 'fanart_palantir' } )
  oOo . append (
 { 'title' : 'Pelis Recientes' , o0O0oO0 : 'ultimas_pelis' , 'ico' : 'pelis_recientes' , 'fan' : 'fanart_palantir' } )
  oOo . append ( { 'title' : 'Más Vistas' , o0O0oO0 : 'pelis_mas_vistas' , 'ico' : 'buscar' , 'fan' : 'fanart_series' } )
  oOo . append ( { 'title' : 'Más Vistas Último Mes' , o0O0oO0 : 'pelis_mas_vistas_mes' , 'ico' : 'buscar' , 'fan' : 'fanart_series' } )
  if 16 - 16: II . Ii1I
 elif "Dibujos" == option :
  oOo . append (
 { 'title' : 'Series Infantiles' , o0O0oO0 : 'seriesInf' , 'ico' : 'dibujos' , 'fan' : 'fanart_palantir' } )
  oOo . append (
 { 'title' : 'Pelis Dibujos' , o0O0oO0 : 'peli_inf' , 'ico' : 'pelis_dibujos' , 'fan' : 'fanart_palantir' } )
  oOo . append (
 { 'title' : 'Top Pelis Dibujos' , o0O0oO0 : 'top_peli_inf' , 'ico' : 'top_dibujos' , 'fan' : 'fanart_palantir' } )
  oOo . append ( { 'title' : 'Pelis Dibujos Recientes' , o0O0oO0 : 'last_peli_inf' , 'ico' : 'dibujos_recientes' ,
 'fan' : 'fanart_palantir' } )
 else :
  oOo . append ( { 'title' : 'Favoritos' , o0O0oO0 : 'listfav' , 'ico' : 'favoritos' , 'fan' : 'fanart_palantir' } )
  oOo . append ( { 'title' : 'Menu Series' , o0O0oO0 : 'series_menu' , 'ico' : o00 , 'fan' : 'fanart_palantir' } )
  oOo . append ( { 'title' : 'Menu Pelis' , o0O0oO0 : 'pelis_menu' , 'ico' : 'pelis' , 'fan' : 'fanart_palantir' } )
  oOo . append (
 { 'title' : 'Menu Dibujos' , o0O0oO0 : 'dibujos_menu' , 'ico' : 'dibujos' , 'fan' : 'fanart_palantir' } )
  oOo . append ( { 'title' : 'Series Recientes' , o0O0oO0 : 'ultimas_series' , 'ico' : 'series_recientes' ,
 'fan' : 'fanart_palantir' } )
  oOo . append (
 { 'title' : 'Pelis Recientes' , o0O0oO0 : 'ultimas_pelis' , 'ico' : 'pelis_recientes' , 'fan' : 'fanart_palantir' } )
  oOo . append ( { 'title' : 'Pelis Dibujos Recientes' , o0O0oO0 : 'last_peli_inf' , 'ico' : 'dibujos_recientes' ,
 'fan' : 'fanart_palantir' } )
  oOo . append ( { 'title' : 'Buscar Peli' , o0O0oO0 : 'searchPeli' , 'ico' : 'buscar' , 'fan' : 'fanart_palantir' } )
  oOo . append ( { 'title' : 'Buscar Serie' , o0O0oO0 : 'searchSerie' , 'ico' : 'buscar' , 'fan' : 'fanart_palantir' } )
 return oOo
 if 89 - 89: IIoooO0ooO0oo . I1 + II - Ii
 if 57 - 57: oooOoO
 if 30 - 30: i1iI1 + oooOoO * IiII1i1I / oOO % I1IiI1III11i
def i11 ( ) :
 oOo = [ ]
 oOo . append ( { 'title' : 'Series' , o0O0oO0 : o00 , 'ico' : o00 , 'fan' : 'fanart_palantir' } )
 oOo . append ( { 'title' : 'Series A-Z' , o0O0oO0 : 'seriesByAZ' , 'ico' : o00 , 'fan' : 'fanart_palantir' } )
 oOo . append ( { 'title' : 'Series Infantiles' , o0O0oO0 : 'seriesInf' , 'ico' : 'dibujos' , 'fan' : 'fanart_palantir' } )
 oOo . append ( { 'title' : 'Series Retro' , o0O0oO0 : 'retro' , 'ico' : 'retro' , 'fan' : 'fanart_palantir' } )
 oOo . append ( { 'title' : 'Favoritos' , o0O0oO0 : 'listfav' , 'ico' : 'favoritos' , 'fan' : 'fanart_palantir' } )
 oOo . append ( { 'title' : 'Pelis A-Z' , o0O0oO0 : 'pelisByAZ' , 'ico' : 'pelis' , 'fan' : 'fanart_palantir' } )
 oOo . append ( { 'title' : 'Pelis (Genero)' , o0O0oO0 : 'list_generos' , 'ico' : 'pelis_genero' , 'fan' : 'fanart_palantir' } )
 oOo . append ( { 'title' : 'Pelis (Año)' , o0O0oO0 : 'anyo' , 'ico' : 'pelis_anyo' , 'fan' : 'fanart_palantir' } )
 oOo . append ( { 'title' : 'Pelis Dibujos' , o0O0oO0 : 'peli_inf' , 'ico' : 'pelis_dibujos' , 'fan' : 'fanart_palantir' } )
 oOo . append ( { 'title' : 'Top Pelis (Año)' , o0O0oO0 : 'anyo_top' , 'ico' : 'top_pelis' , 'fan' : 'fanart_palantir' } )
 oOo . append ( { 'title' : 'Top Pelis Dibujos' , o0O0oO0 : 'top_peli_inf' , 'ico' : 'top_dibujos' , 'fan' : 'fanart_palantir' } )
 oOo . append ( { 'title' : 'Pelis Dibujos Recientes' , o0O0oO0 : 'last_peli_inf' , 'ico' : 'dibujos_recientes' , 'fan' : 'fanart_palantir' } )
 oOo . append ( { 'title' : 'Pelis Recientes' , o0O0oO0 : 'ultimas_pelis' , 'ico' : 'pelis_recientes' , 'fan' : 'fanart_palantir' } )
 oOo . append ( { 'title' : 'Series Recientes' , o0O0oO0 : 'ultimas_series' , 'ico' : 'series_recientes' , 'fan' : 'fanart_palantir' } )
 oOo . append ( { 'title' : 'Sagas' , o0O0oO0 : 'sagas' , 'ico' : 'sagas' , 'fan' : 'fanart_palantir' } )
 oOo . append ( { 'title' : 'Buscar Peli' , o0O0oO0 : 'searchPeli' , 'ico' : 'buscar' , 'fan' : 'fanart_palantir' } )
 oOo . append ( { 'title' : 'Buscar Serie' , o0O0oO0 : 'searchSerie' , 'ico' : 'buscar' , 'fan' : 'fanart_palantir' } )
 if 60 - 60: IiII1IiI . iIi11 + ooOooO0OOO
 if 97 - 97: ii1I1ii1IiIi1
 return oOo
 if 97 - 97: oOO % ii1I1ii1IiIi1 + IiII1IiI % i1iI1
 if 59 - 59: ooOooO0OOO
def IiIiI ( function_menu ) :
 O0000O ( iiI )
 oOo = function_menu
 IiiiIiiIII = [ ]
 for oOo0 in oOo :
  ooOoO0O0 = iIiI1iiII1Ii ( nombre = oOo0 [ 'title' ] , caratula = '%s/%s.jpg' % ( iIi11iI1ii1I , oOo0 [ 'ico' ] ) ,
 poster = '%s/%s.jpg' % ( iIi11iI1ii1I , oOo0 [ 'fan' ] ) )
  ooIIII = '{0}?{1}={2}' . format ( o00I11Iii11i1Ii1 , o0O0oO0 , oOo0 [ o0O0oO0 ] )
  o0O = True
  IiiiIiiIII . append ( ( ooIIII , ooOoO0O0 , o0O ) )
 try :
  if 31 - 31: OOO
  xbmc . executebuiltin ( "Container.SetViewMode(500)" )
 except :
  pass
 xbmcplugin . addDirectoryItems ( iiII , IiiiIiiIII , len ( IiiiIiiIII ) )
 xbmcplugin . endOfDirectory ( iiII )
 if 11 - 11: I1IiI1III11i
 if 10 - 10: oooOoO - OOO / oo / Ii1I
 if 75 - 75: oooOoO . IIII
def oOOoo0 ( rows = [ ] , type = o00 , carat = None , poste = None , info = { } ) :
 try :
  if type == o00 :
   xbmcplugin . setContent ( iiII , "episodes" )
  else :
   xbmcplugin . setContent ( iiII , "movies" )
  xbmc . executebuiltin ( "Container.SetViewMode(502)" )
 except :
  pass
  if 30 - 30: IiII1IiI % OOO . I1
 oOoOO0O0OOo = { }
 if 40 - 40: i1iI1 - oo / iIi11 / I1
 if 34 - 34: o00oO0oo0O0O0
 if 16 - 16: oo % I1IiI1III11i - ooOooO0OOO . IiII1IiI . iiIIi1i1Iii
 if 38 - 38: IiII1IiI + Ii * oooOoO
 if 44 - 44: oOO / I1IiI1III11i / iiIIi1i1Iii
 if 60 - 60: ii1I1ii1IiIi1 . ii1I1ii1IiIi1 . ooOooO0OOO / IIoooO0ooO0oo / I1IiI1III11i
 if 53 - 53: ooOooO0OOO / ii1I1ii1IiIi1 / o00oO0oo0O0O0 - OOO * I1IiI1III11i + IiII1i1I
 if 90 - 90: ooOooO0OOO + IIoooO0ooO0oo / oooOoO + OOO * iIi11 % iiIIi1i1Iii
 if 97 - 97: OOoOoO0o0o0OO * II . I1 + Ii1I
 Oo0Ooo = { }
 IiiiIiiIII = [ ]
 if len ( rows ) > 0 :
  for Ii1I111 in rows :
   Oo0oOOOO = [ ]
   I1Ii1I11i1Ii = Ii1I111 [ 0 ]
   Iii1oO00o0000OO0O = Ii1I111 [ 1 ]
   i1Ii11i = Ii1I111 [ 2 ]
   ooOO0Oo0oO = Ii1I111 [ 6 ]
   if Ii1I111 [ 7 ] :
    IiIiIIi1 = Ii1I111 [ 7 ]
   else :
    IiIiIIi1 = None
   OO = Ii1I111 [ 8 ]
   OO0oOO0O = Ii1I111 [ 9 ]
   ooOoo0 = Ii1I111 [ 10 ]
   O0oOooOoOo0 = Ii1I111 [ 11 ]
   oOO00OoO0oo = Ii1I111 [ 12 ]
   if OO :
    OooO0OOoo0O0 = OO
   else :
    OooO0OOoo0O0 = str ( Iii1oO00o0000OO0O ) + 'x' + i1Ii11i
    OO = str ( Iii1oO00o0000OO0O ) + 'x' + i1Ii11i
   if Ii1I111 [ 3 ] :
    iIiiiI = Ii1I111 [ 3 ] . split ( '#' )
    for OoOo0O in iIiiiI :
     if OoOo0O == 'S' :
      OoOo0O = 'HD'
     OO = OO + '[COLOR green] (%s) [/COLOR]' % str ( OoOo0O )
   if info and 'puntos' in info and Ii1I111 [ 14 ] :
    OO = OO + ' [%s] ' % str ( Ii1I111 [ 14 ] )
   if info and 'anno' in info and OO0oOO0O :
    OO = OO + ' (%s) ' % str ( OO0oOO0O )
   if info and 'date' in info :
    OO = OO + ' (%s) ' % str ( Ii1I111 [ 13 ] )
   if not O0oOooOoOo0 :
    O0oOooOoOo0 = carat
   if not oOO00OoO0oo :
    oOO00OoO0oo = poste
   ooOoO0O0 = iIiI1iiII1Ii ( nombre = OO , caratula = O0oOooOoOo0 ,
 poster = oOO00OoO0oo , video = { 'title' : OO , 'year' : OO0oOO0O , 'plot' : ooOoo0 } , isPlayable = True )
   if 11 - 11: IiII1IiI / IIoooO0ooO0oo . iiIIi1i1Iii
   if isinstance ( OooO0OOoo0O0 , unicode ) :
    OooO0OOoo0O0 = OooO0OOoo0O0 . encode ( 'utf-8' )
   ooIIII = '{0}?{1}=play&id={2}&lin={3}&tit={4}&type={5}' . format ( o00I11Iii11i1Ii1 , o0O0oO0 , I1Ii1I11i1Ii , ooOO0Oo0oO ,
 base64 . urlsafe_b64encode (
 unicode ( OooO0OOoo0O0 , I111i11I1I ) . encode (
 I111i11I1I ) ) , type )
   try :
    ii11ii1iIII1I , i1iI1oOoOo0O0 = anor . I1i1I1iI11I (
 'select files.idFile, idPath, strFilename, playCount, iVideoWidth||"x"||iVideoHeight from files, streamdetails where streamdetails.idFile = files.idFile and iStreamType=0 and idPath=(Select idPath from path where strPath="plugin://plugin.video.palantir/") and strFilename like "plugin://plugin.video.palantir/?action=play&id=%s%"' % str (
 Ii1I111 [ 0 ] ) )
    if 87 - 87: iIi11 - ii1I1ii1IiIi1 + IiII1IiI + oOO . I1 * OOoOoO0o0o0OO
    for oo00OOO0Oo000 in i1iI1oOoOo0O0 :
     oOoOO0O0OOo [ oo00OOO0Oo000 [ 2 ] ] = oo00OOO0Oo000
   except :
    pass
    if 37 - 37: II / I1IiI1III11i % IiII1IiI + oOO
   if ooIIII in oOoOO0O0OOo :
    if oOoOO0O0OOo [ ooIIII ] [ 3 ] > 0 :
     Oo0oOOOO . append ( o0OO ( oOoOO0O0OOo [ ooIIII ] [ 0 ] , oOoOO0O0OOo [ ooIIII ] [ 1 ] , oOoOO0O0OOo [ ooIIII ] [ 2 ] , False ) )
    else :
     Oo0oOOOO . append ( o0OO ( oOoOO0O0OOo [ ooIIII ] [ 0 ] , oOoOO0O0OOo [ ooIIII ] [ 1 ] , oOoOO0O0OOo [ ooIIII ] [ 2 ] , True ) )
    if oOoOO0O0OOo [ ooIIII ] [ 4 ] :
     if not str ( I1Ii1I11i1Ii ) + '-' + str ( Iii1oO00o0000OO0O ) + '-' + i1Ii11i in Oo0Ooo and not IiIiIIi1 :
      Oo0Ooo [ str ( I1Ii1I11i1Ii ) + '-' + str ( Iii1oO00o0000OO0O ) + '-' + i1Ii11i ] = str ( oOoOO0O0OOo [ ooIIII ] [ 4 ] )
   else :
    Oo0oOOOO . append ( o0OO ( 0 , oOOO0O0 , ooIIII , True ) )
   Oo0oOOOO . append (
 oOoOOo ( id = '%s-%s-%s' % ( str ( I1Ii1I11i1Ii ) , str ( Iii1oO00o0000OO0O ) , i1Ii11i ) , type = type , nombre = OO , url = ooIIII ,
 caratula = O0oOooOoOo0 , poster = oOO00OoO0oo ) )
   if 71 - 71: ooOooO0OOO
   ooOoO0O0 . addContextMenuItems ( Oo0oOOOO )
   if 92 - 92: oOO + IiII1IiI - I1IiI1III11i % Ii1I * oo
   if 89 - 89: ooOooO0OOO
   if 85 - 85: ooOooO0OOO
   if 91 - 91: IiII1i1I * I1 + oo
   if 74 - 74: i1iI1 % IIII - IIII
   o0O = False
   IiiiIiiIII . append ( ( ooIIII , ooOoO0O0 , o0O ) )
  try :
   if len ( Oo0Ooo ) > 0 :
    for Ooo , OOO0O0OO0OO0O in Oo0Ooo . iteritems ( ) :
     ithil . updateQuality ( iiI , Ooo , OOO0O0OO0OO0O , type )
  except :
   pass
   if 69 - 69: oooOoO / IiII1IiI * I1 - I1 . ii1I1ii1IiIi1 - o00oO0oo0O0O0
 else :
  if 40 - 40: IIII * oo - I1IiI1III11i . I1IiI1III11i
  IiiiIiiIII . append ( ( '{0}' . format ( o00I11Iii11i1Ii1 ) , iIiI1iiII1Ii ( nombre = 'No hay elementos' , caratula = '' ) , True ) )
 xbmcplugin . addDirectoryItems ( iiII , IiiiIiiIII , len ( IiiiIiiIII ) )
 xbmcplugin . endOfDirectory ( iiII )
 if 15 - 15: oo + ooOooO0OOO . o00oO0oo0O0O0 * iiIIi1i1Iii + oooOoO % IIII
 if 56 - 56: Ii - oo
 if 52 - 52: II - o00oO0oo0O0O0 . I1IiI1III11i - IiII1i1I % IiII1i1I . ooOooO0OOO
def I11 ( rows , category = None , lang = None , date = None , params = { } ) :
 IiiiIiiIII = [ ]
 try :
  xbmcplugin . setContent ( iiII , "tvshows" )
  xbmc . executebuiltin ( "Container.SetViewMode(515)" )
 except :
  pass
  if 70 - 70: OOO * iIi11 * IIII . I1IiI1III11i / Ii1I . IiII1IiI
  if 44 - 44: IIII
 for Ii1I111 in rows :
  ii1Ii = Ii1I111 [ 0 ]
  iiiI = Ii1I111 [ 1 ]
  ooOo0Oo00OoO = Ii1I111 [ 2 ]
  III1iI = ''
  iI1IIi111Ii = ''
  o0OoooOo00OoO0oo = ''
  if category and Ii1I111 [ 10 ] != 'General' and Ii1I111 [ 10 ] != 'Pelicula' :
   iI1IIi111Ii = '[COLOR silver](%s) [/COLOR]' % ( Ii1I111 [ 10 ] )
  if lang and Ii1I111 [ 9 ] != 'Castellano' :
   III1iI = '[COLOR silver](%s) [/COLOR]' % ( Ii1I111 [ 9 ] )
  if date :
   o0OoooOo00OoO0oo = '[COLOR silver](%s)[/COLOR]' % str ( Ii1I111 [ 11 ] )
  if ooOo0Oo00OoO and Ii1I111 [ 8 ] == 'N' :
   OoOoOO00 = ithil . OOo0oo ( ooOo0Oo00OoO )
   if OoOoOO00 == 'yt' :
    Ooo0OoO0o = ithil . i111 ( ooOo0Oo00OoO )
    for ii11Ii11i in xrange ( 0 , len ( Ooo0OoO0o ) ) :
     if len ( Ooo0OoO0o ) <= 1 :
      oOoooooo00Oo = ''
     else :
      oOoooooo00Oo = " (" + str ( ii11Ii11i + 1 ) + ")"
     Ii1 = '[COLOR gold]%s [/COLOR] %s %s %s' % ( iiiI + oOoooooo00Oo , III1iI , iI1IIi111Ii , o0OoooOo00OoO0oo )
     ooOoO0O0 = iIiI1iiII1Ii ( nombre = Ii1 , caratula = Ii1I111 [ 6 ] ,
 poster = Ii1I111 [ 7 ] , video = { 'title' : Ii1I111 [ 3 ] , 'year' : Ii1I111 [ 4 ] , 'plot' : Ii1I111 [ 5 ] } )
     ooOoO0O0 . addContextMenuItems ( [ oOoOOo ( id = '%s-v' % str ( ii1Ii ) , type = 'series' , nombre = Ii1 , url = Ooo0OoO0o [ ii11Ii11i ] ,
 caratula = Ii1I111 [ 6 ] , poster = Ii1I111 [ 7 ] ) ] )
     IiiiIiiIII . append ( ( Ooo0OoO0o [ ii11Ii11i ] , ooOoO0O0 , True ) )
   else :
    Ii1 = '[COLOR gold]%s [/COLOR] %s %s %s' % ( iiiI , III1iI , iI1IIi111Ii , o0OoooOo00OoO0oo )
    ooOoO0O0 = iIiI1iiII1Ii ( nombre = Ii1 , caratula = Ii1I111 [ 6 ] ,
 poster = Ii1I111 [ 7 ] , video = { 'title' : Ii1I111 [ 3 ] , 'year' : Ii1I111 [ 4 ] , 'plot' : Ii1I111 [ 5 ] } )
    ooIIII = '{0}?{1}=view_serie&serie_id={2}' . format ( o00I11Iii11i1Ii1 , o0O0oO0 , ii1Ii )
    ooOoO0O0 . addContextMenuItems (
 [ oOoOOo ( id = '%s-v' % str ( ii1Ii ) , type = 'series' , nombre = Ii1 , url = ooIIII , caratula = Ii1I111 [ 6 ] , poster = Ii1I111 [ 7 ] ) ] )
    IiiiIiiIII . append ( ( ooIIII , ooOoO0O0 , True ) )
  else :
   Ii1 = '[COLOR gold]%s [/COLOR] %s %s %s' % ( iiiI , III1iI , iI1IIi111Ii , o0OoooOo00OoO0oo )
   ooOoO0O0 = iIiI1iiII1Ii ( nombre = Ii1 , caratula = Ii1I111 [ 6 ] ,
 poster = Ii1I111 [ 7 ] , video = { 'title' : Ii1I111 [ 3 ] , 'year' : Ii1I111 [ 4 ] , 'plot' : Ii1I111 [ 5 ] } )
   ooIIII = '{0}?{1}=serie&serie_id={2}' . format ( o00I11Iii11i1Ii1 , o0O0oO0 , ii1Ii )
   ooOoO0O0 . addContextMenuItems (
 [ oOoOOo ( id = str ( ii1Ii ) , type = 'series' , nombre = Ii1 , url = ooIIII , caratula = Ii1I111 [ 6 ] , poster = Ii1I111 [ 7 ] ) ] )
   IiiiIiiIII . append ( ( ooIIII , ooOoO0O0 , True ) )
   if 42 - 42: oOO % I1
 if len ( rows ) >= iIiiIIi1III1 :
  if 'c_page' in params and 'action' in params :
   try :
    iiiI = iiiI . encode ( 'utf-8' , 'ignore' )
   except ( UnicodeEncodeError , UnicodeDecodeError ) :
    pass
   oO000 = int ( params [ 'c_page' ] )
   oO000 = oO000 + 1
   ooOoO0O0 = iIiI1iiII1Ii ( nombre = 'Página Siguiente (%s) >' % str ( oO000 ) )
   ooIIII = '{0}?{1}={2}&c_page={3}&alfa={4}&page={5}' . format ( o00I11Iii11i1Ii1 , o0O0oO0 , params [ 'action' ] , str ( oO000 ) ,
 base64 . urlsafe_b64encode (
 "alfa >= '" + rows [ len ( rows ) - 1 ] [ 12 ] + "'" ) ,
 base64 . urlsafe_b64encode (
 "nombre > '" + iiiI + "'" ) )
   IiiiIiiIII . append ( ( ooIIII , ooOoO0O0 , True ) )
 xbmcplugin . addDirectoryItems ( iiII , IiiiIiiIII , len ( IiiiIiiIII ) )
 xbmcplugin . endOfDirectory ( iiII )
 if 92 - 92: oooOoO * ii1I1ii1IiIi1 * i1iI1 * IIoooO0ooO0oo * Ii1I
 if 49 - 49: IiII1i1I * IiII1IiI
 if 84 - 84: IiII1IiI % I1 + OOO . o00oO0oo0O0O0 - ooOooO0OOO
def IiII11i ( serie_id ) :
 iiIiii1 = sqlite3 . connect ( iiI )
 Oo0ooO00 = iiIiii1 . cursor ( )
 Oo0ooO00 . execute (
 "SELECT series.serie_id, series_temp.temp_id, series_temp.link, series.nombre, series.anno, series.sinopsis, series.caratula, series.poster, series_temp.sinopsis, series_temp.caratula, series_temp.poster, series_temp.has_episodes, series_temp.nombre, series.link, series.quality, series_temp.quality FROM series LEFT JOIN series_temp ON series.serie_id = series_temp.serie_id where series.serie_id=? ORDER BY series_temp.temp_id" ,
 ( serie_id , ) )
 Ii1iI1i1iI1iI = Oo0ooO00 . fetchall ( )
 iiIiii1 . close ( )
 IiiiIiiIII = [ ]
 ooO0 = False
 if len ( Ii1iI1i1iI1iI ) > 0 :
  if Ii1iI1i1iI1iI [ 0 ] [ 13 ] :
   OoOoOO00 = ithil . OOo0oo ( Ii1iI1i1iI1iI [ 0 ] [ 13 ] )
   if OoOoOO00 == 'yt' :
    Ooo0OoO0o = ithil . i111 ( Ii1iI1i1iI1iI [ 0 ] [ 13 ] )
    for ii11Ii11i in xrange ( 0 , len ( Ooo0OoO0o ) ) :
     if len ( Ooo0OoO0o ) <= 1 :
      oOoooooo00Oo = ''
     else :
      oOoooooo00Oo = " (" + str ( ii11Ii11i + 1 ) + ")"
     Ii1 = '[COLOR gold]Lista de Capítulos %s [/COLOR]' % oOoooooo00Oo
     ooOoO0O0 = iIiI1iiII1Ii ( nombre = Ii1 , caratula = Ii1iI1i1iI1iI [ 0 ] [ 6 ] ,
 poster = Ii1iI1i1iI1iI [ 0 ] [ 7 ] ,
 video = { 'title' : Ii1iI1i1iI1iI [ 0 ] [ 3 ] , 'year' : Ii1iI1i1iI1iI [ 0 ] [ 4 ] , 'plot' : Ii1iI1i1iI1iI [ 0 ] [ 5 ] } )
     ooOoO0O0 . addContextMenuItems ( [ oOoOOo ( id = '%s-v' % str ( serie_id ) , type = o00 , nombre = Ii1 ,
 url = Ooo0OoO0o [ ii11Ii11i ] , caratula = Ii1iI1i1iI1iI [ 0 ] [ 6 ] ,
 poster = Ii1iI1i1iI1iI [ 0 ] [ 7 ] ) ] )
     IiiiIiiIII . append ( ( Ooo0OoO0o [ ii11Ii11i ] , ooOoO0O0 , True ) )
   else :
    Ii1 = '[COLOR gold]Lista de Capítulos [/COLOR]'
    ooOoO0O0 = iIiI1iiII1Ii ( nombre = Ii1 , caratula = Ii1iI1i1iI1iI [ 0 ] [ 6 ] ,
 poster = Ii1iI1i1iI1iI [ 0 ] [ 7 ] ,
 video = { 'title' : Ii1iI1i1iI1iI [ 0 ] [ 3 ] , 'year' : Ii1iI1i1iI1iI [ 0 ] [ 4 ] ,
 'plot' : 'Todos los episodios de la serie' } )
    ooIIII = '{0}?{1}=view_serie&serie_id={2}' . format ( o00I11Iii11i1Ii1 , o0O0oO0 , serie_id )
    ooOoO0O0 . addContextMenuItems ( [ oOoOOo ( id = '%s-v' % str ( serie_id ) , type = o00 , nombre = Ii1 , url = ooIIII ,
 caratula = Ii1iI1i1iI1iI [ 0 ] [ 6 ] , poster = Ii1iI1i1iI1iI [ 0 ] [ 7 ] ) ] )
    if 47 - 47: OOoOoO0o0o0OO - IiII1i1I . Ii - OOoOoO0o0o0OO . IIoooO0ooO0oo + IIII
    if 35 - 35: Ii * IIoooO0ooO0oo % oooOoO . oooOoO
    if 30 - 30: IIII . IiII1i1I * IIII - Ii1I / OOoOoO0o0o0OO * iIi11
    IiiiIiiIII . append ( ( ooIIII , ooOoO0O0 , True ) )
 for Ii1I111 in Ii1iI1i1iI1iI :
  ooO0 = False
  ii1Ii = Ii1I111 [ 0 ]
  i1I1iiIii = Ii1I111 [ 1 ]
  if 41 - 41: Ii1I - oo % Ii
  if Ii1I111 [ 12 ] :
   oOoO0O00000 = Ii1I111 [ 12 ]
  else :
   oOoO0O00000 = '%s %s' % ( 'Temporada' , i1I1iiIii )
  IIiIii1IiI1i = I1iii1 ( Ii1I111 [ 5 ] , Ii1I111 [ 6 ] , Ii1I111 [ 7 ] , Ii1I111 [ 8 ] , Ii1I111 [ 9 ] , Ii1I111 [ 10 ] )
  if Ii1I111 [ 2 ] :
   o0O = True
   ooO0 = True
   OoOoOO00 = ithil . OOo0oo ( Ii1I111 [ 2 ] )
   if OoOoOO00 == 'yt' :
    Ooo0OoO0o = ithil . i111 ( Ii1I111 [ 2 ] )
    for ii11Ii11i in xrange ( 0 , len ( Ooo0OoO0o ) ) :
     if len ( Ooo0OoO0o ) <= 1 :
      oOoooooo00Oo = ''
     else :
      oOoooooo00Oo = " (" + str ( ii11Ii11i + 1 ) + ")"
     Ii1 = '[COLOR gold]%s[/COLOR]' % ( oOoO0O00000 + oOoooooo00Oo )
     ooOoO0O0 = iIiI1iiII1Ii ( nombre = Ii1 , caratula = IIiIii1IiI1i [ 1 ] ,
 poster = IIiIii1IiI1i [ 2 ] ,
 video = { 'title' : Ii1I111 [ 3 ] , 'year' : Ii1I111 [ 4 ] , 'plot' : IIiIii1IiI1i [ 0 ] } )
     ooOoO0O0 . addContextMenuItems ( [ oOoOOo ( id = '%s%s-v' % ( str ( ii1Ii ) , str ( i1I1iiIii ) ) , type = o00 , nombre = Ii1 ,
 url = Ooo0OoO0o [ ii11Ii11i ] , caratula = IIiIii1IiI1i [ 1 ] , poster = IIiIii1IiI1i [ 2 ] ) ] )
     IiiiIiiIII . append ( ( Ooo0OoO0o [ ii11Ii11i ] , ooOoO0O0 , True ) )
   else :
    Ii1 = '[COLOR gold]%s[/COLOR]' % oOoO0O00000
    ooOoO0O0 = iIiI1iiII1Ii ( nombre = Ii1 , caratula = IIiIii1IiI1i [ 1 ] ,
 poster = IIiIii1IiI1i [ 2 ] ,
 video = { 'title' : Ii1I111 [ 3 ] , 'year' : Ii1I111 [ 4 ] , 'plot' : IIiIii1IiI1i [ 0 ] } )
    ooIIII = '{0}?{1}=view_temp&serie_id={2}&temp_id={3}' . format ( o00I11Iii11i1Ii1 , o0O0oO0 , ii1Ii , i1I1iiIii )
    ooOoO0O0 . addContextMenuItems ( [ oOoOOo ( id = '%s%s-v' % ( str ( ii1Ii ) , str ( i1I1iiIii ) ) , type = o00 , nombre = Ii1 ,
 url = ooIIII , caratula = IIiIii1IiI1i [ 1 ] , poster = IIiIii1IiI1i [ 2 ] ) ] )
    if 54 - 54: IIII . I1IiI1III11i * OOO - IiII1IiI
    if 77 - 77: II * ooOooO0OOO % I1 + I1 / oOO
    if 21 - 21: I1 . IiII1i1I / IIII % II - I1
    IiiiIiiIII . append ( ( ooIIII , ooOoO0O0 , o0O ) )
  if Ii1I111 [ 11 ] == 'Y' :
   Ii1 = '[COLOR gold]%s [/COLOR]' % oOoO0O00000
   if Ii1I111 [ 2 ] :
    Ii1 = '%s [COLOR white](Alternativo)[/COLOR]' % ( Ii1 )
   ooOoO0O0 = iIiI1iiII1Ii ( nombre = Ii1 , caratula = IIiIii1IiI1i [ 1 ] ,
 poster = IIiIii1IiI1i [ 2 ] ,
 video = { 'title' : Ii1I111 [ 3 ] , 'year' : Ii1I111 [ 4 ] , 'plot' : IIiIii1IiI1i [ 0 ] } )
   ooIIII = '{0}?{1}=list_temp&serie_id={2}&temp_id={3}&caratula={4}&poster={5}' . format ( o00I11Iii11i1Ii1 , o0O0oO0 , ii1Ii , i1I1iiIii ,
 IIiIii1IiI1i [ 1 ] , IIiIii1IiI1i [ 2 ] )
   ooOoO0O0 . addContextMenuItems ( [ oOoOOo ( id = '%s%s' % ( str ( ii1Ii ) , str ( i1I1iiIii ) ) , type = o00 , nombre = Ii1 , url = ooIIII ,
 caratula = IIiIii1IiI1i [ 1 ] , poster = IIiIii1IiI1i [ 2 ] ) ] )
   if 78 - 78: oOO
   if 87 - 87: iiIIi1i1Iii * ii1I1ii1IiIi1 / oOO % OOO / OOoOoO0o0o0OO
   if 38 - 38: OOoOoO0o0o0OO * I1 / iIi11
   if 70 - 70: oooOoO * IiII1IiI . II . iIi11 * I1 + oooOoO
   o0O = True
   ooO0 = True
   IiiiIiiIII . append ( ( ooIIII , ooOoO0O0 , o0O ) )
 try :
  xbmcplugin . setContent ( iiII , "tvshows" )
  xbmc . executebuiltin ( "Container.SetViewMode(515)" )
 except :
  pass
 if ooO0 :
  xbmcplugin . addDirectoryItems ( iiII , IiiiIiiIII , len ( IiiiIiiIII ) )
  xbmcplugin . endOfDirectory ( iiII )
 else :
  xbmc . log ( "[addon.Palantir-%s]: No info found for serie %s " % ( iiIIiiiI11 , serie_id ) )
  if 77 - 77: o00oO0oo0O0O0 % I1
  if 72 - 72: ii1I1ii1IiIi1 + Ii * IIoooO0ooO0oo * IiII1i1I % iiIIi1i1Iii
  if 83 - 83: I1IiI1III11i / OOO . Ii . iiIIi1i1Iii % II / I1IiI1III11i
def OOoOOoOO0OO0 ( serie_id , temp_id , caratula , poster ) :
 Ii1iI1i1iI1iI = I1Ii1IiIIiI ( "capitulos" , [ "serie_id" , "temp_id" , "capitulo_id" , "''" , "''" , "''" , "link" , "quality" ,
 "nombre" , "anno" , "sinopsis" , "caratula" , "poster" , "updated" ] , [ "serie_id" , "temp_id" ] ,
 [ serie_id , temp_id ] , [ 'capitulos.nombre' , 'capitulos.capitulo_id' ] )
 oOOoo0 ( Ii1iI1i1iI1iI , o00 , caratula , poster )
 if 96 - 96: ooOooO0OOO + Ii
 if 8 - 8: oo % IiII1i1I + iIi11 % IiII1i1I % IIII / OOO
 if 17 - 17: iIi11
def oO00oOo ( serie_id , temp_id ) :
 iiIiii1 = sqlite3 . connect ( iiI )
 Oo0ooO00 = iiIiii1 . cursor ( )
 Oo0ooO00 . execute (
 "SELECT series.serie_id, series_temp.temp_id, '', '', '', '', series_temp.link, series_temp.quality, series.nombre, series_temp.anno, series.sinopsis, series.caratula, series.poster, series_temp.sinopsis, series_temp.caratula, series_temp.poster FROM series INNER JOIN series_temp ON series.serie_id=series_temp.serie_id where series_temp.serie_id=? AND series_temp.temp_id=?" ,
 ( serie_id , temp_id , ) )
 Ii1iI1i1iI1iI = Oo0ooO00 . fetchall ( )
 iiIiii1 . close ( )
 IIiIii1IiI1i = I1iii1 ( Ii1iI1i1iI1iI [ 0 ] [ 10 ] , Ii1iI1i1iI1iI [ 0 ] [ 11 ] , Ii1iI1i1iI1iI [ 0 ] [ 12 ] , Ii1iI1i1iI1iI [ 0 ] [ 13 ] , Ii1iI1i1iI1iI [ 0 ] [ 14 ] , Ii1iI1i1iI1iI [ 0 ] [ 15 ] )
 IiiIiIiII = ithil . i11Ii ( Ii1iI1i1iI1iI [ 0 ] [ 6 ] , iiI , serie_id , temp_id )
 o0o00oo0Oo0oo = [ None ] * len ( IiiIiIiII )
 for ii11Ii11i in xrange ( 0 , len ( IiiIiIiII ) ) :
  o0o00oo0Oo0oo [ ii11Ii11i ] = list ( Ii1iI1i1iI1iI [ 0 ] [ : len ( Ii1iI1i1iI1iI [ 0 ] ) - 3 ] )
  o0o00oo0Oo0oo [ ii11Ii11i ] [ 10 ] = IIiIii1IiI1i [ 0 ]
  o0o00oo0Oo0oo [ ii11Ii11i ] [ 11 ] = IIiIii1IiI1i [ 1 ]
  o0o00oo0Oo0oo [ ii11Ii11i ] [ 12 ] = IIiIii1IiI1i [ 2 ]
  o0o00oo0Oo0oo [ ii11Ii11i ] [ 6 ] = IiiIiIiII [ ii11Ii11i ] [ 1 ]
  o0o00oo0Oo0oo [ ii11Ii11i ] [ 8 ] = IiiIiIiII [ ii11Ii11i ] [ 0 ]
  o0o00oo0Oo0oo [ ii11Ii11i ] [ 10 ] = ''
 oOOoo0 ( o0o00oo0Oo0oo , o00 )
 if 43 - 43: oOO . I1 * oo
 if 55 - 55: Ii / I1IiI1III11i * oo - I1 + IIII
 if 63 - 63: o00oO0oo0O0O0
def oOOo0O0 ( serie_id ) :
 Ii1iI1i1iI1iI = I1Ii1IiIIiI ( "series" ,
 [ "serie_id" , "''" , "''" , "''" , "''" , "''" , "link" , "quality" , "nombre" , "anno" , "sinopsis" ,
 "caratula" , "poster" , "updated"
 ] , [ "serie_id" ] , [ serie_id ] , [ 'serie_id' ] )
 if 29 - 29: II
 if 21 - 21: iIi11 / oOO . IIoooO0ooO0oo * OOoOoO0o0o0OO . iIi11 / iiIIi1i1Iii
 IiiIiIiII = ithil . i11Ii ( Ii1iI1i1iI1iI [ 0 ] [ 6 ] , iiI , serie_id )
 o0o00oo0Oo0oo = [ None ] * len ( IiiIiIiII )
 for ii11Ii11i in xrange ( 0 , len ( IiiIiIiII ) ) :
  o0o00oo0Oo0oo [ ii11Ii11i ] = list ( Ii1iI1i1iI1iI [ 0 ] [ : ] )
  o0o00oo0Oo0oo [ ii11Ii11i ] [ 6 ] = IiiIiIiII [ ii11Ii11i ] [ 1 ]
  o0o00oo0Oo0oo [ ii11Ii11i ] [ 8 ] = IiiIiIiII [ ii11Ii11i ] [ 0 ]
  o0o00oo0Oo0oo [ ii11Ii11i ] [ 10 ] = ''
 oOOoo0 ( o0o00oo0Oo0oo , o00 )
 if 18 - 18: Ii / o00oO0oo0O0O0 % OOoOoO0o0o0OO
 if 45 - 45: IIII % i1iI1 + OOO - oOO
 if 87 - 87: I1IiI1III11i + OOoOoO0o0o0OO
def O0Ooo000o ( action , condition = '' ) :
 iiIiii1 = sqlite3 . connect ( iiI )
 Oo0ooO00 = iiIiii1 . cursor ( )
 Oo0ooO00 . execute ( "Select anno,count(peli_id) from pelis %s group by anno order by anno desc" % condition )
 Ii1iI1i1iI1iI = Oo0ooO00 . fetchall ( )
 iiIiii1 . close ( )
 IiiiIiiIII = [ ]
 for Ii1I111 in Ii1iI1i1iI1iI :
  oOoO0oo000OO = Ii1I111 [ 0 ]
  o0 = Ii1I111 [ 1 ]
  Ii1 = '[COLOR gold]%s[/COLOR] (%s)' % ( oOoO0oo000OO , o0 )
  ooOoO0O0 = xbmcgui . ListItem ( label = Ii1 , iconImage = '' )
  ooIIII = '{0}?action={1}&anno={2}' . format ( o00I11Iii11i1Ii1 , action , oOoO0oo000OO )
  o0O = True
  IiiiIiiIII . append ( ( ooIIII , ooOoO0O0 , o0O ) )
 try :
  xbmcplugin . setContent ( iiII , "files" )
  xbmc . executebuiltin ( "Container.SetViewMode(502)" )
 except :
  pass
 xbmcplugin . addDirectoryItems ( iiII , IiiiIiiIII , len ( IiiiIiiIII ) )
 xbmcplugin . endOfDirectory ( iiII )
 if 79 - 79: o00oO0oo0O0O0
 if 43 - 43: Ii1I - i1iI1 . IIoooO0ooO0oo % iiIIi1i1Iii % OOoOoO0o0o0OO - OOoOoO0o0o0OO
def o0Ii1I11iIi1I1I ( ) :
 iiIiii1 = sqlite3 . connect ( iiI )
 Oo0ooO00 = iiIiii1 . cursor ( )
 if 30 - 30: I1 % iiIIi1i1Iii - i1iI1
 Oo0ooO00 . execute ( base64 . urlsafe_b64decode ( 'c2VsZWN0IHNhZ2FfbmFtZSBmcm9tKFNFTEVDVCBzdWJzdHIoc2FnYSwgcG9zKzEpIEFTIHNhZ2FfbmFtZSBGUk9NKFNFTEVDVCAqLGluc3RyKHNhZ2EsJyMnKSBBUyBwb3MgRlJPTSBwZWxpcyB3aGVyZSBzYWdhIGlzIG5vdCBudWxsKSBVTklPTiBTRUxFQ1Qgc3Vic3RyKHNhZ2EsIDEsIHBvcy0xKSBBUyBzYWdhX25hbWUgRlJPTShTRUxFQ1QgKixpbnN0cihzYWdhLCcjJykgQVMgcG9zIEZST00gcGVsaXMgd2hlcmUgc2FnYSBpcyBub3QgbnVsbCkpIHdoZXJlIHNhZ2FfbmFtZSA8PiAnJyBvcmRlciBieSBzYWdhX25hbWU=' ) )
 Ii1iI1i1iI1iI = Oo0ooO00 . fetchall ( )
 iiIiii1 . close ( )
 IiiiIiiIII = [ ]
 for Ii1I111 in Ii1iI1i1iI1iI :
  ii11I1Iiii = Ii1I111 [ 0 ]
  try :
   ii11I1Iiii = ii11I1Iiii . encode ( 'utf-8' , 'ignore' )
  except ( UnicodeEncodeError , UnicodeDecodeError ) :
   pass
  Ii1 = '[COLOR gold]%s[/COLOR]' % ii11I1Iiii
  ooOoO0O0 = xbmcgui . ListItem ( label = Ii1 , iconImage = '' )
  ooIIII = '{0}?action=saga_detail&saga={1}' . format ( o00I11Iii11i1Ii1 , base64 . urlsafe_b64encode ( ii11I1Iiii ) )
  o0O = True
  IiiiIiiIII . append ( ( ooIIII , ooOoO0O0 , o0O ) )
 try :
  xbmcplugin . setContent ( iiII , "files" )
  xbmc . executebuiltin ( "Container.SetViewMode(502)" )
 except :
  pass
 xbmcplugin . addDirectoryItems ( iiII , IiiiIiiIII , len ( IiiiIiiIII ) )
 xbmcplugin . endOfDirectory ( iiII )
 if 15 - 15: iIi11 . i1iI1 + Ii . OOoOoO0o0o0OO * IIII . IIoooO0ooO0oo
 if 38 - 38: Ii
def Oo00OO ( ) :
 Ii1iI1i1iI1iI = [ "Accion" , "Animacion" , "Aventuras" , "Belico" , "Ciencia ficcion" , "Cine negro" , "Comedia" , "Documental" , "Drama" , "Fantastico" , "Infantil" , "Intriga" , "Musical" , "Romance" , "Serie de TV" , "Terror" , "Thriller" , "Western" ]
 IiiiIiiIII = [ ]
 for Ii1I111 in Ii1iI1i1iI1iI :
  O0OOOoOO = Ii1I111
  try :
   O0OOOoOO = O0OOOoOO . encode ( 'utf-8' , 'ignore' )
  except ( UnicodeEncodeError , UnicodeDecodeError ) :
   pass
  Ii1 = '[COLOR gold]%s[/COLOR]' % O0OOOoOO
  ooOoO0O0 = xbmcgui . ListItem ( label = Ii1 , iconImage = '' )
  ooIIII = '{0}?action=genero_detail&genero={1}' . format ( o00I11Iii11i1Ii1 , base64 . urlsafe_b64encode ( O0OOOoOO ) )
  o0O = True
  IiiiIiiIII . append ( ( ooIIII , ooOoO0O0 , o0O ) )
 try :
  xbmcplugin . setContent ( iiII , "files" )
  xbmc . executebuiltin ( "Container.SetViewMode(502)" )
 except :
  pass
 xbmcplugin . addDirectoryItems ( iiII , IiiiIiiIII , len ( IiiiIiiIII ) )
 xbmcplugin . endOfDirectory ( iiII )
 if 79 - 79: OOoOoO0o0o0OO - oo % OOO
 if 63 - 63: I1
def ooiiI1iI1 ( saga , params ) :
 Ii1iI1i1iI1iI = OOO00 ( "pelis" , "saga" ,
 [ "peli_id" , "''" , "''" , "hd" , "''" , "''" , "link" , "quality" , "nombre" , "anno" , "sinopsis" ,
 "caratula" , "poster" , "strftime('%Y-%m-%d',updated), puntos"
 ] , [ "saga" ] , base64 . urlsafe_b64decode ( saga ) . decode ( 'utf-8' ) , [ 'nombre' ] )
 oOOoo0 ( Ii1iI1i1iI1iI , 'pelis' , info = params )
 if 32 - 32: I1
def Oo0oo0Oooo0Oo ( gen , params ) :
 Ii1iI1i1iI1iI = OOO00 ( "pelis" , "genero" ,
 [ "peli_id" , "''" , "''" , "hd" , "''" , "''" , "link" , "quality" , "nombre" , "anno" , "sinopsis" ,
 "caratula" , "poster" , "strftime('%Y-%m-%d',updated), puntos"
 ] , [ "genero" ] , base64 . urlsafe_b64decode ( gen ) . decode ( 'utf-8' ) , [ 'nombre' ] )
 oOOoo0 ( Ii1iI1i1iI1iI , 'pelis' , info = params )
 if 5 - 5: IiII1IiI % OOoOoO0o0o0OO
def Ooo00o0oo0o ( anno , order , params ) :
 Ii1iI1i1iI1iI = I1Ii1IiIIiI ( "pelis" ,
 [ "peli_id" , "''" , "''" , "hd" , "''" , "''" , "link" , "quality" , "nombre" , "anno" , "sinopsis" ,
 "caratula" , "poster" , "strftime('%Y-%m-%d',updated), puntos"
 ] , [ "anno" ] , [ anno ] , order , params )
 oOOoo0 ( Ii1iI1i1iI1iI , 'pelis' , info = params )
 if 74 - 74: Ii
def I11I ( category , order , params = { } ) :
 Ii1iI1i1iI1iI = I1Ii1IiIIiI ( "pelis" ,
 [ "peli_id" , "''" , "''" , "hd" , "''" , "''" , "link" , "quality" , "nombre" , "anno" , "sinopsis" ,
 "caratula" , "poster" , "strftime('%Y-%m-%d',updated), puntos"
 ] , [ "category" ] , category , order , params )
 oOOoo0 ( Ii1iI1i1iI1iI , 'pelis' , info = params )
 if 91 - 91: I1 . Ii1I + OOoOoO0o0o0OO % iIi11 / IiII1IiI + Ii1I
def OOO00 ( table , column_cond , values , id , id_value , order , params = '' ) :
 I1iIIIiIIi = sqlite3 . connect ( iiI )
 Oo0ooO00 = I1iIIIiIIi . cursor ( )
 Oo0ooO00 . execute ( "SELECT " + "," . join ( values ) + "," + "," . join ( id ) + " FROM " + table + " WHERE " + column_cond + " like '" + id_value + "' or " + column_cond + " like '" + id_value + "#%' or " + column_cond + " like '%#" + id_value + "' order by " + "," . join ( order ) + params )
 Ii1iI1i1iI1iI = Oo0ooO00 . fetchall ( )
 I1iIIIiIIi . close ( )
 return Ii1iI1i1iI1iI
 if 87 - 87: I1 % I1IiI1III11i . ooOooO0OOO
def I1Ii1IiIIiI ( table , values , ids , ids_value , order , params = '' ) :
 if params and 'sql_limit' in params :
  o0Oo0O0oO = params [ 'sql_limit' ]
 else :
  o0Oo0O0oO = ''
 if params and 'sql_cond' in params :
  I1I1I = params [ 'sql_cond' ] + ' and '
 else :
  I1I1I = ''
 I1iIIIiIIi = sqlite3 . connect ( iiI )
 Oo0ooO00 = I1iIIIiIIi . cursor ( )
 if len ( ids ) == len ( ids_value ) and len ( ids ) == 0 :
  if 5 - 5: OOO . IiII1IiI - Ii
  Oo0ooO00 . execute ( "SELECT " + "," . join ( values ) + " FROM " + table + " order by " + "," . join ( order ) + o0Oo0O0oO )
 else :
  if 33 - 33: IiII1i1I / OOoOoO0o0o0OO - ii1I1ii1IiIi1
  Oo0ooO00 . execute ( "SELECT " + "," . join ( values ) + "," + "," . join ( ids ) + " FROM " + table + " WHERE " + I1I1I + (
 " = ? and " . join ( ids ) + "=?" ) + " order by " + "," . join ( order ) + o0Oo0O0oO , ids_value )
 Ii1iI1i1iI1iI = Oo0ooO00 . fetchall ( )
 I1iIIIiIIi . close ( )
 return Ii1iI1i1iI1iI
 if 43 - 43: IIoooO0ooO0oo + OOO * I1IiI1III11i . I1
def I1IiiII ( lin , tit , id , type ) :
 ithil . IiiI1I1I1iIiI ( lin , tit , iiI , id , type )
 if 81 - 81: ii1I1ii1IiIi1 - iiIIi1i1Iii
 if 85 - 85: II - o00oO0oo0O0O0
def iIiii ( paramstring ) :
 i11iIIi = dict ( parse_qsl ( paramstring ) )
 if i11iIIi :
  if i11iIIi [ o0O0oO0 ] == o00 :
   IIIIoo ( '==' , 'general' , i11iIIi )
  elif i11iIIi [ o0O0oO0 ] == 'seriesInf' :
   IIIIoo ( '==' , 'infantil' , i11iIIi )
  elif i11iIIi [ o0O0oO0 ] == 'retro' :
   IIIIoo ( '==' , 'retro' , i11iIIi )
  elif i11iIIi [ o0O0oO0 ] == 'searchSerie' :
   I1II1IIiii ( o0O0o , 'series' )
  elif i11iIIi [ o0O0oO0 ] == 'searchPeli' :
   I1II1IIiii ( I1I1i , 'pelis' )
  elif i11iIIi [ o0O0oO0 ] == 'seriesByLang' :
   if 'lang' in i11iIIi :
    i1i1IIiIi ( i11iIIi [ 'lang' ] )
   else :
    i1i1IIiIi ( )
  elif i11iIIi [ o0O0oO0 ] == 'seriesByAZ' :
   if 'letra' in i11iIIi :
    OOOOOoO0oo0oo00 ( i11iIIi [ 'letra' ] , 'serie' )
   else :
    OOOOOoO0oo0oo00 ( type = 'serie' )
  elif i11iIIi [ o0O0oO0 ] == 'series_mas_vistas' :
   OooO0OOo0 ( "views" )
  elif i11iIIi [ o0O0oO0 ] == 'series_mas_vistas_mes' :
   OooO0OOo0 ( "last_month_views" )
  elif i11iIIi [ o0O0oO0 ] == 'pelis_mas_vistas' :
   iII1iIIiIi11I ( [ 'views desc' ] , { 'sql_limit' : ' limit 200' , 'anno' : 'true' , "puntos" : "true" } )
  elif i11iIIi [ o0O0oO0 ] == 'pelis_mas_vistas_mes' :
   iII1iIIiIi11I ( [ 'last_month_views desc' ] , { 'sql_limit' : ' limit 200' , 'anno' : 'true' , "puntos" : "true" } )
  elif i11iIIi [ o0O0oO0 ] == 'ultimas_series' :
   o0Oo0oo00 ( o0O0o , 'series' )
  elif i11iIIi [ o0O0oO0 ] == 'ultimas_pelis' :
   I11I ( [ 'Pelicula' ] , [ 'updated desc' , 'anno desc' ] , { 'sql_limit' : ' limit 200' , 'anno' : 'true' , 'date' : 'true' , 'puntos' : 'true' } )
  elif i11iIIi [ o0O0oO0 ] == 'serie' :
   IiII11i ( i11iIIi [ 'serie_id' ] )
  elif i11iIIi [ o0O0oO0 ] == 'addfav' :
   I11IIii1I ( i11iIIi )
  elif i11iIIi [ o0O0oO0 ] == 'rmfav' :
   iii1iIII1111I ( i11iIIi )
  elif i11iIIi [ o0O0oO0 ] == 'listfav' :
   O0O00O0O ( )
  elif i11iIIi [ o0O0oO0 ] == 'to_unwatch' :
   IiI ( i11iIIi [ 'idFile' ] , i11iIIi [ 'idPath' ] , i11iIIi [ 'fileName' ] , False )
  elif i11iIIi [ o0O0oO0 ] == 'to_watch' :
   IiI ( i11iIIi [ 'idFile' ] , i11iIIi [ 'idPath' ] , i11iIIi [ 'fileName' ] , True )
  elif i11iIIi [ o0O0oO0 ] == 'view_serie' :
   oOOo0O0 ( i11iIIi [ 'serie_id' ] )
  elif i11iIIi [ o0O0oO0 ] == 'view_temp' :
   oO00oOo ( i11iIIi [ 'serie_id' ] , i11iIIi [ 'temp_id' ] )
  elif i11iIIi [ o0O0oO0 ] == 'list_temp' :
   OOoOOoOO0OO0 ( i11iIIi [ 'serie_id' ] , i11iIIi [ 'temp_id' ] , i11iIIi [ 'caratula' ] , i11iIIi [ 'poster' ] )
  elif i11iIIi [ o0O0oO0 ] == 'play' :
   I1IiiII ( i11iIIi [ 'lin' ] , i11iIIi [ 'tit' ] , i11iIIi [ 'id' ] , i11iIIi [ 'type' ] )
  elif i11iIIi [ 'action' ] == 'anyo' :
   O0Ooo000o ( 'anyo_detail' )
  elif i11iIIi [ 'action' ] == 'anyo_detail' :
   Ooo00o0oo0o ( i11iIIi [ 'anno' ] , [ 'nombre asc' ] , { "puntos" : "true" } )
  elif i11iIIi [ 'action' ] == 'anyo_top' :
   O0Ooo000o ( 'anyo_top_detail' , ' where puntos > 0 ' )
  elif i11iIIi [ 'action' ] == 'anyo_top_detail' :
   Ooo00o0oo0o ( i11iIIi [ 'anno' ] , [ 'puntos desc' , 'nombre asc' ] , { 'sql_limit' : ' limit 200' , "sql_cond" : " puntos > 0 " , "puntos" : "true" } )
  elif i11iIIi [ 'action' ] == 'sagas' :
   o0Ii1I11iIi1I1I ( )
  elif i11iIIi [ 'action' ] == 'saga_detail' :
   ooiiI1iI1 ( i11iIIi [ 'saga' ] , { 'anno' : 'true' , "puntos" : "true" } )
  elif i11iIIi [ 'action' ] == 'list_generos' :
   Oo00OO ( )
  elif i11iIIi [ 'action' ] == 'genero_detail' :
   Oo0oo0Oooo0Oo ( i11iIIi [ 'genero' ] , { 'anno' : 'true' , 'date' : 'true' , "puntos" : "true" } )
  elif i11iIIi [ o0O0oO0 ] == 'peli_inf' :
   I11I ( [ 'Dibujos' ] , [ 'nombre' ] , { "puntos" : "true" } )
  elif i11iIIi [ o0O0oO0 ] == 'top_peli_inf' :
   I11I ( [ 'Dibujos' ] , [ 'puntos desc' , 'nombre asc' ] , { 'sql_limit' : ' limit 200' , "puntos" : "true" } )
  elif i11iIIi [ o0O0oO0 ] == 'pelisByAZ' :
   if 'letra' in i11iIIi :
    OOOOOoO0oo0oo00 ( i11iIIi [ 'letra' ] , 'peli' )
   else :
    OOOOOoO0oo0oo00 ( type = 'peli' )
  elif i11iIIi [ o0O0oO0 ] == 'last_peli_inf' :
   I11I ( [ 'Dibujos' ] , [ 'updated desc' , 'anno desc' ] , { 'sql_limit' : ' limit 200' , 'anno' : 'true' , 'date' : 'true' , "puntos" : "true" } )
  elif i11iIIi [ o0O0oO0 ] == 'series_menu' :
   IiIiI ( OOOo00ooo0Oo ( 'Series' ) )
  elif i11iIIi [ o0O0oO0 ] == 'pelis_menu' :
   IiIiI ( OOOo00ooo0Oo ( 'Pelis' ) )
  elif i11iIIi [ o0O0oO0 ] == 'dibujos_menu' :
   IiIiI ( OOOo00ooo0Oo ( 'Dibujos' ) )
 else :
  IiIiI ( i11 ( ) )
  if 48 - 48: oooOoO - oo / o00oO0oo0O0O0 % iIi11 % Ii
  if 76 - 76: IIII - oooOoO / oooOoO / IIII
  if 9 - 9: i1iI1
if __name__ == '__main__' :
 iIiii ( sys . argv [ 2 ] [ 1 : ] )
 if 87 - 87: I1 - Ii + o00oO0oo0O0O0 * II * OOO % i1iI1
 if 42 - 42: oOO * i1iI1 % o00oO0oo0O0O0 - oooOoO % oooOoO
 if 1 - 1: o00oO0oo0O0O0 / IIII - iIi11 . oooOoO
 if 59 - 59: OOO - I1 * Ii + o00oO0oo0O0O0
# 807cb1bfffb234dace3f930f571a9039d76f4cf9
')