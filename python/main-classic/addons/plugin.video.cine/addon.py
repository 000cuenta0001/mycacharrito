import base64;exec base64.b64decode('# -*- coding: utf-8 -*-
import sys , os , re , unicodedata
import xbmcgui
import xbmcplugin
import xbmcaddon
import urllib , urllib2
import urlparse
from urlparse import parse_qsl
import sqlite3 , base64 , zlib
from urllib2 import HTTPError
if 64 - 64: i11iIiiIii
def OO0o ( s ) :
 return '' . join ( ( c for c in unicodedata . normalize ( 'NFD' , s ) if unicodedata . category ( c ) != 'Mn' ) )
 if 81 - 81: Iii1I1 + OO0O0O % iiiii % ii1I - ooO0OO000o
def ii11i ( ) :
 import xbmc
 oOooOoO0Oo0O = xbmc . Keyboard ( "" )
 oOooOoO0Oo0O . doModal ( )
 iI1 = ''
 if ( oOooOoO0Oo0O . isConfirmed ( ) ) :
  iI1 = oOooOoO0Oo0O . getText ( )
 return iI1
 if 43 - 43: I11i11Ii
oO00oOo = xbmcaddon . Addon ( )
OOOo0 = xbmc . translatePath ( oO00oOo . getAddonInfo ( 'path' ) . decode ( 'utf-8' ) )
Oooo000o = xbmc . translatePath ( oO00oOo . getAddonInfo ( 'profile' ) . decode ( 'utf-8' ) )
IiIi11iIIi1Ii = os . path . join ( OOOo0 , "resources/media/" )
Oo0O = '%s/thebas.tmp' % Oooo000o
IiI = '%s/rkobas.tmp' % Oooo000o
if not os . path . exists ( Oooo000o ) :
 try :
  os . makedirs ( Oooo000o )
 except : pass
ooOo = urlparse . parse_qs ( sys . argv [ 2 ] [ 1 : ] )
Oo = sys . argv [ 0 ]
o0O = int ( sys . argv [ 1 ] )
IiiIII111iI = ''
IiII = base64 . b64decode ( 'aHR0cDovL3d3dy5hZGRvbmNpbmUuY2xvdWQv' )
if 28 - 28: Ii11111i * iiI1i1
def i1I1ii1II1iII ( ) :
 if 86 - 86: oO0o
 IIII = [ ]
 IIII . append ( { 'title' : 'Géneros' , 'action' : 'genero' , 'ico' : 'gen' } )
 IIII . append ( { 'title' : 'Temas' , 'action' : 'tema' , 'ico' : 'tem' } )
 IIII . append ( { 'title' : 'Años' , 'action' : 'anno' , 'ico' : 'ann' } )
 IIII . append ( { 'title' : 'Grupos' , 'action' : 'grupo' , 'ico' : 'gru' } )
 IIII . append ( { 'title' : 'Países' , 'action' : 'pais' , 'ico' : 'gru' } )
 IIII . append ( { 'title' : 'Buscar por título' , 'action' : 'bustit' , 'ico' : 'bus' } )
 IIII . append ( { 'title' : 'Buscar por director' , 'action' : 'busdir' , 'ico' : 'bus' } )
 IIII . append ( { 'title' : 'Buscar por actor' , 'action' : 'busact' , 'ico' : 'bus' } )
 IIII . append ( { 'title' : 'Buscar por grupo' , 'action' : 'busgru' , 'ico' : 'bus' } )
 IIII . append ( { 'title' : 'Top' , 'action' : 'peltop' , 'ico' : 'bus' } )
 IIII . append ( { 'title' : 'Últimas 2018-2019' , 'action' : 'ultim' , 'ico' : 'bus' } )
 IIII . append ( { 'title' : 'Últimas hasta 2017' , 'action' : 'ultim2' , 'ico' : 'bus' } )
 IIII . append ( { 'title' : 'Últimas 100 HD' , 'action' : 'ulthd' , 'ico' : 'bus' } )
 IIII . append ( { 'title' : 'Las 100 más vistas' , 'action' : 'mvtas' , 'ico' : 'bus' } )
 IIII . append ( { 'title' : 'Ver peli recomendada' , 'action' : 'pelrec' , 'ico' : 'bus' } )
 return IIII
 if 59 - 59: II1i * o00ooo0 / o00 * Oo0oO0ooo
def o0oOoO00o ( url , post = None , txheaders = None ) :
 if txheaders == None :
  txheaders = { 'User-Agent' : 'Mozilla/5.0 (Windows; U; Windows NT 5.1; en-GB; rv:1.8.1.14) Gecko/20080404 Firefox/2.0.0.14' }
 i1 = urllib2 . urlopen
 oOOoo00O0O = urllib2 . Request
 i1111 = oOOoo00O0O ( url , post , txheaders )
 i11 = i1 ( i1111 )
 I11 = i11 . read ( )
 return I11
 if 98 - 98: I1111 * o0o0Oo0oooo0 / I1I1i1 * oO0 / IIIi1i1I
OOoOoo00oo = [
 [ '%s.0' % iiI11 for iiI11 in xrange ( 18 , 50 ) ] ,
 [ '37.0.2062.103' , '37.0.2062.120' , '37.0.2062.124' , '38.0.2125.101' , '38.0.2125.104' , '38.0.2125.111' , '39.0.2171.71' , '39.0.2171.95' , '39.0.2171.99' , '40.0.2214.93' , '40.0.2214.111' ,
 '40.0.2214.115' , '42.0.2311.90' , '42.0.2311.135' , '42.0.2311.152' , '43.0.2357.81' , '43.0.2357.124' , '44.0.2403.155' , '44.0.2403.157' , '45.0.2454.101' , '45.0.2454.85' , '46.0.2490.71' ,
 '46.0.2490.80' , '46.0.2490.86' , '47.0.2526.73' , '47.0.2526.80' , '48.0.2564.116' , '49.0.2623.112' , '50.0.2661.86' ] ,
 [ '11.0' ] ,
 [ '8.0' , '9.0' , '10.0' , '10.6' ] ]
OOooO = [ 'Windows NT 10.0' , 'Windows NT 7.0' , 'Windows NT 6.3' , 'Windows NT 6.2' , 'Windows NT 6.1' , 'Windows NT 6.0' , 'Windows NT 5.1' , 'Windows NT 5.0' ]
OOoO00o = [ '; WOW64' , '; Win64; IA64' , '; Win64; x64' , '' ]
II111iiii = [ 'Mozilla/5.0 ({win_ver}{feature}; rv:{br_ver}) Gecko/20100101 Firefox/{br_ver}' ,
 'Mozilla/5.0 ({win_ver}{feature}) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/{br_ver} Safari/537.36' ,
 'Mozilla/5.0 ({win_ver}{feature}; Trident/7.0; rv:{br_ver}) like Gecko' ,
 'Mozilla/5.0 (compatible; MSIE {br_ver}; {win_ver}{feature}; Trident/6.0)' ]
if 48 - 48: I1Ii . i11iIiiIii - o0o0Oo0oooo0 % iiI1i1 . I1Ii / II1i
def iI111I11I1I1 ( ) :
 import random
 OOooO0OOoo = random . randrange ( len ( II111iiii ) )
 iIii1 = { 'win_ver' : random . choice ( OOooO ) , 'feature' : random . choice ( OOoO00o ) , 'br_ver' : random . choice ( OOoOoo00oo [ OOooO0OOoo ] ) }
 oOOoO0 = II111iiii [ OOooO0OOoo ] . format ( ** iIii1 )
 return oOOoO0
 if 59 - 59: o0o0Oo0oooo0 * i11iIiiIii + o0o0Oo0oooo0 + I1Ii * iiI1i1
def OooOoO0Oo ( headers ) :
 return '|%s' % '&' . join ( [ '%s=%s' % ( iiIIiIiIi , urllib . quote_plus ( headers [ iiIIiIiIi ] ) ) for iiIIiIiIi in headers ] )
 if 38 - 38: o0o0Oo0oooo0 / Ii11111i
 if 76 - 76: Iii1I1 / II1i . I11i11Ii * o0o0Oo0oooo0 - Oo0oO0ooo
def Oooo ( string ) :
 iiIIiIiIi = 'sYti87g4Ut0_z'
 string = base64 . urlsafe_b64decode ( string )
 O00o = [ ]
 for iiI11 in xrange ( len ( string ) ) :
  O00 = iiIIiIiIi [ iiI11 % len ( iiIIiIiIi ) ]
  i11I1 = chr ( ord ( string [ iiI11 ] ) - ord ( O00 ) % 256 )
  O00o . append ( i11I1 )
 Ii11Ii11I = "" . join ( O00o )
 return Ii11Ii11I
 if 43 - 43: I11i11Ii - I1I1i1 * OO0O0O
def O0O00o0OOO0 ( user , cole , peli ) :
 return Ii1iIIIi1ii ( 'diskokosmiko.mx' , user , cole , peli )
 if 80 - 80: I1111 * i11iIiiIii / IIIi1i1I
 if 9 - 9: o0o0Oo0oooo0 + o00 % o0o0Oo0oooo0 + ii1I . Oo0oO0ooo
 if 31 - 31: II1i + I1111 + I1111 / ooO0OO000o
 iiI1 = 'http://diskokosmiko.mx'
 i11Iiii = peli
 iI = '%s/-%s/p,%s,list,1,3.avi' % ( user , cole , peli )
 I1i1I1II = '%s/%s/' % ( iiI1 , user )
 i1IiIiiI = { 'User-agent' : 'Mozilla/5.0 (Windows NT 6.1; WOW64; rv:19.0) Gecko/20100101 Firefox/19.0' }
 I1I = '%s/%s' % ( iiI1 , iI )
 i1IiIiiI [ 'referer' ] = I1i1I1II
 i1IiIiiI [ 'connection' ] = 'keep-alive'
 i1111 = urllib2 . Request ( I1I , None , i1IiIiiI )
 i11 = urllib2 . urlopen ( i1111 )
 I11 = i11 . read ( )
 i11 . close ( )
 oOO00oOO = re . findall ( 'DownloadFile.*f=%s".*RequestVerificationToken.*?value="([^"]+)' % peli , I11 )
 OoOo = 0
 try :
  oOO00oOO = oOO00oOO [ 0 ]
 except :
  OoOo = 1
 if OoOo == 0 :
  iIo00O = '%s/action/DownloadFile?location=fi&amp;f=%s' % ( iiI1 , i11Iiii )
  OOO0OOO00oo = 'fileId=%s&__RequestVerificationToken=%s' % ( i11Iiii , oOO00oOO )
  i1IiIiiI [ 'referer' ] = I1I
  i1IiIiiI [ 'connection' ] = 'keep-alive'
  i1111 = urllib2 . Request ( iIo00O , OOO0OOO00oo , i1IiIiiI )
  try :
   i11 = urllib2 . urlopen ( i1111 )
   I11 = i11 . read ( )
   i11 . close ( )
   Iii111II = re . findall ( 'DownloadUrl":"([^"]+)' , I11 )
   iiii11I = Iii111II [ 0 ]
  except :
   iiii11I = 'tmp'
 else :
  iiii11I = ''
 return iiii11I . strip ( )
 if 96 - 96: ooO0OO000o % o0o0Oo0oooo0 . Oo0oO0ooo + iiiii * o00 - oO0o
def Ii1iIIIi1ii ( server , user , cole , peli ) :
 i11i1 = 'http://%s/%s/z-%s/z,%s,list,1,2.bin' % ( server , user , cole , peli )
 OOO0OOO00oo = None
 IIIii1II1II = { 'User-Agent' : 'Mozilla/5.0 (Windows NT 6.1; WOW64; rv:50.0) Gecko/20100101 Firefox/50.0' }
 IIIii1II1II [ 'Connection' ] = 'keep-alive'
 i1 = urllib2 . urlopen
 oOOoo00O0O = urllib2 . Request
 i1111 = oOOoo00O0O ( i11i1 , OOO0OOO00oo , IIIii1II1II )
 i11 = i1 ( i1111 )
 i1I1iI = i11 . info ( ) [ 'Set-Cookie' ]
 I11 = i11 . read ( )
 oo0OooOOo0 = re . search ( 'action="(\/action\/DownloadFile\?location=fi&amp;f=.*?)".*?__RequestVerificationToken.*?value="(.*?)"' , I11 )
 o0OO00oO = 'http://%s%s' % ( server , oo0OooOOo0 . group ( 1 ) . replace ( '&amp;' , '&' ) )
 oOO00oOO = oo0OooOOo0 . group ( 2 )
 IIIii1II1II = { 'User-Agent' : 'Mozilla/5.0 (Windows NT 6.1; WOW64; rv:50.0) Gecko/20100101 Firefox/50.0' }
 IIIii1II1II [ 'Referer' ] = i11i1
 IIIii1II1II [ 'Cookie' ] = i1I1iI
 IIIii1II1II [ 'Connection' ] = 'keep-alive'
 OOO0OOO00oo = 'fileId=%s&__RequestVerificationToken=%s' % ( peli , oOO00oOO )
 i1 = urllib2 . urlopen
 oOOoo00O0O = urllib2 . Request
 i1111 = oOOoo00O0O ( o0OO00oO , OOO0OOO00oo , IIIii1II1II )
 i11 = i1 ( i1111 )
 I11 = i11 . read ( )
 import time
 I11i1I1I = str ( int ( time . time ( ) ) ) + '404'
 I1I = 'http://%s/action/OAuth/Facebook?TimeStamp=%s' % ( server , I11i1I1I )
 IIIii1II1II = { 'User-Agent' : 'Mozilla/5.0 (Windows NT 6.1; WOW64; rv:50.0) Gecko/20100101 Firefox/50.0' }
 IIIii1II1II [ 'Referer' ] = i11i1
 IIIii1II1II [ 'Cookie' ] = i1I1iI
 IIIii1II1II [ 'Connection' ] = 'keep-alive'
 OOO0OOO00oo = None
 i1 = urllib2 . urlopen
 oOOoo00O0O = urllib2 . Request
 i1111 = oOOoo00O0O ( I1I , OOO0OOO00oo , IIIii1II1II )
 i11 = i1 ( i1111 )
 oO0Oo = i11 . info ( ) [ 'Set-Cookie' ]
 I11 = i11 . read ( )
 oOOoo0Oo = i1I1iI . split ( ';' )
 o00OO00OoO = oO0Oo . split ( ';' )
 for OOOO0OOoO0O0 in o00OO00OoO :
  if OOOO0OOoO0O0 not in oOOoo0Oo :
   oOOoo0Oo . append ( OOOO0OOoO0O0 )
 o00OO00OoO = [ ]
 for OOOO0OOoO0O0 in oOOoo0Oo :
  if 'path=/' not in OOOO0OOoO0O0 and 'HttpOnly' not in OOOO0OOoO0O0 :
   o00OO00OoO . append ( OOOO0OOoO0O0 )
 i1I1iI = '; ' . join ( o00OO00OoO ) . replace ( '  ' , ' ' )
 iIo00O = 'http://%s/action/Account/Login' % server
 IIIii1II1II = { 'User-Agent' : 'Mozilla/5.0 (Windows NT 6.1; WOW64; rv:50.0) Gecko/20100101 Firefox/50.0' }
 IIIii1II1II [ 'Accept' ] = '*/*'
 IIIii1II1II [ 'Accept-Language' ] = 'es-ES,es;q=0.8,en-US;q=0.5,en;q=0.3'
 IIIii1II1II [ 'Accept-Encoding' ] = 'gzip, deflate'
 IIIii1II1II [ 'Content-Type' ] = 'application/x-www-form-urlencoded; charset=UTF-8'
 IIIii1II1II [ 'X-Requested-With' ] = 'XMLHttpRequest'
 IIIii1II1II [ 'Referer' ] = i11i1
 IIIii1II1II [ 'Cookie' ] = i1I1iI
 IIIii1II1II [ 'Connection' ] = 'keep-alive'
 O0Oo000ooO00 = o0oOoO00o ( '%s/bas/doclv.php' % IiII )
 O0Oo000ooO00 = O0Oo000ooO00 . split ( '-' )
 if 75 - 75: o00 . iiI1i1 * Oo0oO0ooo
 OOO0OOO00oo = '__RequestVerificationToken=%s&UserName=%s&Password=%s' % ( oOO00oOO , O0Oo000ooO00 [ 0 ] , O0Oo000ooO00 [ 1 ] )
 i1 = urllib2 . urlopen
 oOOoo00O0O = urllib2 . Request
 i1111 = oOOoo00O0O ( iIo00O , OOO0OOO00oo , IIIii1II1II )
 i11 = i1 ( i1111 )
 oO0Oo = i11 . info ( ) [ 'Set-Cookie' ]
 I11 = i11 . read ( )
 oOOoo0Oo = i1I1iI . split ( ';' )
 o00OO00OoO = oO0Oo . split ( ';' )
 for OOOO0OOoO0O0 in o00OO00OoO :
  if OOOO0OOoO0O0 not in oOOoo0Oo :
   oOOoo0Oo . append ( OOOO0OOoO0O0 )
 o00OO00OoO = [ ]
 for OOOO0OOoO0O0 in oOOoo0Oo :
  if 'path=/' not in OOOO0OOoO0O0 and 'HttpOnly' not in OOOO0OOoO0O0 :
   o00OO00OoO . append ( OOOO0OOoO0O0 )
 i1I1iI = '; ' . join ( o00OO00OoO ) . replace ( '  ' , ' ' )
 oO0Oo = ''
 IIIii1II1II = { 'User-Agent' : 'Mozilla/5.0 (Windows NT 6.1; WOW64; rv:50.0) Gecko/20100101 Firefox/50.0' }
 IIIii1II1II [ 'Referer' ] = i11i1
 IIIii1II1II [ 'Cookie' ] = i1I1iI
 IIIii1II1II [ 'Connection' ] = 'keep-alive'
 OOO0OOO00oo = 'fileId=%s&__RequestVerificationToken=%s' % ( peli , oOO00oOO )
 i1 = urllib2 . urlopen
 oOOoo00O0O = urllib2 . Request
 i1111 = oOOoo00O0O ( o0OO00oO , OOO0OOO00oo , IIIii1II1II )
 i11 = i1 ( i1111 )
 I11 = i11 . read ( )
 oo0OooOOo0 = re . search ( 'DownloadUrl":"(.*?)"' , I11 )
 return oo0OooOOo0 . group ( 1 )
 if 91 - 91: o0o0Oo0oooo0
def iII ( bas ) :
 o0 = o0oOoO00o ( '%sbas/base.enl' % IiII )
 o0 = o0 . split ( '.' )
 ooOooo000oOO = 0
 if len ( o0 ) >= 8 :
  if o0 [ 6 ] == 'gd2' :
   o0 = o0 [ 7 ] . split ( '-' )
   from datetime import datetime
   o0 = 'https://goo.gl/%s' % o0 [ datetime . now ( ) . second % len ( o0 ) ]
   try :
    I11 = o0oOoO00o ( o0 )
    Oo0oOOo = zlib . decompress ( I11 )
    ooOooo000oOO = 1
   except : pass
 if ( len ( o0 ) >= 6 ) and ( ooOooo000oOO == 0 ) :
  if o0 [ 4 ] == 'gd' :
   o0 = 'https://goo.gl/%s' % o0 [ 5 ]
   try :
    I11 = o0oOoO00o ( o0 )
    Oo0oOOo = zlib . decompress ( I11 )
    ooOooo000oOO = 1
   except : pass
  elif o0 [ 4 ] == 'gh' :
   Oo0OoO00oOO0o = o0 [ 5 ]
   if 80 - 80: o00 + Oo0oO0ooo - Oo0oO0ooo % I1I1i1
   if 63 - 63: I11i11Ii - o00ooo0 + Iii1I1 % I1111 / OO0O0O / II1i
   if 98 - 98: I1I1i1 * I1I1i1 / I1I1i1 + I1111
   if 34 - 34: I1Ii
   if 15 - 15: I1111 * I1Ii * Ii11111i % i11iIiiIii % oO0o - Oo0oO0ooo
   if 68 - 68: IIIi1i1I % ii1I . oO0 . o00ooo0
   o0 = 'https://raw.githubusercontent.com/%s/base.cmp' % Oo0OoO00oOO0o
   try :
    I11 = o0oOoO00o ( o0 )
    ooOooo000oOO = 1
   except : pass
 if ooOooo000oOO == 0 :
  if o0 [ 0 ] == 'dk' :
   o0 = O0O00o0OOO0 ( o0 [ 1 ] , o0 [ 2 ] , o0 [ 3 ] )
  I11 = o0oOoO00o ( o0 )
 I11 = zlib . decompress ( I11 )
 o0oo0oOo = open ( bas , 'wb' )
 o0oo0oOo . write ( I11 )
 o0oo0oOo . close ( )
 o000O0o = sqlite3 . connect ( bas )
 iI1iII1 = o000O0o . cursor ( )
 iI1iII1 . execute ( "Select version from version" )
 oO0OOoo0OO = iI1iII1 . fetchone ( )
 oO0OOoo0OO = oO0OOoo0OO [ 0 ]
 iI1iII1 . execute ( "select faffid from pelis where faffid>0 group by faffid;" )
 O0 = iI1iII1 . fetchall ( )
 ii1ii1ii = len ( O0 )
 iI1iII1 . execute ( "select faffid from pelis where faffid<0;" )
 O0 = iI1iII1 . fetchall ( )
 ii1ii1ii += len ( O0 )
 o000O0o . close ( )
 oooooOoo0ooo = 'Vers. %s (%s películas distintas)' % ( oO0OOoo0OO , ii1ii1ii )
 xbmcgui . Dialog ( ) . notification ( 'Cine' , oooooOoo0ooo , xbmcgui . NOTIFICATION_INFO , 5000 )
 try :
  oooooOoo0ooo = o0oOoO00o ( '%s/bas/domsg.php' % IiII )
  if oooooOoo0ooo != '' :
   xbmcgui . Dialog ( ) . ok ( 'Addon Cine' , oooooOoo0ooo )
 except : pass
 from uuid import getnode as get_mac
 I1I1IiI1 = get_mac ( )
 import hashlib
 III1iII1I1ii = hashlib . md5 ( )
 III1iII1I1ii . update ( str ( I1I1IiI1 ) )
 III1iII1I1ii = III1iII1I1ii . hexdigest ( )
 try :
  Oo0oOOo = o0oOoO00o ( 'http://dstats.net/fwd/u5l2ja' )
 except : pass
 if 61 - 61: ooO0OO000o
 if 64 - 64: I1Ii / oO0o - Iii1I1 - I1111
 if 86 - 86: I1111 % oO0o / I11i11Ii / oO0o
 if 42 - 42: iiI1i1
 if 67 - 67: IIIi1i1I . I1I1i1 . Iii1I1
 if 10 - 10: o00ooo0 % o00ooo0 - OO0O0O / Oo0oO0ooo + o0o0Oo0oooo0
 if 87 - 87: o00 * o00ooo0 + Oo0oO0ooo / OO0O0O / I1I1i1
 if 37 - 37: I1I1i1 - I1Ii * o00 % i11iIiiIii - IIIi1i1I
 if 83 - 83: I1111 / I11i11Ii
def iIIiIi1iIII1 ( bas ) :
 import xbmc
 Ooo = ''
 if os . path . isfile ( bas ) :
  try :
   o000O0o = sqlite3 . connect ( bas )
   iI1iII1 = o000O0o . cursor ( )
   iI1iII1 . execute ( "Select vrsp from version" )
   OOOOo = iI1iII1 . fetchone ( )
   o000O0o . close ( )
   Ooo = OOOOo [ 0 ]
  except : pass
  if 76 - 76: iiI1i1
  oO0OOoo0OO = ''
  try :
   oO0OOoo0OO = o0oOoO00o ( '%sbas/base.max' % IiII )
  except : pass
  if 29 - 29: Oo0oO0ooo + Ii11111i . i11iIiiIii - ii1I / OO0O0O
  if oO0OOoo0OO != '' :
   try :
    o000O0o = sqlite3 . connect ( bas )
    iI1iII1 = o000O0o . cursor ( )
    iI1iII1 . execute ( "Select version from version" )
    OOOOo = iI1iII1 . fetchone ( )
    o000O0o . close ( )
    OOOOo = str ( OOOOo [ 0 ] )
    if OOOOo != oO0OOoo0OO :
     iII ( bas )
   except :
    iII ( bas )
 else :
  iII ( bas )
  if 26 - 26: I1111 . iiiii
 o000O0o = sqlite3 . connect ( bas )
 iI1iII1 = o000O0o . cursor ( )
 iI1iII1 . execute ( "Select vrsp,pdata from version" )
 OOOOo = iI1iII1 . fetchone ( )
 o000O0o . close ( )
 if Ooo != OOOOo [ 0 ] :
  if 39 - 39: I1I1i1 - Iii1I1 % i11iIiiIii * IIIi1i1I . oO0
  import xbmc , xbmcaddon
  OOooo0O00o = xbmcaddon . Addon ( )
  oOOoOooOo = xbmc . translatePath ( OOooo0O00o . getAddonInfo ( 'path' ) . decode ( 'utf-8' ) )
  O000oo = OOOOo [ 1 ] . split ( '\n' )
  I11 = base64 . b64decode ( O000oo [ 0 ] )
  I11 = zlib . decompress ( I11 )
  if not os . path . isfile ( '%s/noactualizar.txt' % oOOoOooOo ) :
   o0oo0oOo = open ( '%s/addon.py' % ( oOOoOooOo ) , 'wb' )
   o0oo0oOo . write ( I11 )
   o0oo0oOo . close ( )
   I11 = base64 . b64decode ( O000oo [ 1 ] )
   I11 = zlib . decompress ( I11 )
   o0oo0oOo = open ( '%s/addon.xml' % ( oOOoOooOo ) , 'wb' )
   o0oo0oOo . write ( I11 )
   o0oo0oOo . close ( )
   if 20 - 20: Oo0oO0ooo % o0o0Oo0oooo0 / o0o0Oo0oooo0 + o0o0Oo0oooo0
def III1IiiI ( server , user , cole , peli , last ) :
 last = base64 . b64decode ( last )
 user = Oooo ( user )
 peli = Oooo ( peli )
 if server == 'sc' :
  iIi1 = peli . split ( ' ' )
  IIIII11I1IiI = base64 . b64decode ( 'aHR0cDovL3N0cmVhbWNsb3VkLmV1Lw==' ) + iIi1 [ 0 ]
 elif server == 'dk' :
  server = base64 . b64decode ( 'aHR0cDovL2Rpc2tva29zbWlrby5teA==' )
  IIIII11I1IiI = '%s/%s/z-%s/z,%s,list,1,2.bin' % ( server , user , cole , peli )
 i1I = base64 . b64decode ( 'c291cmNl' )
 OoOO = base64 . b64decode ( 'aHR0cDovL2FkZG9uLmNpbmUva29kaQ==' )
 ooOOO0 = base64 . b64decode ( 'dXJscw==' )
 o0o = base64 . b64decode ( 'c3VibWl0' )
 O0OOoO00OO0o = base64 . b64decode ( 'bG9xdWVz' )
 I1111IIIIIi = base64 . b64decode ( 'aHR0cDovLzEyNy4wLjAuMTo5NjY2L2ZsYXNoL2FkZA==' )
 Iiii1i1 = { i1I : OoOO , ooOOO0 : IIIII11I1IiI , o0o : O0OOoO00OO0o }
 if 84 - 84: I11i11Ii . OO0O0O % iiiii + o0o0Oo0oooo0 % iiiii % iiI1i1
 IIi1 = urllib2 . HTTPHandler ( )
 I1I1I = urllib2 . build_opener ( IIi1 )
 I11 = urllib . urlencode ( Iiii1i1 )
 OoOO000 = urllib2 . Request ( I1111IIIIIi , data = I11 )
 i1Ii11i1i = I1I1I . open ( OoOO000 )
 oooooOoo0ooo = 'Link copiado a JDownloader'
 xbmcgui . Dialog ( ) . notification ( 'Cine' , oooooOoo0ooo , xbmcgui . NOTIFICATION_INFO , 5000 )
 xbmcplugin . endOfDirectory ( o0O )
 if 91 - 91: iiI1i1
def oOooOo0 ( s ) :
 return base64 . urlsafe_b64encode ( s )
 if 38 - 38: IIIi1i1I
def Ooo00o0Oooo ( ) :
 OOooooO0Oo = ''
 if 91 - 91: II1i . OO0O0O / o00 + ii1I
 I1i = base64 . b64decode ( 'IzAzIzQzIzI1IzE3' )
 if 53 - 53: o00ooo0 * oO0o + I1Ii - ooO0OO000o
 if 2 - 2: I1111 + o0o0Oo0oooo0 - I11i11Ii % II1i . I1I1i1
 I1i1I1II = base64 . b64decode ( 'aHR0cDovL3d3dy5jdWFsZXNtaWlwLmNvbS8=' )
 i1111 = o0oOoO00o ( I1i1I1II , None )
 I1I1i1I = re . search ( '<b>Tu IP real es (.*?)<b' , i1111 )
 if I1I1i1I :
  I1I1i1I = I1I1i1I . group ( 1 )
  if 30 - 30: iiiii
  I1i1I1II = base64 . b64decode ( 'aHR0cHM6Ly9nZW9pcHRvb2wuY29tL2VzLz9pcD0=' ) + I1I1i1I
  i1111 = o0oOoO00o ( I1i1I1II , None )
  if 5 - 5: I1Ii - ooO0OO000o - iiiii % o0o0Oo0oooo0 + I11i11Ii * OO0O0O
  I1I1II1I11 = re . search ( base64 . b64decode ( 'UG9zdGFsOltcc1xTXSo/PHNwYW4+KC4qPyk8' ) , i1111 )
  if I1I1II1I11 :
   I1I1II1I11 = I1I1II1I11 . group ( 1 )
   OOooooO0Oo = '#' + I1I1II1I11 [ : 2 ]
 OOooooO0Oo = OOooooO0Oo in I1i
 return OOooooO0Oo
 if 8 - 8: II1i % Iii1I1 / I11i11Ii - o00
def Ii1I1i ( encoded , code ) :
 OO = ""
 I1iI1ii1II = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/='
 I1iI1ii1II = I1iI1ii1II [ : : - 1 ]
 O0O0OOOOoo = 0
 for OOooO0OOoo in range ( 0 , len ( encoded ) - 1 ) :
  while O0O0OOOOoo <= len ( encoded ) - 1 :
   oOooO0 = I1iI1ii1II . index ( encoded [ O0O0OOOOoo ] )
   Ii1I1Ii = I1iI1ii1II . index ( encoded [ O0O0OOOOoo + 1 ] )
   OOoO0 = I1iI1ii1II . index ( encoded [ O0O0OOOOoo + 2 ] )
   OO0Oooo0oOO0O = I1iI1ii1II . index ( encoded [ O0O0OOOOoo + 3 ] )
   O0O0OOOOoo += 4
   o00O0 = ( ( oOooO0 << 2 ) | ( Ii1I1Ii >> 4 ) )
   oOO0O00Oo0O0o = ( ( ( Ii1I1Ii & 15 ) << 4 ) | ( OOoO0 >> 2 ) )
   ii1 = ( ( OOoO0 & 3 ) << 6 ) | OO0Oooo0oOO0O
   o00O0 = o00O0 ^ code
   OO = str ( OO ) + chr ( o00O0 )
   if OOoO0 != 64 :
    OO = str ( OO ) + chr ( oOO0O00Oo0O0o )
   if OOoO0 != 64 :
    OO = str ( OO ) + chr ( ii1 )
 return OO
 if 35 - 35: I1I1i1 * o00 / OO0O0O - II1i / iiiii - IIIi1i1I
def II1I1iiIII ( server , user , cole , pel , pid , tit ) :
 o0O = int ( sys . argv [ 1 ] )
 if 77 - 77: oO0o - ooO0OO000o - I1Ii
 iIIiIi1iIII1 ( Oo0O )
 if 49 - 49: ooO0OO000o % Iii1I1 . oO0o + o00 / I11i11Ii
 O0oOOoOooooO = server . split ( '_' )
 server = O0oOOoOooooO [ 0 ]
 if len ( O0oOOoOooooO ) > 1 :
  o000O0o = sqlite3 . connect ( Oo0O )
  iI1iII1 = o000O0o . cursor ( )
  iI1iII1 . execute ( 'CREATE TABLE IF NOT EXISTS "reco" (`id` INTEGER NOT NULL, `idpel` INTEGER NOT NULL, PRIMARY KEY(`id`));' )
  o000O0o . commit ( )
  oooOo0OOOoo0 = O0oOOoOooooO [ 1 ] . split ( '.' )
  for OOoO in oooOo0OOOoo0 :
   iI1iII1 . execute ( 'INSERT INTO reco(idpel) VALUES (?);' , ( OOoO , ) )
  o000O0o . commit ( )
  o000O0o . close ( )
 tit = base64 . urlsafe_b64decode ( tit )
 user = Oooo ( user )
 pel = Oooo ( pel )
 cole = Oooo ( cole )
 if 89 - 89: II1i + iiI1i1 * I1111 * o0o0Oo0oooo0
 if 37 - 37: iiiii - Iii1I1 - II1i
 if 77 - 77: Oo0oO0ooo * OO0O0O
 if 98 - 98: I11i11Ii % o0o0Oo0oooo0 * iiiii
 if 51 - 51: OO0O0O . oO0o / o00 + II1i
 if 33 - 33: I1Ii . ooO0OO000o % I1I1i1 + II1i
 if 71 - 71: Ii11111i % Oo0oO0ooo
 if 98 - 98: I1111 % i11iIiiIii % I1Ii + o0o0Oo0oooo0
 if 78 - 78: o00ooo0 % o00 / I1I1i1 - OO0O0O
 if 69 - 69: IIIi1i1I
 if 11 - 11: I11i11Ii
 try :
  I1i1I1II = '%sbas/doseek.php?id=%s' % ( IiII , pid )
  Oo0oOOo = o0oOoO00o ( I1i1I1II )
 except : pass
 if 16 - 16: o0o0Oo0oooo0 + oO0 * Iii1I1 % ii1I . I11i11Ii
 if server == 'kb' :
  iiii11I = Ii1iIIIi1ii ( 'k-bagi.com' , user , cole , pel )
  Oo0OO = xbmcgui . ListItem ( path = iiii11I . strip ( ) )
  O0OooOo0o ( Oo0OO , tit , pid )
  xbmcplugin . setResolvedUrl ( o0O , True , Oo0OO )
 elif server == 'dk' :
  iiii11I = O0O00o0OOO0 ( user , cole , pel )
  if iiii11I == '' :
   try :
    I1i1I1II = '%sbas/donoexist.php?id=%s' % ( IiII , pid )
    Oo0oOOo = o0oOoO00o ( I1i1I1II )
   except : pass
   oooooOoo0ooo = 'La película ya no existe'
   Oo0OO = xbmcgui . ListItem ( oooooOoo0ooo , iconImage = "DefaultVideo.png" )
   xbmcplugin . setResolvedUrl ( o0O , False , Oo0OO )
   iiI11ii1I1 = xbmcgui . Dialog ( )
   iiI11ii1I1 . notification ( 'Cine' , oooooOoo0ooo , xbmcgui . NOTIFICATION_INFO , 5000 )
  if iiii11I == 'tmp' :
   oooooOoo0ooo = 'Servidor temporalmente caído'
   Oo0OO = xbmcgui . ListItem ( oooooOoo0ooo , iconImage = "DefaultVideo.png" )
   xbmcplugin . setResolvedUrl ( o0O , False , Oo0OO )
   iiI11ii1I1 = xbmcgui . Dialog ( )
   iiI11ii1I1 . notification ( 'Cine' , oooooOoo0ooo , xbmcgui . NOTIFICATION_INFO , 5000 )
  else :
   Oo0OO = xbmcgui . ListItem ( path = iiii11I . strip ( ) )
   O0OooOo0o ( Oo0OO , tit , pid )
   xbmcplugin . setResolvedUrl ( o0O , True , Oo0OO )
 elif server == 'vz' :
  I1i1I1II = 'https://vidoza.net/embed-%s.html' % pel
  try :
   I11 = o0oOoO00o ( I1i1I1II )
   if ( "File was deleted" in I11 ) :
    oooooOoo0ooo = 'La película ya no existe'
    Oo0OO = xbmcgui . ListItem ( oooooOoo0ooo , iconImage = "DefaultVideo.png" )
    xbmcplugin . setResolvedUrl ( o0O , False , Oo0OO )
    iiI11ii1I1 = xbmcgui . Dialog ( )
    iiI11ii1I1 . notification ( 'Cine' , oooooOoo0ooo , xbmcgui . NOTIFICATION_INFO , 5000 )
   if ( "Video is processing now" in I11 ) :
    oooooOoo0ooo = 'Película en preparación'
    Oo0OO = xbmcgui . ListItem ( oooooOoo0ooo , iconImage = "DefaultVideo.png" )
    xbmcplugin . setResolvedUrl ( o0O , False , Oo0OO )
    iiI11ii1I1 = xbmcgui . Dialog ( )
    iiI11ii1I1 . notification ( 'Cine' , oooooOoo0ooo , xbmcgui . NOTIFICATION_INFO , 5000 )
   else :
    iiii11I = re . findall ( 'sourcesCode:.*?\"(.*?)\"' , I11 , flags = re . DOTALL )
    if iiii11I :
     try :
      iiii11I = iiii11I [ 0 ]
      Oo0OO = xbmcgui . ListItem ( path = iiii11I )
      O0OooOo0o ( Oo0OO , tit , pid )
      xbmcplugin . setResolvedUrl ( o0O , True , Oo0OO )
     except :
      pass
  except :
   oooooOoo0ooo = 'El servidor Vidoza parece caído, prueba más tarde.'
   Oo0OO = xbmcgui . ListItem ( oooooOoo0ooo , iconImage = "DefaultVideo.png" )
   xbmcplugin . setResolvedUrl ( o0O , False , Oo0OO )
   iiI11ii1I1 = xbmcgui . Dialog ( )
   iiI11ii1I1 . notification ( 'Cine' , oooooOoo0ooo , xbmcgui . NOTIFICATION_INFO , 5000 )
 elif server == 'sc' :
  I1111IIIIIi = 'sg'
  Ooo0OOoOoO0 = pel . split ( ' ' )
  oOo0OOoO0 = pel . split ( ' ' )
  if 11 - 11: o00ooo0 . iiI1i1 * oO0 * iiiii + I1Ii
  if 33 - 33: Iii1I1 * II1i - IIIi1i1I % IIIi1i1I
  import datetime
  I11I = datetime . datetime . today ( ) . weekday ( )
  for I11iIi1i1II11 in range ( I11I ) :
   Ooo0OOoOoO0 . append ( Ooo0OOoOoO0 . pop ( 0 ) )
   oOo0OOoO0 . append ( oOo0OOoO0 . pop ( 0 ) )
   if 47 - 47: iiiii . oO0o
  while 1 == 1 :
   if not oOo0OOoO0 :
    oooooOoo0ooo = 'Película en preparación'
    Oo0OO = xbmcgui . ListItem ( oooooOoo0ooo , iconImage = "DefaultVideo.png" )
    xbmcplugin . setResolvedUrl ( o0O , False , Oo0OO )
    iiI11ii1I1 = xbmcgui . Dialog ( )
    iiI11ii1I1 . notification ( 'Cine' , oooooOoo0ooo , xbmcgui . NOTIFICATION_INFO , 5000 )
    break
   for i1I1i111Ii in Ooo0OOoOoO0 :
    oOo0OOoO0 . remove ( i1I1i111Ii )
    if len ( i1I1i111Ii ) == 12 :
     I1111IIIIIi = 'sc'
     I1i1I1II = 'http://streamcloud.eu/%s' % i1I1i111Ii
     I11 = ''
     try :
      I11 = o0oOoO00o ( I1i1I1II )
      if ( "<h1>File Not Found</h1>" in I11 ) or ( "<h1>Archivo no encontrado</h1>" in I11 ) or ( I11 == 'Not Found' ) :
       I11 = ''
      else :
       if I11 != '' : break
       if 67 - 67: I11i11Ii . ii1I
     except :
      oooooOoo0ooo = 'El servidor StreamCloud parece caído, prueba más tarde.'
      Oo0OO = xbmcgui . ListItem ( oooooOoo0ooo , iconImage = "DefaultVideo.png" )
      xbmcplugin . setResolvedUrl ( o0O , False , Oo0OO )
      iiI11ii1I1 = xbmcgui . Dialog ( )
      iiI11ii1I1 . notification ( 'Cine' , oooooOoo0ooo , xbmcgui . NOTIFICATION_INFO , 5000 )
      I11 = 'bye'
      break
    elif len ( i1I1i111Ii ) == 16 :
     I1111IIIIIi = 'sg'
     I1i1I1II = 'https://streamango.com/embed/%s' % i1I1i111Ii
     i1i1iI1iiiI = { 'User-Agent' : iI111I11I1I1 ( ) }
     I11 = o0oOoO00o ( I1i1I1II , txheaders = i1i1iI1iiiI )
     if ( '>Sorry!<' in I11 ) :
      I11 = ''
     else :
      if I11 != '' : break
   Ooo0OOoOoO0 = oOo0OOoO0
   if I11 == '' :
    try :
     I1i1I1II = '%sbas/donoexist.php?id=%s' % ( IiII , pid )
     Oo0oOOo = o0oOoO00o ( I1i1I1II )
    except : pass
    oooooOoo0ooo = 'La película ya no existe'
    Oo0OO = xbmcgui . ListItem ( oooooOoo0ooo , iconImage = "DefaultVideo.png" )
    xbmcplugin . setResolvedUrl ( o0O , False , Oo0OO )
    iiI11ii1I1 = xbmcgui . Dialog ( )
    iiI11ii1I1 . notification ( 'Cine' , oooooOoo0ooo , xbmcgui . NOTIFICATION_INFO , 5000 )
    break
   elif I11 == 'bye' :
    break
   if I1111IIIIIi == 'sc' :
    iiii11I = re . findall ( 'file\: "([^"]+)"' , I11 , flags = re . DOTALL )
    if not iiii11I :
     OOO0OOO00oo = ""
     Ooo0oOooo0 = re . findall ( '<input.*?name="([^"]+)".*?value="([^"]*)">' , I11 , flags = re . DOTALL )
     for oOOOoo00 , iiIiIIIiiI in Ooo0oOooo0 :
      OOO0OOO00oo += oOOOoo00 + "=" + iiIiIIIiiI + "&"
     OOO0OOO00oo = OOO0OOO00oo . replace ( "op=download1" , "op=download2" )
     I11 = o0oOoO00o ( I1i1I1II , post = OOO0OOO00oo )
     if 'id="justanotice"' in I11 :
      return [ ]
     iiii11I = re . findall ( 'file\: "([^"]+)"' , I11 , flags = re . DOTALL )
    try :
     iiii11I = iiii11I [ 0 ] + '|Referer=http%3A%2F%2Fstreamcloud.eu%2Faddoncine123&User-Agent=Mozilla%2F5.0+%28Windows+NT+6.3%3B+rv%3A36.0%29+Gecko%2F20100101+Firefox%2F36.0'
     if 12 - 12: Iii1I1 - II1i
     Oo0OO = xbmcgui . ListItem ( path = iiii11I )
     O0OooOo0o ( Oo0OO , tit , pid )
     xbmcplugin . setResolvedUrl ( o0O , True , Oo0OO )
     break
    except :
     pass
   elif I1111IIIIIi == 'sg' :
    if 81 - 81: oO0o - oO0o . I1I1i1
    o0OoOo00o0o = re . search ( '''srces\.push\([\S\s*]{type:"video/mp4",src:\w+\('([^']+)',(\d+)''' , I11 )
    if o0OoOo00o0o :
     I1II1I11I1I = Ii1I1i ( o0OoOo00o0o . group ( 1 ) , int ( o0OoOo00o0o . group ( 2 ) ) )
     if I1II1I11I1I :
      I1II1I11I1I = "http:%s" % I1II1I11I1I if I1II1I11I1I . startswith ( "//" ) else I1II1I11I1I
      I1II1I11I1I = I1II1I11I1I . split ( "/" )
      if not I1II1I11I1I [ - 1 ] . isdigit ( ) :
       I1II1I11I1I [ - 1 ] = re . sub ( '[^\d]' , '' , I1II1I11I1I [ - 1 ] )
      I1II1I11I1I = "/" . join ( I1II1I11I1I )
      i1i1iI1iiiI . update ( { 'Referer' : I1i1I1II } )
      iiii11I = I1II1I11I1I + OooOoO0Oo ( i1i1iI1iiiI )
      import xbmc
      xbmc . log ( 'JJSG = ' + iiii11I )
      try :
       Oo0OO = xbmcgui . ListItem ( path = iiii11I )
       O0OooOo0o ( Oo0OO , tit , pid )
       xbmcplugin . setResolvedUrl ( o0O , True , Oo0OO )
       break
      except :
       pass
       if 54 - 54: iiiii + II1i - ii1I % i11iIiiIii
def iII1iIi11i ( ) :
 iIIiIi1iIII1 ( Oo0O )
 IIII = i1I1ii1II1iII ( )
 o0ooooO0o0O = [ ]
 for iiIi11iI1iii in IIII :
  oo000 = '%s/%s.png' % ( IiIi11iIIi1Ii , iiIi11iI1iii [ 'ico' ] )
  o0000oO = xbmcgui . ListItem ( label = iiIi11iI1iii [ 'title' ] , iconImage = oo000 )
  I1i1I1II = '{0}?action={1}' . format ( Oo , iiIi11iI1iii [ 'action' ] )
  iI1i111I1Ii = True
  o0ooooO0o0O . append ( ( I1i1I1II , o0000oO , iI1i111I1Ii ) )
 try :
  xbmcplugin . setContent ( o0O , "files" )
  xbmc . executebuiltin ( "Container.SetViewMode(500)" )
 except : pass
 xbmcplugin . addDirectoryItems ( o0O , o0ooooO0o0O , len ( o0ooooO0o0O ) )
 xbmcplugin . endOfDirectory ( o0O )
 if 25 - 25: IIIi1i1I - I1I1i1
 if 10 - 10: ooO0OO000o / o00 % iiiii * I1111 % o00ooo0
 if 48 - 48: I1Ii / IIIi1i1I . OO0O0O * oO0o * o00 / ii1I
 if 92 - 92: Ii11111i % Ii11111i - II1i / oO0o
 if 10 - 10: I1I1i1 + Ii11111i * o00ooo0 + OO0O0O / IIIi1i1I / o00ooo0
 if 42 - 42: I11i11Ii
def II1i11I ( pid , cur ) :
 ii1I1IIii11 = ''
 cur . execute ( "SELECT genero FROM generos INNER JOIN pelgen ON generos.id = pelgen.idgen where pelgen.idpel=? ORDER BY pelgen.id" , ( pid , ) )
 O0 = cur . fetchall ( )
 if O0 :
  O0o0oO = [ ]
  for OOOOo in O0 :
   O0o0oO . append ( OOOOo [ 0 ] )
  ii1I1IIii11 = ', ' . join ( O0o0oO )
 return ii1I1IIii11
 if 38 - 38: o00 % oO0o + o00ooo0 . i11iIiiIii
def oo0000ooooO0o ( pid , cur ) :
 iI1i11 = [ ]
 cur . execute ( "SELECT actor FROM actores INNER JOIN pelact ON actores.id = pelact.idact where pelact.idpel=? ORDER BY pelact.id" , ( pid , ) )
 O0 = cur . fetchall ( )
 if O0 :
  for OOOOo in O0 :
   iI1i11 . append ( OOOOo [ 0 ] )
 return iI1i11
 if 66 - 66: Iii1I1 % o00ooo0 + i11iIiiIii . oO0o / o0o0Oo0oooo0 + o00ooo0
def ooo00Ooo ( cur , row , listitem , tit ) :
 Oo0o0O00 = row [ 0 ]
 ii1I1i11 = row [ 7 ]
 OOo0O0oo0OO0O = row [ 8 ]
 OO0 = row [ 9 ]
 o0Oooo = row [ 12 ]
 iiI = row [ 15 ]
 ii1I1IIii11 = II1i11I ( Oo0o0O00 , cur )
 oO = oo0000ooooO0o ( Oo0o0O00 , cur )
 if 10 - 10: Ii11111i / Ii11111i / IIIi1i1I . IIIi1i1I
 listitem . setInfo ( 'video' , { 'title' : tit , 'year' : OOo0O0oo0OO0O , 'director' : o0Oooo , 'plot' : OO0 , 'genre' : ii1I1IIii11 , 'cast' : oO , 'rating' : iiI } )
 if 98 - 98: Ii11111i / I11i11Ii . Iii1I1 + iiI1i1
def O0OooOo0o ( listitem , tit , pid ) :
 o000O0o = sqlite3 . connect ( Oo0O )
 iI1iII1 = o000O0o . cursor ( )
 iI1iII1 . execute ( "SELECT * FROM pelis WHERE pelis.id=?;" , ( pid , ) )
 OOOOo = iI1iII1 . fetchone ( )
 ooo00Ooo ( iI1iII1 , OOOOo , listitem , tit )
 o000O0o . close ( )
 if 43 - 43: ooO0OO000o . o00 / o00ooo0
def i1iI1 ( rows = [ ] , tipo2 = False , zid = '' , nota = False , mvta = False ) :
 try :
  xbmcplugin . setContent ( o0O , "movies" )
  xbmc . executebuiltin ( "Container.SetViewMode(515)" )
 except : pass
 if 33 - 33: oO0 % OO0O0O * I11i11Ii
 if 95 - 95: I1Ii / I1Ii
 if 30 - 30: o00ooo0 + Ii11111i / Ii11111i % o00ooo0 . o00ooo0
 if 55 - 55: I1Ii - I1111 + ooO0OO000o + I1I1i1 % o0o0Oo0oooo0
 if 41 - 41: ii1I - I1111 - o0o0Oo0oooo0
 if 8 - 8: iiI1i1 + IIIi1i1I - II1i % Ii11111i % II1i * o00
 if 9 - 9: Ii11111i - i11iIiiIii - Oo0oO0ooo * o0o0Oo0oooo0 + I1Ii
 if 44 - 44: ooO0OO000o
 if 52 - 52: o00ooo0 - Ii11111i + o00ooo0 % II1i
 if 35 - 35: OO0O0O
 o000O0o = sqlite3 . connect ( Oo0O )
 iI1iII1 = o000O0o . cursor ( )
 if 42 - 42: IIIi1i1I . I11i11Ii . ii1I + oO0o + Oo0oO0ooo + I11i11Ii
 o0ooooO0o0O = [ ]
 I1IooooO0oOoOOoO = 0
 I1i11i = 0
 for OOOOo in rows :
  Oo0o0O00 = OOOOo [ 0 ]
  I1111IIIIIi = OOOOo [ 1 ]
  IiIi = OOOOo [ 2 ]
  OOOOO0O00 = OOOOo [ 3 ]
  iIi1 = OOOOo [ 4 ]
  Iii = OOOOo [ 5 ]
  iIIiIiI1I1 = OOOOo [ 6 ]
  ooO = OOOOo [ 7 ]
  OOo0O0oo0OO0O = OOOOo [ 8 ]
  OO0 = OOOOo [ 9 ]
  ii = OOOOo [ 11 ]
  o0Oooo = OOOOo [ 12 ]
  iiI = OOOOo [ 15 ]
  OO0O0Ooo = OOOOo [ 21 ]
  oOoO0 = OOOOo [ 22 ]
  ii1I1IIii11 = II1i11I ( Oo0o0O00 , iI1iII1 )
  oO = oo0000ooooO0o ( Oo0o0O00 , iI1iII1 )
  if 77 - 77: OO0O0O . I1I1i1 % I1I1i1 + i11iIiiIii
  if ooO != I1i11i :
   I1i11i = ooO
   I1IooooO0oOoOOoO += 1
   if 72 - 72: OO0O0O * o0o0Oo0oooo0 % I1Ii / iiI1i1
  I11i1II = iIIiIiI1I1
  if OO0O0Ooo == None :
   OO0O0Ooo = ii
  else :
   if OO0O0Ooo . startswith ( '/' ) :
    OO0O0Ooo = 'https://image.tmdb.org/t/p/w500%s' % OO0O0Ooo
  if oOoO0 == None :
   oOoO0 = ii
  else :
   if oOoO0 . startswith ( '/' ) :
    oOoO0 = 'https://image.tmdb.org/t/p/original%s' % oOoO0
  if Iii == 'S' :
   if I1111IIIIIi == 'sc' :
    iIIiIiI1I1 = '[COLOR lightskyblue]%s (HD)[/COLOR]' % iIIiIiI1I1
   else :
    iIIiIiI1I1 = '[COLOR khaki]%s (HD)[/COLOR]' % iIIiIiI1I1
  if Iii == '3D' :
   iIIiIiI1I1 = '[COLOR limegreen]%s (3D)[/COLOR]' % iIIiIiI1I1
  if tipo2 :
   iIIiIiI1I1 = '[COLOR orange]%s[/COLOR] %s' % ( OOo0O0oo0OO0O , iIIiIiI1I1 )
  if nota :
   iIIiIiI1I1 = '%s [COLOR blue](%s)[/COLOR]' % ( iIIiIiI1I1 , iiI )
  if mvta == True :
   iIIiIiI1I1 = '%s. %s' % ( str ( I1IooooO0oOoOOoO ) , iIIiIiI1I1 )
  o0000oO = xbmcgui . ListItem ( label = iIIiIiI1I1 , iconImage = ii )
  ooo00Ooo ( iI1iII1 , OOOOo , o0000oO , iIIiIiI1I1 )
  o0000oO . setArt ( { 'thumb' : OO0O0Ooo , 'icon' : OO0O0Ooo , 'fanart' : oOoO0 } )
  o0000oO . addStreamInfo ( 'audio' , { 'language' : 'es' } )
  o0000oO . setProperty ( 'IsPlayable' , 'true' )
  if 72 - 72: OO0O0O . ii1I / Ii11111i . ooO0OO000o
  if 54 - 54: ooO0OO000o % ooO0OO000o
  if 86 - 86: Iii1I1 % o0o0Oo0oooo0 * I1Ii * OO0O0O * ii1I * I1111
  if 83 - 83: oO0o % ooO0OO000o - oO0o + oO0 - Iii1I1
  if 52 - 52: Ii11111i * I1Ii
  I1111IIIIIi = '%s%s' % ( I1111IIIIIi , zid )
  I1i1I1II = '{0}?action=play&server={1}&user={2}&cole={3}&peli={4}&id={5}&tit={6}' . format ( Oo , I1111IIIIIi , IiIi , OOOOO0O00 , iIi1 , Oo0o0O00 , base64 . urlsafe_b64encode ( I11i1II . encode ( 'utf-8' ) ) )
  iI1i111I1Ii = False
  o0ooooO0o0O . append ( ( I1i1I1II , o0000oO , iI1i111I1Ii ) )
 o000O0o . close ( )
 xbmcplugin . addDirectoryItems ( o0O , o0ooooO0o0O , len ( o0ooooO0o0O ) )
 xbmcplugin . endOfDirectory ( o0O )
 if 33 - 33: o0o0Oo0oooo0
def OOOoOoO ( ) :
 o000O0o = sqlite3 . connect ( Oo0O )
 iI1iII1 = o000O0o . cursor ( )
 iI1iII1 . execute ( "SELECT generos.id, genero, Count(idpel) FROM generos INNER JOIN pelgen ON generos.id = pelgen.idgen GROUP BY generos.genero ORDER BY genero2" )
 O0 = iI1iII1 . fetchall ( )
 o000O0o . close ( )
 o0ooooO0o0O = [ ]
 for OOOOo in O0 :
  iIIIII1ii1I = OOOOo [ 0 ]
  O0o0oO = OOOOo [ 1 ]
  ii1ii1ii = OOOOo [ 2 ]
  Ii1i1iI = '[COLOR gold]%s[/COLOR] (%s)' % ( O0o0oO , ii1ii1ii )
  o0000oO = xbmcgui . ListItem ( label = Ii1i1iI , iconImage = '' )
  I1i1I1II = '{0}?action=genero2&idgen={1}' . format ( Oo , iIIIII1ii1I )
  iI1i111I1Ii = True
  o0ooooO0o0O . append ( ( I1i1I1II , o0000oO , iI1i111I1Ii ) )
 xbmcplugin . addDirectoryItems ( o0O , o0ooooO0o0O , len ( o0ooooO0o0O ) )
 xbmcplugin . endOfDirectory ( o0O )
 if 16 - 16: Oo0oO0ooo / Ii11111i / iiiii * I11i11Ii + ii1I % Oo0oO0ooo
def ooo0o00 ( idgen ) :
 o000O0o = sqlite3 . connect ( Oo0O )
 iI1iII1 = o000O0o . cursor ( )
 iI1iII1 . execute ( "SELECT * FROM pelis INNER JOIN pelgen ON pelis.ID = pelgen.idpel WHERE pelgen.idgen=? and pelis.valoracion>0 ORDER BY pelis.valoracion DESC, pelis.grupo, pelis.hd DESC, pelis.id;" , ( idgen , ) )
 O0 = iI1iII1 . fetchall ( )
 o000O0o . close ( )
 i1iI1 ( O0 , nota = True )
 if 99 - 99: Iii1I1 . I1111 + OO0O0O
def I11IIi ( idtem ) :
 o000O0o = sqlite3 . connect ( Oo0O )
 iI1iII1 = o000O0o . cursor ( )
 iI1iII1 . execute ( "SELECT * FROM pelis INNER JOIN peltem ON pelis.ID = peltem.idpel WHERE peltem.idtem=? and pelis.valoracion>0 ORDER BY pelis.valoracion DESC, pelis.grupo, pelis.hd DESC, pelis.id;" , ( idtem , ) )
 O0 = iI1iII1 . fetchall ( )
 o000O0o . close ( )
 i1iI1 ( O0 , nota = True )
 if 66 - 66: o00 % iiI1i1 . Oo0oO0ooo
def o0OIiiiI ( idgen ) :
 o000O0o = sqlite3 . connect ( Oo0O )
 iI1iII1 = o000O0o . cursor ( )
 iI1iII1 . execute ( "SELECT * FROM pelis INNER JOIN pelgen ON pelis.ID = pelgen.idpel WHERE pelgen.idgen=? ORDER BY pelis.grupo, pelis.hd, pelis.id;" , ( idgen , ) )
 O0 = iI1iII1 . fetchall ( )
 o000O0o . close ( )
 i1iI1 ( O0 )
 if 61 - 61: Oo0oO0ooo % Oo0oO0ooo * II1i / II1i
def o0oOO ( ) :
 o000O0o = sqlite3 . connect ( Oo0O )
 iI1iII1 = o000O0o . cursor ( )
 iI1iII1 . execute ( "SELECT temas.id, tema, Count(idpel) FROM temas INNER JOIN peltem ON temas.id = peltem.idtem GROUP BY temas.tema ORDER BY tema2" )
 O0 = iI1iII1 . fetchall ( )
 o000O0o . close ( )
 o0ooooO0o0O = [ ]
 for OOOOo in O0 :
  iIIIII1ii1I = OOOOo [ 0 ]
  O0o0oO = OOOOo [ 1 ]
  ii1ii1ii = OOOOo [ 2 ]
  Ii1i1iI = '[COLOR gold]%s[/COLOR] (%s)' % ( O0o0oO , ii1ii1ii )
  o0000oO = xbmcgui . ListItem ( label = Ii1i1iI , iconImage = '' )
  I1i1I1II = '{0}?action=tema2&idtem={1}' . format ( Oo , iIIIII1ii1I )
  iI1i111I1Ii = True
  o0ooooO0o0O . append ( ( I1i1I1II , o0000oO , iI1i111I1Ii ) )
 xbmcplugin . addDirectoryItems ( o0O , o0ooooO0o0O , len ( o0ooooO0o0O ) )
 xbmcplugin . endOfDirectory ( o0O )
 if 53 - 53: IIIi1i1I * oO0 . Ii11111i - o0o0Oo0oooo0 % o0o0Oo0oooo0 * i11iIiiIii
def iiOOO0oOOoo ( idtem ) :
 o000O0o = sqlite3 . connect ( Oo0O )
 iI1iII1 = o000O0o . cursor ( )
 iI1iII1 . execute ( "SELECT * FROM pelis INNER JOIN peltem ON pelis.ID = peltem.idpel WHERE peltem.idtem=? ORDER BY pelis.grupo, pelis.hd, pelis.id;" , ( idtem , ) )
 O0 = iI1iII1 . fetchall ( )
 o000O0o . close ( )
 i1iI1 ( O0 )
 if 52 - 52: II1i % Ii11111i
def Oo000ooOOO ( ) :
 o000O0o = sqlite3 . connect ( Oo0O )
 iI1iII1 = o000O0o . cursor ( )
 iI1iII1 . execute ( "Select anno,count(id) from pelis group by anno order by anno" )
 O0 = iI1iII1 . fetchall ( )
 o000O0o . close ( )
 o0ooooO0o0O = [ ]
 for OOOOo in O0 :
  Ii11i1I11i = OOOOo [ 0 ]
  ii1ii1ii = OOOOo [ 1 ]
  Ii1i1iI = '[COLOR gold]%s[/COLOR] (%s)' % ( Ii11i1I11i , ii1ii1ii )
  o0000oO = xbmcgui . ListItem ( label = Ii1i1iI , iconImage = '' )
  I1i1I1II = '{0}?action=anno2&anno={1}' . format ( Oo , Ii11i1I11i )
  iI1i111I1Ii = True
  o0ooooO0o0O . append ( ( I1i1I1II , o0000oO , iI1i111I1Ii ) )
 try :
  xbmcplugin . setContent ( o0O , "files" )
  xbmc . executebuiltin ( "Container.SetViewMode(502)" )
 except : pass
 xbmcplugin . addDirectoryItems ( o0O , o0ooooO0o0O , len ( o0ooooO0o0O ) )
 xbmcplugin . endOfDirectory ( o0O )
 if 13 - 13: oO0 / i11iIiiIii % ooO0OO000o % I1111 . o00ooo0
def iIIIii ( anno ) :
 o000O0o = sqlite3 . connect ( Oo0O )
 iI1iII1 = o000O0o . cursor ( )
 iI1iII1 . execute ( "Select * from pelis where anno = ? order by grupo, hd;" , ( anno , ) )
 O0 = iI1iII1 . fetchall ( )
 o000O0o . close ( )
 i1iI1 ( O0 )
 if 58 - 58: II1i / oO0 . oO0o / iiiii + IIIi1i1I
def O0OoO0ooOO0o ( ) :
 o000O0o = sqlite3 . connect ( Oo0O )
 iI1iII1 = o000O0o . cursor ( )
 iI1iII1 . execute ( "SELECT grupos.id, grupo, Count(idgru) FROM grupos INNER JOIN pelgru ON grupos.id = pelgru.idgru GROUP BY grupos.id having count(grupos.id)>1 ORDER BY grupo2" )
 O0 = iI1iII1 . fetchall ( )
 o000O0o . close ( )
 o0ooooO0o0O = [ ]
 for OOOOo in O0 :
  iIIIII1ii1I = OOOOo [ 0 ]
  O0o0oO = OOOOo [ 1 ]
  ii1ii1ii = OOOOo [ 2 ]
  Ii1i1iI = '[COLOR gold]%s[/COLOR] (%s)' % ( O0o0oO , ii1ii1ii )
  o0000oO = xbmcgui . ListItem ( label = Ii1i1iI , iconImage = '' )
  I1i1I1II = '{0}?action=grupo2&idgru={1}' . format ( Oo , iIIIII1ii1I )
  iI1i111I1Ii = True
  o0ooooO0o0O . append ( ( I1i1I1II , o0000oO , iI1i111I1Ii ) )
 xbmcplugin . addDirectoryItems ( o0O , o0ooooO0o0O , len ( o0ooooO0o0O ) )
 xbmcplugin . endOfDirectory ( o0O )
 if 81 - 81: Iii1I1 * ooO0OO000o + I11i11Ii * i11iIiiIii - o00ooo0 / I11i11Ii
def oO0o00ooO ( ) :
 o000O0o = sqlite3 . connect ( Oo0O )
 iI1iII1 = o000O0o . cursor ( )
 iI1iII1 = o000O0o . cursor ( )
 if 24 - 24: oO0 * i11iIiiIii * Oo0oO0ooo
 if 85 - 85: II1i . oO0o / I1Ii . Iii1I1 % IIIi1i1I
 if 90 - 90: Ii11111i % Iii1I1 * OO0O0O . I1I1i1
 iI1iII1 . execute ( "SELECT pais, Count(id) FROM pelis group by pais order by repe,pais;" )
 O0 = iI1iII1 . fetchall ( )
 o000O0o . close ( )
 o0ooooO0o0O = [ ]
 for OOOOo in O0 :
  I1iii11 = OOOOo [ 0 ]
  ii1ii1ii = OOOOo [ 1 ]
  ooo0O = base64 . urlsafe_b64encode ( I1iii11 . encode ( 'utf-8' ) )
  if I1iii11 . encode ( 'utf-8' ) == 'España' :
   I1iii11 = 'ESPAÑA' . decode ( 'utf-8' )
  Ii1i1iI = '[COLOR gold]%s[/COLOR] (%s)' % ( I1iii11 , ii1ii1ii )
  o0000oO = xbmcgui . ListItem ( label = Ii1i1iI , iconImage = '' )
  I1i1I1II = '{0}?action=pais2&pais={1}' . format ( Oo , ooo0O )
  iI1i111I1Ii = True
  o0ooooO0o0O . append ( ( I1i1I1II , o0000oO , iI1i111I1Ii ) )
 xbmcplugin . addDirectoryItems ( o0O , o0ooooO0o0O , len ( o0ooooO0o0O ) )
 xbmcplugin . endOfDirectory ( o0O )
 if 16 - 16: oO0o
def Iiiiii111i1ii ( ) :
 i1i1iII1 = ii11i ( )
 if i1i1iII1 :
  o000O0o = sqlite3 . connect ( Oo0O )
  iI1iII1 = o000O0o . cursor ( )
  i1i1iII1 = OO0o ( unicode ( i1i1iII1 . decode ( 'utf-8' ) ) ) . upper ( )
  i1i1iII1 = '%' + i1i1iII1 + '%'
  iI1iII1 . execute ( "SELECT grupos.id, grupo, Count(idgru) FROM grupos INNER JOIN pelgru ON grupos.id = pelgru.idgru WHERE grupo2 like ? GROUP BY grupos.id having count(grupos.id)>1 ORDER BY grupo2" , ( i1i1iII1 , ) )
  O0 = iI1iII1 . fetchall ( )
  o000O0o . close ( )
  o0ooooO0o0O = [ ]
  for OOOOo in O0 :
   iIIIII1ii1I = OOOOo [ 0 ]
   O0o0oO = OOOOo [ 1 ]
   ii1ii1ii = OOOOo [ 2 ]
   Ii1i1iI = '[COLOR gold]%s[/COLOR] (%s)' % ( O0o0oO , ii1ii1ii )
   o0000oO = xbmcgui . ListItem ( label = Ii1i1iI , iconImage = '' )
   I1i1I1II = '{0}?action=grupo2&idgru={1}' . format ( Oo , iIIIII1ii1I )
   iI1i111I1Ii = True
   o0ooooO0o0O . append ( ( I1i1I1II , o0000oO , iI1i111I1Ii ) )
  xbmcplugin . addDirectoryItems ( o0O , o0ooooO0o0O , len ( o0ooooO0o0O ) )
  xbmcplugin . endOfDirectory ( o0O )
  if 25 - 25: OO0O0O % I1I1i1 . I1Ii
def IIIIi1 ( idgru ) :
 o000O0o = sqlite3 . connect ( Oo0O )
 iI1iII1 = o000O0o . cursor ( )
 iI1iII1 . execute ( "SELECT * FROM pelis INNER JOIN pelgru ON pelis.ID = pelgru.idpel WHERE pelgru.idgru=? ORDER BY pelis.anno, pelis.grupo, pelis.hd, pelis.id;" , ( idgru , ) )
 O0 = iI1iII1 . fetchall ( )
 o000O0o . close ( )
 i1iI1 ( O0 , True )
 if 3 - 3: IIIi1i1I
def i1iiIiI1Ii1i ( pais ) :
 pais = base64 . b64decode ( pais ) . decode ( 'utf-8' )
 o000O0o = sqlite3 . connect ( Oo0O )
 iI1iII1 = o000O0o . cursor ( )
 iI1iII1 . execute ( "SELECT * FROM pelis WHERE pais=? ORDER BY pelis.anno, pelis.grupo, pelis.hd, pelis.id;" , ( pais , ) )
 O0 = iI1iII1 . fetchall ( )
 o000O0o . close ( )
 i1iI1 ( O0 , True )
 if 22 - 22: oO0 / i11iIiiIii
def oOOoo ( ) :
 i1i1iII1 = ii11i ( )
 if i1i1iII1 :
  o000O0o = sqlite3 . connect ( Oo0O )
  iI1iII1 = o000O0o . cursor ( )
  i1i1iII1 = OO0o ( unicode ( i1i1iII1 . decode ( 'utf-8' ) ) ) . upper ( )
  i1i1iII1 = '%' + i1i1iII1 + '%'
  iI1iII1 . execute ( "Select * from pelis where grupo like ? order by grupo" , ( i1i1iII1 , ) )
  O0 = iI1iII1 . fetchall ( )
  o000O0o . close ( )
  i1iI1 ( O0 )
  if 14 - 14: II1i * o00
def O0OOO0OOooo00 ( ) :
 i1i1iII1 = ii11i ( )
 if i1i1iII1 :
  o000O0o = sqlite3 . connect ( Oo0O )
  iI1iII1 = o000O0o . cursor ( )
  i1i1iII1 = OO0o ( unicode ( i1i1iII1 . decode ( 'utf-8' ) ) ) . upper ( )
  i1i1iII1 = '%' + i1i1iII1 + '%'
  iI1iII1 . execute ( "Select director, count(id) from pelis group by director having director2 like ? order by director2" , ( i1i1iII1 , ) )
  O0 = iI1iII1 . fetchall ( )
  o000O0o . close ( )
  o0ooooO0o0O = [ ]
  for OOOOo in O0 :
   o0Oooo = OOOOo [ 0 ] . encode ( 'utf-8' )
   ii1ii1ii = OOOOo [ 1 ]
   Ii1i1iI = '[COLOR gold]%s[/COLOR] (%s)' % ( o0Oooo , ii1ii1ii )
   o0000oO = xbmcgui . ListItem ( label = Ii1i1iI , iconImage = '' )
   I1i1I1II = '{0}?action=busdir2&director={1}' . format ( Oo , o0Oooo )
   iI1i111I1Ii = True
   o0ooooO0o0O . append ( ( I1i1I1II , o0000oO , iI1i111I1Ii ) )
  xbmcplugin . addDirectoryItems ( o0O , o0ooooO0o0O , len ( o0ooooO0o0O ) )
  xbmcplugin . endOfDirectory ( o0O )
  if 6 - 6: o0o0Oo0oooo0 - I1Ii * Oo0oO0ooo . I1I1i1 / Iii1I1 * I1Ii
def II11iI111i1 ( director ) :
 o000O0o = sqlite3 . connect ( Oo0O )
 iI1iII1 = o000O0o . cursor ( )
 iI1iII1 . execute ( "Select * from pelis where director = ? order by anno, grupo, id" , ( director . decode ( 'utf-8' ) , ) )
 O0 = iI1iII1 . fetchall ( )
 o000O0o . close ( )
 i1iI1 ( O0 , True )
 if 95 - 95: iiiii - oO0 * I11i11Ii + oO0o
def iIi1i11iiI1111 ( ) :
 i1i1iII1 = ii11i ( )
 if i1i1iII1 :
  o000O0o = sqlite3 . connect ( Oo0O )
  iI1iII1 = o000O0o . cursor ( )
  i1i1iII1 = OO0o ( unicode ( i1i1iII1 . decode ( 'utf-8' ) ) ) . upper ( )
  i1i1iII1 = '%' + i1i1iII1 + '%'
  iI1iII1 . execute ( "SELECT actores.id, actor, Count(idact) FROM actores INNER JOIN pelact ON actores.id = pelact.idact GROUP BY actores.actor having actor2 like ? ORDER BY actor2" , ( i1i1iII1 , ) )
  O0 = iI1iII1 . fetchall ( )
  o000O0o . close ( )
  o0ooooO0o0O = [ ]
  for OOOOo in O0 :
   oOoooo000Oo00 = OOOOo [ 0 ]
   iI1i11 = OOOOo [ 1 ]
   ii1ii1ii = OOOOo [ 2 ]
   Ii1i1iI = '[COLOR gold]%s[/COLOR] (%s)' % ( iI1i11 , ii1ii1ii )
   o0000oO = xbmcgui . ListItem ( label = Ii1i1iI , iconImage = '' )
   I1i1I1II = '{0}?action=busact2&idact={1}' . format ( Oo , oOoooo000Oo00 )
   iI1i111I1Ii = True
   o0ooooO0o0O . append ( ( I1i1I1II , o0000oO , iI1i111I1Ii ) )
  xbmcplugin . addDirectoryItems ( o0O , o0ooooO0o0O , len ( o0ooooO0o0O ) )
  xbmcplugin . endOfDirectory ( o0O )
  if 93 - 93: o00ooo0 / I11i11Ii / OO0O0O % IIIi1i1I % IIIi1i1I
def IiI11iI1i1i1i ( idact ) :
 o000O0o = sqlite3 . connect ( Oo0O )
 iI1iII1 = o000O0o . cursor ( )
 iI1iII1 . execute ( "SELECT * FROM pelis INNER JOIN pelact ON pelis.ID = pelact.idpel WHERE pelact.idact=? ORDER BY pelis.anno, pelis.grupo, pelis.id;" , ( idact , ) )
 O0 = iI1iII1 . fetchall ( )
 o000O0o . close ( )
 i1iI1 ( O0 , True )
 if 89 - 89: I1111
def Ooooooo ( ) :
 import datetime
 Ii11i1I11i = datetime . datetime . now ( ) . year
 o000O0o = sqlite3 . connect ( Oo0O )
 iI1iII1 = o000O0o . cursor ( )
 iI1iII1 . execute ( "SELECT * FROM pelis where gb is not null and anno>=? order by gb, HD LIMIT(100);" , ( Ii11i1I11i - 1 , ) )
 O0 = iI1iII1 . fetchall ( )
 o000O0o . close ( )
 i1iI1 ( O0 , False )
 if 39 - 39: oO0 * Ii11111i + OO0O0O - oO0 + Oo0oO0ooo
def o0iiiI1I1iIIIi1 ( ) :
 import datetime
 Ii11i1I11i = datetime . datetime . now ( ) . year
 o000O0o = sqlite3 . connect ( Oo0O )
 iI1iII1 = o000O0o . cursor ( )
 iI1iII1 . execute ( "SELECT * FROM pelis where gb is not null and anno<? order by gb, HD LIMIT(100);" , ( Ii11i1I11i - 1 , ) )
 O0 = iI1iII1 . fetchall ( )
 o000O0o . close ( )
 i1iI1 ( O0 , False )
 if 17 - 17: OO0O0O . iiiii / I1111 % ooO0OO000o % ii1I / i11iIiiIii
def OOO ( ) :
 o000O0o = sqlite3 . connect ( Oo0O )
 iI1iII1 = o000O0o . cursor ( )
 if 30 - 30: iiiii - iiiii . Iii1I1 / I1I1i1
 iI1iII1 . execute ( "SELECT * FROM pelis where vta>0 order by vta DESC,HD;" )
 O0 = iI1iII1 . fetchall ( )
 o000O0o . close ( )
 i1iI1 ( O0 , False , mvta = True )
 if 31 - 31: Oo0oO0ooo + II1i . iiiii
def ooOooo0 ( ) :
 o000O0o = sqlite3 . connect ( Oo0O )
 iI1iII1 = o000O0o . cursor ( )
 if 67 - 67: I11i11Ii
 iI1iII1 . execute ( "SELECT * FROM pelis where gb2>0 order by gb2, server;" )
 O0 = iI1iII1 . fetchall ( )
 o000O0o . close ( )
 i1iI1 ( O0 , False )
 if 55 - 55: o00ooo0 - I1I1i1 * II1i + oO0o * oO0o * Iii1I1
def O000Oo0o ( ) :
 o000O0o = sqlite3 . connect ( Oo0O )
 iI1iII1 = o000O0o . cursor ( )
 iI1iII1 . execute ( "Select id,genero from generos order by genero2;" )
 O0 = iI1iII1 . fetchall ( )
 o0ooooO0o0O = [ ]
 Ii1i1iI = '[COLOR gold]*** GÉNEROS ***[/COLOR]'
 o0000oO = xbmcgui . ListItem ( label = Ii1i1iI , iconImage = '' )
 iI1i111I1Ii = False
 o0ooooO0o0O . append ( ( '' , o0000oO , iI1i111I1Ii ) )
 for OOOOo in O0 :
  iIIIII1ii1I = OOOOo [ 0 ]
  O0o0oO = OOOOo [ 1 ]
  o0000oO = xbmcgui . ListItem ( label = O0o0oO , iconImage = '' )
  I1i1I1II = '{0}?action=TopGen&idgen={1}' . format ( Oo , iIIIII1ii1I )
  iI1i111I1Ii = True
  o0ooooO0o0O . append ( ( I1i1I1II , o0000oO , iI1i111I1Ii ) )
 iI1iII1 . execute ( "Select id,tema from temas order by tema2;" )
 O0 = iI1iII1 . fetchall ( )
 Ii1i1iI = '[COLOR gold]*** TEMAS ***[/COLOR]'
 o0000oO = xbmcgui . ListItem ( label = Ii1i1iI , iconImage = '' )
 iI1i111I1Ii = False
 o0ooooO0o0O . append ( ( '' , o0000oO , iI1i111I1Ii ) )
 for OOOOo in O0 :
  iIIIII1ii1I = OOOOo [ 0 ]
  O0o0oO = OOOOo [ 1 ]
  o0000oO = xbmcgui . ListItem ( label = O0o0oO , iconImage = '' )
  I1i1I1II = '{0}?action=TopTem&idtem={1}' . format ( Oo , iIIIII1ii1I )
  iI1i111I1Ii = True
  o0ooooO0o0O . append ( ( I1i1I1II , o0000oO , iI1i111I1Ii ) )
 o000O0o . close ( )
 xbmcplugin . addDirectoryItems ( o0O , o0ooooO0o0O , len ( o0ooooO0o0O ) )
 xbmcplugin . endOfDirectory ( o0O )
 if 99 - 99: OO0O0O % I1Ii + I1Ii + I1I1i1 - IIIi1i1I / IIIi1i1I
def iiiI11 ( ) :
 o000O0o = sqlite3 . connect ( Oo0O )
 iI1iII1 = o000O0o . cursor ( )
 iI1iII1 . execute ( "Select id,genero from generos order by genero2;" )
 O0 = iI1iII1 . fetchall ( )
 o000O0o . close ( )
 o0ooooO0o0O = [ ]
 Ii1i1iI = '[COLOR gold]Selecciona un género[/COLOR]'
 o0000oO = xbmcgui . ListItem ( label = Ii1i1iI , iconImage = '' )
 iI1i111I1Ii = False
 o0ooooO0o0O . append ( ( '' , o0000oO , iI1i111I1Ii ) )
 for OOOOo in O0 :
  iIIIII1ii1I = OOOOo [ 0 ]
  O0o0oO = OOOOo [ 1 ]
  o0000oO = xbmcgui . ListItem ( label = O0o0oO , iconImage = '' )
  I1i1I1II = '{0}?action=pelrec2&idgen={1}' . format ( Oo , iIIIII1ii1I )
  iI1i111I1Ii = True
  o0ooooO0o0O . append ( ( I1i1I1II , o0000oO , iI1i111I1Ii ) )
 xbmcplugin . addDirectoryItems ( o0O , o0ooooO0o0O , len ( o0ooooO0o0O ) )
 xbmcplugin . endOfDirectory ( o0O )
 if 63 - 63: iiI1i1 + o00ooo0 . IIIi1i1I % IIIi1i1I
def oOOOO ( idgen ) :
 Ii = sqlite3 . connect ( IiI )
 Ii1ii111i1 = Ii . cursor ( )
 Ii1ii111i1 . execute ( 'CREATE TABLE IF NOT EXISTS "vtas" (`id` INTEGER NOT NULL, `faffid` INTEGER NOT NULL, PRIMARY KEY(`id`));' )
 if 31 - 31: Oo0oO0ooo + Iii1I1
 o000O0o = sqlite3 . connect ( Oo0O )
 iI1iII1 = o000O0o . cursor ( )
 iI1iII1 . execute ( 'CREATE TABLE IF NOT EXISTS "reko" (`id` INTEGER NOT NULL, `idpel` INTEGER NOT NULL, PRIMARY KEY(`id`));' )
 iI1iII1 . execute ( 'delete from reko;' )
 o000O0o . commit ( )
 iI1iII1 . execute ( "SELECT pelis.id,faffid,grupo FROM pelis INNER JOIN pelgen ON pelis.ID = pelgen.idpel WHERE pelis.valoracion>6.5 and pelgen.idgen=? ORDER BY pelis.id;" , ( idgen , ) )
 O0 = iI1iII1 . fetchall ( )
 oO0oOOoo00000 = [ ]
 ooOooo000oOO = [ ]
 oOo00 = len ( O0 ) - 1
 from random import randint
 while 1 == 1 :
  i1iI11i1IIi = randint ( 0 , oOo00 )
  if i1iI11i1IIi not in ooOooo000oOO :
   ooOooo000oOO . append ( i1iI11i1IIi )
   OOOOo = O0 [ i1iI11i1IIi ]
   ii1IIi111 = OOOOo [ 1 ]
   Ii1ii111i1 . execute ( "SELECT id from vtas where faffid=?;" , ( ii1IIi111 , ) )
   iI1OoOo00o0OO = Ii1ii111i1 . fetchone ( )
   if not iI1OoOo00o0OO :
    Ii1ii111i1 . execute ( "INSERT INTO vtas(faffid) VALUES (?);" , ( ii1IIi111 , ) )
    Ii . commit ( )
    ii1IIIIiI11 = { }
    ii1IIIIiI11 [ 'grupo' ] = OOOOo [ 2 ]
    ii1IIIIiI11 [ 'id' ] = OOOOo [ 0 ]
    oO0oOOoo00000 . append ( ii1IIIIiI11 )
    if len ( oO0oOOoo00000 ) == 10 :
     break
   if len ( ooOooo000oOO ) > oOo00 :
    Ii1ii111i1 . execute ( "DELETE FROM vtas;" )
    Ii . commit ( )
    break
 Ii . close ( )
 oO0oOOoo00000 . sort ( key = lambda iI1IIIii : iI1IIIii [ 'grupo' ] )
 oooOo0OOOoo0 = [ ]
 for ii1IIIIiI11 in oO0oOOoo00000 :
  iI1iII1 . execute ( 'INSERT INTO reko(idpel) VALUES (?);' , ( ii1IIIIiI11 [ 'id' ] , ) )
  oooOo0OOOoo0 . append ( str ( ii1IIIIiI11 [ 'id' ] ) )
 oooOo0OOOoo0 = '_%s' % '.' . join ( oooOo0OOOoo0 )
 iI1iII1 . execute ( "SELECT * FROM pelis INNER JOIN reko ON pelis.ID = reko.idpel ORDER BY reko.id;" )
 O0 = iI1iII1 . fetchall ( )
 iI1iII1 . execute ( 'delete from reko;' )
 o000O0o . commit ( )
 o000O0o . close ( )
 i1iI1 ( O0 , False , oooOo0OOOoo0 )
 if 7 - 7: oO0 - I1111 / ooO0OO000o * o0o0Oo0oooo0 . I1I1i1 * I1I1i1
def O0O0oOOo0O ( idgen ) :
 o000O0o = sqlite3 . connect ( Oo0O )
 iI1iII1 = o000O0o . cursor ( )
 iI1iII1 . execute ( 'CREATE TABLE IF NOT EXISTS "reco" (`id` INTEGER NOT NULL, `idpel` INTEGER NOT NULL, PRIMARY KEY(`id`));' )
 o000O0o . commit ( )
 iI1iII1 . execute ( 'select idpel from reco order by id;' )
 O0 = iI1iII1 . fetchall ( )
 o000O0o . close ( )
 if O0 :
  II11 = [ ]
  for OOOOo in O0 :
   II11 . append ( str ( OOOOo [ 0 ] ) )
  II11 = '_%s' % '.' . join ( II11 )
  if 68 - 68: I1I1i1 * iiiii * OO0O0O . ooO0OO000o
  o000O0o = sqlite3 . connect ( Oo0O )
  iI1iII1 = o000O0o . cursor ( )
  iI1iII1 . execute ( "SELECT * FROM pelis INNER JOIN reco ON pelis.ID = reco.idpel ORDER BY reco.id;" )
  O0 = iI1iII1 . fetchall ( )
  iI1iII1 . execute ( 'delete from reco;' )
  o000O0o . commit ( )
  o000O0o . close ( )
  i1iI1 ( O0 , False , II11 )
 else :
  oOOOO ( idgen )
  if 81 - 81: Oo0oO0ooo / Iii1I1 + I1111 + o0o0Oo0oooo0 / I11i11Ii
def iI1I1i1I1Iii ( paramstring ) :
 oOO0 = dict ( parse_qsl ( paramstring ) )
 if oOO0 :
  if oOO0 [ 'action' ] == 'genero' :
   OOOoOoO ( )
  if oOO0 [ 'action' ] == 'genero2' :
   o0OIiiiI ( oOO0 [ 'idgen' ] )
  if oOO0 [ 'action' ] == 'tema' :
   o0oOO ( )
  if oOO0 [ 'action' ] == 'tema2' :
   iiOOO0oOOoo ( oOO0 [ 'idtem' ] )
  elif oOO0 [ 'action' ] == 'anno' :
   Oo000ooOOO ( )
  elif oOO0 [ 'action' ] == 'shlnk' :
   III1IiiI ( oOO0 [ 'server' ] , oOO0 [ 'user' ] , oOO0 [ 'cole' ] , oOO0 [ 'peli' ] , oOO0 [ 'last' ] )
  elif oOO0 [ 'action' ] == 'anno2' :
   iIIIii ( oOO0 [ 'anno' ] )
  elif oOO0 [ 'action' ] == 'grupo' :
   O0OoO0ooOO0o ( )
  elif oOO0 [ 'action' ] == 'grupo2' :
   IIIIi1 ( oOO0 [ 'idgru' ] )
  elif oOO0 [ 'action' ] == 'pais' :
   oO0o00ooO ( )
  elif oOO0 [ 'action' ] == 'pais2' :
   i1iiIiI1Ii1i ( oOO0 [ 'pais' ] )
  elif oOO0 [ 'action' ] == 'bustit' :
   oOOoo ( )
  elif oOO0 [ 'action' ] == 'busdir' :
   O0OOO0OOooo00 ( )
  elif oOO0 [ 'action' ] == 'busdir2' :
   II11iI111i1 ( oOO0 [ 'director' ] )
  elif oOO0 [ 'action' ] == 'busact' :
   iIi1i11iiI1111 ( )
  elif oOO0 [ 'action' ] == 'busact2' :
   IiI11iI1i1i1i ( oOO0 [ 'idact' ] )
  elif oOO0 [ 'action' ] == 'busgru' :
   Iiiiii111i1ii ( )
  elif oOO0 [ 'action' ] == 'ultim' :
   Ooooooo ( )
  elif oOO0 [ 'action' ] == 'ultim2' :
   o0iiiI1I1iIIIi1 ( )
  elif oOO0 [ 'action' ] == 'ulthd' :
   ooOooo0 ( )
  elif oOO0 [ 'action' ] == 'mvtas' :
   OOO ( )
  elif oOO0 [ 'action' ] == 'pelrec' :
   iiiI11 ( )
  elif oOO0 [ 'action' ] == 'pelrec2' :
   O0O0oOOo0O ( oOO0 [ 'idgen' ] )
  elif oOO0 [ 'action' ] == 'peltop' :
   O000Oo0o ( )
  elif oOO0 [ 'action' ] == 'TopGen' :
   ooo0o00 ( oOO0 [ 'idgen' ] )
  elif oOO0 [ 'action' ] == 'TopTem' :
   I11IIi ( oOO0 [ 'idtem' ] )
  elif oOO0 [ 'action' ] == 'play' :
   II1I1iiIII ( oOO0 [ 'server' ] , oOO0 [ 'user' ] , oOO0 [ 'cole' ] , oOO0 [ 'peli' ] , oOO0 [ 'id' ] , oOO0 [ 'tit' ] )
 else :
  iII1iIi11i ( )
  if 46 - 46: o0o0Oo0oooo0 % oO0o
if __name__ == '__main__' :
 IiiIII111iI = sys . argv [ 2 ] [ 1 : ]
 iI1I1i1I1Iii ( sys . argv [ 2 ] [ 1 : ] )
 if 64 - 64: i11iIiiIii - ooO0OO000o
# dd678faae9ac167bc83abf78e5cb2f3f0688d3a3
')