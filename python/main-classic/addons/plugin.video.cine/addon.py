import base64;exec base64.b64decode('# -*- coding: utf-8 -*-
import sys , os , re , unicodedata
import xbmcgui
import xbmcplugin
import xbmcaddon
import urllib , urllib2
import urlparse
from urlparse import parse_qsl
import sqlite3 , base64 , zlib
if 64 - 64: i11iIiiIii
def OO0o ( s ) :
 return '' . join ( ( c for c in unicodedata . normalize ( 'NFD' , s ) if unicodedata . category ( c ) != 'Mn' ) )
 if 81 - 81: Iii1I1 + OO0O0O % iiiii % ii1I - ooO0OO000o
def ii11i ( ) :
 import xbmc
 oOooOoO0Oo0O = xbmc . Keyboard ( "" )
 oOooOoO0Oo0O . doModal ( )
 iI1 = ''
 if ( oOooOoO0Oo0O . isConfirmed ( ) ) :
  iI1 = oOooOoO0Oo0O . getText ( )
 return iI1
 if 43 - 43: I11i11Ii
oO00oOo = xbmcaddon . Addon ( )
OOOo0 = xbmc . translatePath ( oO00oOo . getAddonInfo ( 'path' ) . decode ( 'utf-8' ) )
Oooo000o = xbmc . translatePath ( oO00oOo . getAddonInfo ( 'profile' ) . decode ( 'utf-8' ) )
IiIi11iIIi1Ii = os . path . join ( OOOo0 , "resources/media/" )
Oo0O = '%s/thebas.tmp' % Oooo000o
IiI = '%s/rkobas.tmp' % Oooo000o
if not os . path . exists ( Oooo000o ) :
 try :
  os . makedirs ( Oooo000o )
 except : pass
ooOo = urlparse . parse_qs ( sys . argv [ 2 ] [ 1 : ] )
Oo = sys . argv [ 0 ]
o0O = int ( sys . argv [ 1 ] )
IiiIII111iI = ''
IiII = base64 . b64decode ( 'aHR0cDovL3d3dy5hZGRvbmNpbmUuY2xvdWQv' )
if 28 - 28: Ii11111i * iiI1i1
def i1I1ii1II1iII ( ) :
 oooO0oo0oOOOO = [ ]
 oooO0oo0oOOOO . append ( { 'title' : 'Géneros' , 'action' : 'genero' , 'ico' : 'gen' } )
 oooO0oo0oOOOO . append ( { 'title' : 'Temas' , 'action' : 'tema' , 'ico' : 'tem' } )
 oooO0oo0oOOOO . append ( { 'title' : 'Años' , 'action' : 'anno' , 'ico' : 'ann' } )
 oooO0oo0oOOOO . append ( { 'title' : 'Grupos' , 'action' : 'grupo' , 'ico' : 'gru' } )
 oooO0oo0oOOOO . append ( { 'title' : 'Países' , 'action' : 'pais' , 'ico' : 'gru' } )
 oooO0oo0oOOOO . append ( { 'title' : 'Buscar por título' , 'action' : 'bustit' , 'ico' : 'bus' } )
 oooO0oo0oOOOO . append ( { 'title' : 'Buscar por director' , 'action' : 'busdir' , 'ico' : 'bus' } )
 oooO0oo0oOOOO . append ( { 'title' : 'Buscar por actor' , 'action' : 'busact' , 'ico' : 'bus' } )
 oooO0oo0oOOOO . append ( { 'title' : 'Buscar por grupo' , 'action' : 'busgru' , 'ico' : 'bus' } )
 oooO0oo0oOOOO . append ( { 'title' : 'Top' , 'action' : 'peltop' , 'ico' : 'bus' } )
 oooO0oo0oOOOO . append ( { 'title' : 'Últimas 2016-2017' , 'action' : 'ultim' , 'ico' : 'bus' } )
 oooO0oo0oOOOO . append ( { 'title' : 'Últimas hasta 2015' , 'action' : 'ultim2' , 'ico' : 'bus' } )
 oooO0oo0oOOOO . append ( { 'title' : 'Últimas 100 HD' , 'action' : 'ulthd' , 'ico' : 'bus' } )
 oooO0oo0oOOOO . append ( { 'title' : 'Las 100 más vistas' , 'action' : 'mvtas' , 'ico' : 'bus' } )
 oooO0oo0oOOOO . append ( { 'title' : 'Ver peli recomendada' , 'action' : 'pelrec' , 'ico' : 'bus' } )
 return oooO0oo0oOOOO
 if 53 - 53: o0oo0o / OoI1Ii11I1Ii1i + ooO - OOoO / ooo0Oo0 * oo
def O0Oooo00 ( url , post = None ) :
 Ooo0 = { 'User-Agent' : 'Mozilla/5.0 (Windows; U; Windows NT 5.1; en-GB; rv:1.8.1.14) Gecko/20080404 Firefox/2.0.0.14' }
 oo00000o0 = urllib2 . urlopen
 I11i1i11i1I = urllib2 . Request
 Iiii = I11i1i11i1I ( url , post , Ooo0 )
 OOO0O = oo00000o0 ( Iiii )
 oo0ooO0oOOOOo = OOO0O . read ( )
 return oo0ooO0oOOOOo
 if 71 - 71: O00OoOoo00
def iIiiI1 ( string ) :
 OoOooOOOO = 'sYt87gAUt0_z'
 string = base64 . urlsafe_b64decode ( string )
 i11iiII = [ ]
 for I1iiiiI1iII in xrange ( len ( string ) ) :
  IiIi11i = OoOooOOOO [ I1iiiiI1iII % len ( OoOooOOOO ) ]
  iIii1I111I11I = chr ( ord ( string [ I1iiiiI1iII ] ) - ord ( IiIi11i ) % 256 )
  i11iiII . append ( iIii1I111I11I )
 OO00OooO0OO = "" . join ( i11iiII )
 return OO00OooO0OO
 if 28 - 28: iIii1
def oOOoO0 ( user , cole , peli ) :
 O0OoO000O0OO = 'http://diskokosmiko.mx'
 iiI1IiI = peli
 II = '%s/-%s/p,%s,list,1,3.avi' % ( user , cole , peli )
 ooOoOoo0O = '%s/%s/' % ( O0OoO000O0OO , user )
 OooO0 = { 'User-agent' : 'Mozilla/5.0 (Windows NT 6.1; WOW64; rv:19.0) Gecko/20100101 Firefox/19.0' }
 II11iiii1Ii = '%s/%s' % ( O0OoO000O0OO , II )
 OooO0 [ 'referer' ] = ooOoOoo0O
 OooO0 [ 'connection' ] = 'keep-alive'
 Iiii = urllib2 . Request ( II11iiii1Ii , None , OooO0 )
 OOO0O = urllib2 . urlopen ( Iiii )
 oo0ooO0oOOOOo = OOO0O . read ( )
 OOO0O . close ( )
 OO0oOoo = re . findall ( 'DownloadFile.*f=%s".*RequestVerificationToken.*?value="([^"]+)' % peli , oo0ooO0oOOOOo )
 O0o0Oo = 0
 try :
  OO0oOoo = OO0oOoo [ 0 ]
 except :
  O0o0Oo = 1
 if O0o0Oo == 0 :
  Oo00OOOOO = '%s/action/DownloadFile?location=fi&amp;f=%s' % ( O0OoO000O0OO , iiI1IiI )
  O0O = 'fileId=%s&__RequestVerificationToken=%s' % ( iiI1IiI , OO0oOoo )
  OooO0 [ 'referer' ] = II11iiii1Ii
  OooO0 [ 'connection' ] = 'keep-alive'
  Iiii = urllib2 . Request ( Oo00OOOOO , O0O , OooO0 )
  OOO0O = urllib2 . urlopen ( Iiii )
  oo0ooO0oOOOOo = OOO0O . read ( )
  OOO0O . close ( )
  O00o0OO = re . findall ( 'DownloadUrl":"([^"]+)' , oo0ooO0oOOOOo )
  I11i1 = O00o0OO [ 0 ]
 else :
  I11i1 = ''
 return I11i1 . strip ( )
 if 25 - 25: iii1I11ii1i1 - OO0oo0oOO + oo0oooooO0
def i11Iiii ( server , user , cole , peli ) :
 iI = 'http://%s/%s/z-%s/z,%s,list,1,2.bin' % ( server , user , cole , peli )
 O0O = None
 Ooo0 = { 'User-Agent' : 'Mozilla/5.0 (Windows NT 6.1; WOW64; rv:50.0) Gecko/20100101 Firefox/50.0' }
 Ooo0 [ 'Connection' ] = 'keep-alive'
 oo00000o0 = urllib2 . urlopen
 I11i1i11i1I = urllib2 . Request
 Iiii = I11i1i11i1I ( iI , O0O , Ooo0 )
 OOO0O = oo00000o0 ( Iiii )
 I1i1I1II = OOO0O . info ( ) [ 'Set-Cookie' ]
 oo0ooO0oOOOOo = OOO0O . read ( )
 i1 = re . search ( 'action="(\/action\/DownloadFile\?location=fi&amp;f=.*?)".*?__RequestVerificationToken.*?value="(.*?)"' , oo0ooO0oOOOOo )
 IiIiiI = 'http://%s%s' % ( server , i1 . group ( 1 ) . replace ( '&amp;' , '&' ) )
 OO0oOoo = i1 . group ( 2 )
 Ooo0 = { 'User-Agent' : 'Mozilla/5.0 (Windows NT 6.1; WOW64; rv:50.0) Gecko/20100101 Firefox/50.0' }
 Ooo0 [ 'Referer' ] = iI
 Ooo0 [ 'Cookie' ] = I1i1I1II
 Ooo0 [ 'Connection' ] = 'keep-alive'
 O0O = 'fileId=%s&__RequestVerificationToken=%s' % ( peli , OO0oOoo )
 oo00000o0 = urllib2 . urlopen
 I11i1i11i1I = urllib2 . Request
 Iiii = I11i1i11i1I ( IiIiiI , O0O , Ooo0 )
 OOO0O = oo00000o0 ( Iiii )
 oo0ooO0oOOOOo = OOO0O . read ( )
 import time
 I1I = str ( int ( time . time ( ) ) ) + '404'
 II11iiii1Ii = 'http://%s/action/OAuth/Facebook?TimeStamp=%s' % ( server , I1I )
 Ooo0 = { 'User-Agent' : 'Mozilla/5.0 (Windows NT 6.1; WOW64; rv:50.0) Gecko/20100101 Firefox/50.0' }
 Ooo0 [ 'Referer' ] = iI
 Ooo0 [ 'Cookie' ] = I1i1I1II
 Ooo0 [ 'Connection' ] = 'keep-alive'
 O0O = None
 oo00000o0 = urllib2 . urlopen
 I11i1i11i1I = urllib2 . Request
 Iiii = I11i1i11i1I ( II11iiii1Ii , O0O , Ooo0 )
 OOO0O = oo00000o0 ( Iiii )
 oOO00oOO = OOO0O . info ( ) [ 'Set-Cookie' ]
 oo0ooO0oOOOOo = OOO0O . read ( )
 OoOo = I1i1I1II . split ( ';' )
 iIo00O = oOO00oOO . split ( ';' )
 for OOO0OOO00oo in iIo00O :
  if OOO0OOO00oo not in OoOo :
   OoOo . append ( OOO0OOO00oo )
 iIo00O = [ ]
 for OOO0OOO00oo in OoOo :
  if 'path=/' not in OOO0OOO00oo and 'HttpOnly' not in OOO0OOO00oo :
   iIo00O . append ( OOO0OOO00oo )
 I1i1I1II = '; ' . join ( iIo00O ) . replace ( '  ' , ' ' )
 Oo00OOOOO = 'http://%s/action/Account/Login' % server
 Ooo0 = { 'User-Agent' : 'Mozilla/5.0 (Windows NT 6.1; WOW64; rv:50.0) Gecko/20100101 Firefox/50.0' }
 Ooo0 [ 'Accept' ] = '*/*'
 Ooo0 [ 'Accept-Language' ] = 'es-ES,es;q=0.8,en-US;q=0.5,en;q=0.3'
 Ooo0 [ 'Accept-Encoding' ] = 'gzip, deflate'
 Ooo0 [ 'Content-Type' ] = 'application/x-www-form-urlencoded; charset=UTF-8'
 Ooo0 [ 'X-Requested-With' ] = 'XMLHttpRequest'
 Ooo0 [ 'Referer' ] = iI
 Ooo0 [ 'Cookie' ] = I1i1I1II
 Ooo0 [ 'Connection' ] = 'keep-alive'
 O0O = '__RequestVerificationToken=%s&UserName=addoncine&Password=a1b2c3d4' % OO0oOoo
 oo00000o0 = urllib2 . urlopen
 I11i1i11i1I = urllib2 . Request
 Iiii = I11i1i11i1I ( Oo00OOOOO , O0O , Ooo0 )
 OOO0O = oo00000o0 ( Iiii )
 oOO00oOO = OOO0O . info ( ) [ 'Set-Cookie' ]
 oo0ooO0oOOOOo = OOO0O . read ( )
 OoOo = I1i1I1II . split ( ';' )
 iIo00O = oOO00oOO . split ( ';' )
 for OOO0OOO00oo in iIo00O :
  if OOO0OOO00oo not in OoOo :
   OoOo . append ( OOO0OOO00oo )
 iIo00O = [ ]
 for OOO0OOO00oo in OoOo :
  if 'path=/' not in OOO0OOO00oo and 'HttpOnly' not in OOO0OOO00oo :
   iIo00O . append ( OOO0OOO00oo )
 I1i1I1II = '; ' . join ( iIo00O ) . replace ( '  ' , ' ' )
 oOO00oOO = ''
 Ooo0 = { 'User-Agent' : 'Mozilla/5.0 (Windows NT 6.1; WOW64; rv:50.0) Gecko/20100101 Firefox/50.0' }
 Ooo0 [ 'Referer' ] = iI
 Ooo0 [ 'Cookie' ] = I1i1I1II
 Ooo0 [ 'Connection' ] = 'keep-alive'
 O0O = 'fileId=%s&__RequestVerificationToken=%s' % ( peli , OO0oOoo )
 oo00000o0 = urllib2 . urlopen
 I11i1i11i1I = urllib2 . Request
 Iiii = I11i1i11i1I ( IiIiiI , O0O , Ooo0 )
 OOO0O = oo00000o0 ( Iiii )
 oo0ooO0oOOOOo = OOO0O . read ( )
 i1 = re . search ( 'DownloadUrl":"(.*?)"' , oo0ooO0oOOOOo )
 return i1 . group ( 1 )
 if 31 - 31: ooO0OO000o - ooo0Oo0 . OO0oo0oOO % o0oo0o - Iii1I1
def iii11 ( bas ) :
 O0oo0OO0oOOOo = O0Oooo00 ( '%sbas/base.enl' % IiII )
 O0oo0OO0oOOOo = O0oo0OO0oOOOo . split ( '.' )
 i1i1i11IIi = 0
 if len ( O0oo0OO0oOOOo ) >= 6 :
  if O0oo0OO0oOOOo [ 4 ] == 'gd' :
   O0oo0OO0oOOOo = 'https://goo.gl/%s' % O0oo0OO0oOOOo [ 5 ]
   try :
    oo0ooO0oOOOOo = O0Oooo00 ( O0oo0OO0oOOOo )
    i1i1i11IIi = 1
   except : pass
 if i1i1i11IIi == 0 :
  if O0oo0OO0oOOOo [ 0 ] == 'cp' :
   O0oo0OO0oOOOo = i11Iiii ( 'copiapop.com' , O0oo0OO0oOOOo [ 1 ] , O0oo0OO0oOOOo [ 2 ] , O0oo0OO0oOOOo [ 3 ] )
  elif O0oo0OO0oOOOo [ 0 ] == 'dk' :
   O0oo0OO0oOOOo = oOOoO0 ( O0oo0OO0oOOOo [ 1 ] , O0oo0OO0oOOOo [ 2 ] , O0oo0OO0oOOOo [ 3 ] )
  oo0ooO0oOOOOo = O0Oooo00 ( O0oo0OO0oOOOo )
 oo0ooO0oOOOOo = zlib . decompress ( oo0ooO0oOOOOo )
 II1III = open ( bas , 'wb' )
 II1III . write ( oo0ooO0oOOOOo )
 II1III . close ( )
 iI1iI1I1i1I = sqlite3 . connect ( bas )
 iIi11Ii1 = iI1iI1I1i1I . cursor ( )
 iIi11Ii1 . execute ( "Select version from version" )
 Ii11iII1 = iIi11Ii1 . fetchone ( )
 Ii11iII1 = Ii11iII1 [ 0 ]
 iIi11Ii1 . execute ( "select faffid from pelis where faffid>0 group by faffid;" )
 Oo0O0O0ooO0O = iIi11Ii1 . fetchall ( )
 IIIIii = len ( Oo0O0O0ooO0O )
 iIi11Ii1 . execute ( "select faffid from pelis where faffid<0;" )
 Oo0O0O0ooO0O = iIi11Ii1 . fetchall ( )
 IIIIii += len ( Oo0O0O0ooO0O )
 O0o0 = 'Vers. %s (%s películas distintas)' % ( Ii11iII1 , IIIIii )
 xbmcgui . Dialog ( ) . notification ( 'Cine' , O0o0 , xbmcgui . NOTIFICATION_INFO , 5000 )
 iI1iI1I1i1I . close ( )
 if 71 - 71: ooo0Oo0 + oo0oooooO0 % i11iIiiIii + ooO - iii1I11ii1i1
def oO0OOoO0 ( bas ) :
 import xbmc
 I111Ii111 = ''
 if os . path . isfile ( bas ) :
  try :
   iI1iI1I1i1I = sqlite3 . connect ( bas )
   iIi11Ii1 = iI1iI1I1i1I . cursor ( )
   iIi11Ii1 . execute ( "Select vrsp from version" )
   i111IiI1I = iIi11Ii1 . fetchone ( )
   iI1iI1I1i1I . close ( )
   I111Ii111 = i111IiI1I [ 0 ]
  except : pass
  if 70 - 70: O00OoOoo00 . Ii11111i / OoI1Ii11I1Ii1i . O00OoOoo00 - Iii1I1 / iii1I11ii1i1
  Ii11iII1 = ''
  try :
   Ii11iII1 = O0Oooo00 ( '%sbas/base.max' % IiII )
  except : pass
  if 62 - 62: OO0O0O * o0oo0o
  if Ii11iII1 != '' :
   try :
    iI1iI1I1i1I = sqlite3 . connect ( bas )
    iIi11Ii1 = iI1iI1I1i1I . cursor ( )
    iIi11Ii1 . execute ( "Select version from version" )
    i111IiI1I = iIi11Ii1 . fetchone ( )
    iI1iI1I1i1I . close ( )
    i111IiI1I = str ( i111IiI1I [ 0 ] )
    if i111IiI1I != Ii11iII1 :
     iii11 ( bas )
   except :
    iii11 ( bas )
 else :
  iii11 ( bas )
  if 26 - 26: iIii1 . OO0oo0oOO
 iI1iI1I1i1I = sqlite3 . connect ( bas )
 iIi11Ii1 = iI1iI1I1i1I . cursor ( )
 iIi11Ii1 . execute ( "Select vrsp,pdata from version" )
 i111IiI1I = iIi11Ii1 . fetchone ( )
 iI1iI1I1i1I . close ( )
 if I111Ii111 != i111IiI1I [ 0 ] :
  if 68 - 68: iiI1i1
  import xbmc , xbmcaddon
  IIi1iIIiI = xbmcaddon . Addon ( )
  O0OoO = xbmc . translatePath ( IIi1iIIiI . getAddonInfo ( 'path' ) . decode ( 'utf-8' ) )
  OO = i111IiI1I [ 1 ] . split ( '\n' )
  oo0ooO0oOOOOo = base64 . b64decode ( OO [ 0 ] )
  oo0ooO0oOOOOo = zlib . decompress ( oo0ooO0oOOOOo )
  if not os . path . isfile ( '%s/noactualizar.txt' % O0OoO ) :
   II1III = open ( '%s/addon.py' % ( O0OoO ) , 'wb' )
   II1III . write ( oo0ooO0oOOOOo )
   II1III . close ( )
   oo0ooO0oOOOOo = base64 . b64decode ( OO [ 1 ] )
   oo0ooO0oOOOOo = zlib . decompress ( oo0ooO0oOOOOo )
   II1III = open ( '%s/addon.xml' % ( O0OoO ) , 'wb' )
   II1III . write ( oo0ooO0oOOOOo )
   II1III . close ( )
   if 50 - 50: O00OoOoo00 / Ii11111i - OOoO - oo % iIii1 - OOoO
def OOO0o ( server , user , cole , peli , last ) :
 last = base64 . b64decode ( last )
 user = iIiiI1 ( user )
 peli = iIiiI1 ( peli )
 if server == 'sc' :
  IiI1 = peli . split ( ' ' )
  Oo0O00Oo0o0 = base64 . b64decode ( 'aHR0cDovL3N0cmVhbWNsb3VkLmV1Lw==' ) + IiI1 [ 0 ]
 elif server == 'dk' :
  server = base64 . b64decode ( 'aHR0cDovL2Rpc2tva29zbWlrby5teA==' )
  Oo0O00Oo0o0 = '%s/%s/z-%s/z,%s,list,1,2.bin' % ( server , user , cole , peli )
 O00O0oOO00O00 = base64 . b64decode ( 'c291cmNl' )
 i1Oo00 = base64 . b64decode ( 'aHR0cDovL2FkZG9uLmNpbmUva29kaQ==' )
 i1i = base64 . b64decode ( 'dXJscw==' )
 iiI111I1iIiI = base64 . b64decode ( 'c3VibWl0' )
 IIIi1I1IIii1II = base64 . b64decode ( 'bG9xdWVz' )
 O0 = base64 . b64decode ( 'aHR0cDovLzEyNy4wLjAuMTo5NjY2L2ZsYXNoL2FkZA==' )
 ii1ii1ii = { O00O0oOO00O00 : i1Oo00 , i1i : Oo0O00Oo0o0 , iiI111I1iIiI : IIIi1I1IIii1II }
 if 91 - 91: iii1I11ii1i1
 iiIii = urllib2 . HTTPHandler ( )
 ooo0O = urllib2 . build_opener ( iiIii )
 oo0ooO0oOOOOo = urllib . urlencode ( ii1ii1ii )
 oOoO0o00OO0 = urllib2 . Request ( O0 , data = oo0ooO0oOOOOo )
 i1I1ii = ooo0O . open ( oOoO0o00OO0 )
 O0o0 = 'Link copiado a JDownloader'
 xbmcgui . Dialog ( ) . notification ( 'Cine' , O0o0 , xbmcgui . NOTIFICATION_INFO , 5000 )
 xbmcplugin . endOfDirectory ( o0O )
 if 61 - 61: ooO0OO000o
def O0OOO ( server , user , cole , pel , pid , tit ) :
 o0O = int ( sys . argv [ 1 ] )
 try :
  ooOoOoo0O = '%sbas/doseek.php?id=%s' % ( IiII , pid )
  II11iIiIIIiI = O0Oooo00 ( ooOoOoo0O )
 except : pass
 if 67 - 67: OO0oo0oOO . iIii1 . Iii1I1
 oO0OOoO0 ( Oo0O )
 if 10 - 10: ooO % ooO - OO0O0O / ooo0Oo0 + O00OoOoo00
 OOOOoOoo0O0O0 = server . split ( '_' )
 server = OOOOoOoo0O0O0 [ 0 ]
 if len ( OOOOoOoo0O0O0 ) > 1 :
  iI1iI1I1i1I = sqlite3 . connect ( Oo0O )
  iIi11Ii1 = iI1iI1I1i1I . cursor ( )
  iIi11Ii1 . execute ( 'CREATE TABLE IF NOT EXISTS "reco" (`id` INTEGER NOT NULL, `idpel` INTEGER NOT NULL, PRIMARY KEY(`id`));' )
  iI1iI1I1i1I . commit ( )
  OOOo00oo0oO = OOOOoOoo0O0O0 [ 1 ] . split ( '.' )
  for IIiIi1iI in OOOo00oo0oO :
   iIi11Ii1 . execute ( 'INSERT INTO reco(idpel) VALUES (?);' , ( IIiIi1iI , ) )
  iI1iI1I1i1I . commit ( )
  iI1iI1I1i1I . close ( )
 tit = base64 . urlsafe_b64decode ( tit )
 user = iIiiI1 ( user )
 pel = iIiiI1 ( pel )
 if server == 'cp' :
  I11i1 = i11Iiii ( 'copiapop.com' , user , cole , pel )
  i1IiiiI1iI = xbmcgui . ListItem ( path = I11i1 . strip ( ) )
  i1iIi ( i1IiiiI1iI , tit , pid )
  xbmcplugin . setResolvedUrl ( o0O , True , i1IiiiI1iI )
 elif server == 'kb' :
  I11i1 = i11Iiii ( 'kbagi.com' , user , cole , pel )
  i1IiiiI1iI = xbmcgui . ListItem ( path = I11i1 . strip ( ) )
  i1iIi ( i1IiiiI1iI , tit , pid )
  xbmcplugin . setResolvedUrl ( o0O , True , i1IiiiI1iI )
 elif server == 'dk' :
  I11i1 = oOOoO0 ( user , cole , pel )
  if I11i1 == '' :
   try :
    ooOoOoo0O = '%sbas/donoexist.php?id=%s' % ( IiII , pid )
    II11iIiIIIiI = O0Oooo00 ( ooOoOoo0O )
   except : pass
   O0o0 = 'La película ya no existe'
   i1IiiiI1iI = xbmcgui . ListItem ( O0o0 , iconImage = "DefaultVideo.png" )
   xbmcplugin . setResolvedUrl ( o0O , False , i1IiiiI1iI )
   ooOOoooooo = xbmcgui . Dialog ( )
   ooOOoooooo . notification ( 'Cine' , O0o0 , xbmcgui . NOTIFICATION_INFO , 5000 )
  else :
   i1IiiiI1iI = xbmcgui . ListItem ( path = I11i1 . strip ( ) )
   i1iIi ( i1IiiiI1iI , tit , pid )
   xbmcplugin . setResolvedUrl ( o0O , True , i1IiiiI1iI )
 elif server == 'sc' :
  II1I = pel . split ( ' ' )
  O0i1II1Iiii1I11 = pel . split ( ' ' )
  while 1 == 1 :
   if not O0i1II1Iiii1I11 :
    O0o0 = 'Película en preparación'
    i1IiiiI1iI = xbmcgui . ListItem ( O0o0 , iconImage = "DefaultVideo.png" )
    xbmcplugin . setResolvedUrl ( o0O , False , i1IiiiI1iI )
    ooOOoooooo = xbmcgui . Dialog ( )
    ooOOoooooo . notification ( 'Cine' , O0o0 , xbmcgui . NOTIFICATION_INFO , 5000 )
    break
   for IIII in II1I :
    O0i1II1Iiii1I11 . remove ( IIII )
    ooOoOoo0O = 'http://streamcloud.eu/%s' % IIII
    oo0ooO0oOOOOo = O0Oooo00 ( ooOoOoo0O )
    if ( "<h1>File Not Found</h1>" in oo0ooO0oOOOOo ) or ( "<h1>Archivo no encontrado</h1>" in oo0ooO0oOOOOo ) or ( oo0ooO0oOOOOo == 'Not Found' ) :
     oo0ooO0oOOOOo = ''
    else :
     if oo0ooO0oOOOOo != '' : break
   II1I = O0i1II1Iiii1I11
   if oo0ooO0oOOOOo == '' :
    try :
     ooOoOoo0O = '%sbas/donoexist.php?id=%s' % ( IiII , pid )
     II11iIiIIIiI = O0Oooo00 ( ooOoOoo0O )
    except : pass
    O0o0 = 'La película ya no existe'
    i1IiiiI1iI = xbmcgui . ListItem ( O0o0 , iconImage = "DefaultVideo.png" )
    xbmcplugin . setResolvedUrl ( o0O , False , i1IiiiI1iI )
    ooOOoooooo = xbmcgui . Dialog ( )
    ooOOoooooo . notification ( 'Cine' , O0o0 , xbmcgui . NOTIFICATION_INFO , 5000 )
    break
   I11i1 = re . findall ( 'file\: "([^"]+)"' , oo0ooO0oOOOOo , flags = re . DOTALL )
   if not I11i1 :
    O0O = ""
    iiIiI = re . findall ( '<input.*?name="([^"]+)".*?value="([^"]*)">' , oo0ooO0oOOOOo , flags = re . DOTALL )
    for o00oooO0Oo , o0O0OOO0Ooo in iiIiI :
     O0O += o00oooO0Oo + "=" + o0O0OOO0Ooo + "&"
    O0O = O0O . replace ( "op=download1" , "op=download2" )
    oo0ooO0oOOOOo = O0Oooo00 ( ooOoOoo0O , post = O0O )
    if 'id="justanotice"' in oo0ooO0oOOOOo :
     return [ ]
    I11i1 = re . findall ( 'file\: "([^"]+)"' , oo0ooO0oOOOOo , flags = re . DOTALL )
   try :
    I11i1 = I11i1 [ 0 ]
    i1IiiiI1iI = xbmcgui . ListItem ( path = I11i1 )
    i1iIi ( i1IiiiI1iI , tit , pid )
    xbmcplugin . setResolvedUrl ( o0O , True , i1IiiiI1iI )
    break
   except :
    pass
    if 45 - 45: Iii1I1 / OoI1Ii11I1Ii1i
def i1IIIII11I1IiI ( ) :
 oO0OOoO0 ( Oo0O )
 oooO0oo0oOOOO = i1I1ii1II1iII ( )
 i1I = [ ]
 for OoOO in oooO0oo0oOOOO :
  ooOOO0 = '%s/%s.png' % ( IiIi11iIIi1Ii , OoOO [ 'ico' ] )
  o0o = xbmcgui . ListItem ( label = OoOO [ 'title' ] , iconImage = ooOOO0 )
  ooOoOoo0O = '{0}?action={1}' . format ( Oo , OoOO [ 'action' ] )
  O0OOoO00OO0o = True
  i1I . append ( ( ooOoOoo0O , o0o , O0OOoO00OO0o ) )
 try :
  xbmcplugin . setContent ( o0O , "files" )
  xbmc . executebuiltin ( "Container.SetViewMode(500)" )
 except : pass
 xbmcplugin . addDirectoryItems ( o0O , i1I , len ( i1I ) )
 xbmcplugin . endOfDirectory ( o0O )
 if 38 - 38: ooo0Oo0 % oo % OoI1Ii11I1Ii1i % iiI1i1 - Ii11111i
 if 37 - 37: OO0oo0oOO / o0oo0o
 if 23 - 23: Iii1I1
 if 85 - 85: O00OoOoo00
 if 84 - 84: I11i11Ii . OO0O0O % iiiii + O00OoOoo00 % iiiii % iiI1i1
def IIi1 ( pid , cur ) :
 I1I1I = ''
 cur . execute ( "SELECT genero FROM generos INNER JOIN pelgen ON generos.id = pelgen.idgen where pelgen.idpel=? ORDER BY pelgen.id" , ( pid , ) )
 Oo0O0O0ooO0O = cur . fetchall ( )
 if Oo0O0O0ooO0O :
  OoOO000 = [ ]
  for i111IiI1I in Oo0O0O0ooO0O :
   OoOO000 . append ( i111IiI1I [ 0 ] )
  I1I1I = ', ' . join ( OoOO000 )
 return I1I1I
 if 14 - 14: iii1I11ii1i1 - ooO
def Ii1i1iI1iIIi ( pid , cur ) :
 I1Ii = [ ]
 cur . execute ( "SELECT actor FROM actores INNER JOIN pelact ON actores.id = pelact.idact where pelact.idpel=? ORDER BY pelact.id" , ( pid , ) )
 Oo0O0O0ooO0O = cur . fetchall ( )
 if Oo0O0O0ooO0O :
  for i111IiI1I in Oo0O0O0ooO0O :
   I1Ii . append ( i111IiI1I [ 0 ] )
 return I1Ii
 if 94 - 94: O00OoOoo00 - ooO0OO000o . ooo0Oo0 % oo . i11iIiiIii + Iii1I1
def I1IiiiiI ( cur , row , listitem , tit ) :
 o0OIiII = row [ 0 ]
 ii1iII1II = row [ 8 ]
 Iii1I1I11iiI1 = row [ 9 ]
 I1I1i1I = row [ 12 ]
 I1I1I = IIi1 ( o0OIiII , cur )
 ii1IO0oO0 = Ii1i1iI1iIIi ( o0OIiII , cur )
 listitem . setInfo ( 'video' , { 'title' : tit , 'year' : ii1iII1II , 'director' : I1I1i1I , 'plot' : Iii1I1I11iiI1 , 'genre' : I1I1I , 'cast' : ii1IO0oO0 } )
 if 87 - 87: Ii11111i . iii1I11ii1i1
def i1iIi ( listitem , tit , pid ) :
 iI1iI1I1i1I = sqlite3 . connect ( Oo0O )
 iIi11Ii1 = iI1iI1I1i1I . cursor ( )
 iIi11Ii1 . execute ( "SELECT * FROM pelis WHERE pelis.id=?;" , ( pid , ) )
 i111IiI1I = iIi11Ii1 . fetchone ( )
 I1IiiiiI ( iIi11Ii1 , i111IiI1I , listitem , tit )
 iI1iI1I1i1I . close ( )
 if 75 - 75: oo0oooooO0 + o0oo0o + OoI1Ii11I1Ii1i * oo % OOoO . iIii1
def oO ( rows = [ ] , tipo2 = False , zid = '' , nota = False ) :
 try :
  xbmcplugin . setContent ( o0O , "movies" )
  xbmc . executebuiltin ( "Container.SetViewMode(515)" )
 except : pass
 if 31 - 31: ooo0Oo0 + i11iIiiIii + Ii11111i * oo0oooooO0
 if 28 - 28: Iii1I1 * Ii11111i - ooo0Oo0 % OO0O0O * O00OoOoo00 - i11iIiiIii
 if 7 - 7: Ii11111i + OOoO - OO0oo0oOO % O00OoOoo00 + ooO
 if 53 - 53: ii1I - oo . o0oo0o
 if 39 - 39: ooO0OO000o / oo0oooooO0 + OO0oo0oOO / o0oo0o
 if 13 - 13: iii1I11ii1i1 + Iii1I1 + iIii1 % I11i11Ii / OoI1Ii11I1Ii1i . iii1I11ii1i1
 if 86 - 86: OOoO * OoI1Ii11I1Ii1i % ii1I . O00OoOoo00 . i11iIiiIii
 if 56 - 56: ooO % Iii1I1 - I11i11Ii
 if 100 - 100: O00OoOoo00 - Iii1I1 % OOoO * ooo0Oo0 + I11i11Ii
 if 88 - 88: iiiii - iiI1i1 * Iii1I1 * iiiii . iiiii
 iI1iI1I1i1I = sqlite3 . connect ( Oo0O )
 iIi11Ii1 = iI1iI1I1i1I . cursor ( )
 if 33 - 33: OO0oo0oOO + iIii1 * OOoO / OO0O0O - I11i11Ii
 i1I = [ ]
 for i111IiI1I in rows :
  o0OIiII = i111IiI1I [ 0 ]
  O0 = i111IiI1I [ 1 ]
  O0oO = i111IiI1I [ 2 ]
  OO0ooOOO0OOO = i111IiI1I [ 3 ]
  IiI1 = i111IiI1I [ 4 ]
  oO00oooOOoOo0 = i111IiI1I [ 5 ]
  OoOOoOooooOOo = i111IiI1I [ 6 ]
  ii1iII1II = i111IiI1I [ 8 ]
  Iii1I1I11iiI1 = i111IiI1I [ 9 ]
  oOo0O = i111IiI1I [ 11 ]
  I1I1i1I = i111IiI1I [ 12 ]
  oo0O0 = i111IiI1I [ 15 ]
  iIOO0O000 = i111IiI1I [ 21 ]
  iiIiI1i1 = i111IiI1I [ 22 ]
  I1I1I = IIi1 ( o0OIiII , iIi11Ii1 )
  ii1IO0oO0 = Ii1i1iI1iIIi ( o0OIiII , iIi11Ii1 )
  oO0O00oOOoooO = OoOOoOooooOOo
  if iIOO0O000 == None :
   iIOO0O000 = oOo0O
  else :
   iIOO0O000 = 'https://image.tmdb.org/t/p/w500%s' % iIOO0O000
  if iiIiI1i1 == None :
   iiIiI1i1 = oOo0O
  else :
   iiIiI1i1 = 'https://image.tmdb.org/t/p/original%s' % iiIiI1i1
  if oO00oooOOoOo0 == 'S' :
   OoOOoOooooOOo = '[COLOR khaki]%s (HD)[/COLOR]' % OoOOoOooooOOo
  if tipo2 :
   OoOOoOooooOOo = '[COLOR orange]%s[/COLOR] %s' % ( ii1iII1II , OoOOoOooooOOo )
  if nota :
   OoOOoOooooOOo = '%s [COLOR blue](%s)[/COLOR]' % ( OoOOoOooooOOo , oo0O0 )
  o0o = xbmcgui . ListItem ( label = OoOOoOooooOOo , iconImage = oOo0O )
  I1IiiiiI ( iIi11Ii1 , i111IiI1I , o0o , OoOOoOooooOOo )
  o0o . setArt ( { 'thumb' : oOo0O , 'icon' : iIOO0O000 , 'fanart' : iiIiI1i1 } )
  o0o . addStreamInfo ( 'audio' , { 'language' : 'es' } )
  o0o . setProperty ( 'IsPlayable' , 'true' )
  if 46 - 46: I11i11Ii - iiiii - oo * ooO0OO000o
  if 34 - 34: oo - iIii1 / ooo0Oo0 + ooO * O00OoOoo00
  if 73 - 73: o0oo0o . O00OoOoo00 * ooO % ooO % iiiii
  if 63 - 63: OO0O0O * i11iIiiIii % OO0O0O * i11iIiiIii
  if 32 - 32: ooo0Oo0
  O0 = '%s%s' % ( O0 , zid )
  ooOoOoo0O = '{0}?action=play&server={1}&user={2}&cole={3}&peli={4}&id={5}&tit={6}' . format ( Oo , O0 , O0oO , OO0ooOOO0OOO , IiI1 , o0OIiII , base64 . urlsafe_b64encode ( oO0O00oOOoooO . encode ( 'utf-8' ) ) )
  O0OOoO00OO0o = False
  i1I . append ( ( ooOoOoo0O , o0o , O0OOoO00OO0o ) )
 iI1iI1I1i1I . close ( )
 xbmcplugin . addDirectoryItems ( o0O , i1I , len ( i1I ) )
 xbmcplugin . endOfDirectory ( o0O )
 if 42 - 42: iii1I11ii1i1 * Iii1I1 % ii1I . ooo0Oo0 / OoI1Ii11I1Ii1i
def iII11I1IiiIi ( ) :
 iI1iI1I1i1I = sqlite3 . connect ( Oo0O )
 iIi11Ii1 = iI1iI1I1i1I . cursor ( )
 iIi11Ii1 . execute ( "SELECT generos.id, genero, Count(idpel) FROM generos INNER JOIN pelgen ON generos.id = pelgen.idgen GROUP BY generos.genero ORDER BY genero2" )
 Oo0O0O0ooO0O = iIi11Ii1 . fetchall ( )
 iI1iI1I1i1I . close ( )
 i1I = [ ]
 for i111IiI1I in Oo0O0O0ooO0O :
  oo0oO = i111IiI1I [ 0 ]
  OoOO000 = i111IiI1I [ 1 ]
  IIIIii = i111IiI1I [ 2 ]
  Oo0O0 = '[COLOR gold]%s[/COLOR] (%s)' % ( OoOO000 , IIIIii )
  o0o = xbmcgui . ListItem ( label = Oo0O0 , iconImage = '' )
  ooOoOoo0O = '{0}?action=genero2&idgen={1}' . format ( Oo , oo0oO )
  O0OOoO00OO0o = True
  i1I . append ( ( ooOoOoo0O , o0o , O0OOoO00OO0o ) )
 xbmcplugin . addDirectoryItems ( o0O , i1I , len ( i1I ) )
 xbmcplugin . endOfDirectory ( o0O )
 if 82 - 82: ooO0OO000o % oo / iiI1i1 + o0oo0o / OoI1Ii11I1Ii1i / OO0oo0oOO
def oOo0OOoO0 ( idgen ) :
 iI1iI1I1i1I = sqlite3 . connect ( Oo0O )
 iIi11Ii1 = iI1iI1I1i1I . cursor ( )
 iIi11Ii1 . execute ( "SELECT * FROM pelis INNER JOIN pelgen ON pelis.ID = pelgen.idpel WHERE pelgen.idgen=? and pelis.valoracion>0 ORDER BY pelis.valoracion DESC, pelis.grupo, pelis.hd DESC, pelis.id;" , ( idgen , ) )
 Oo0O0O0ooO0O = iIi11Ii1 . fetchall ( )
 iI1iI1I1i1I . close ( )
 oO ( Oo0O0O0ooO0O , nota = True )
 if 11 - 11: ooO . iiI1i1 * iii1I11ii1i1 * iiiii + oo0oooooO0
def IiII111i1i11 ( idtem ) :
 iI1iI1I1i1I = sqlite3 . connect ( Oo0O )
 iIi11Ii1 = iI1iI1I1i1I . cursor ( )
 iIi11Ii1 . execute ( "SELECT * FROM pelis INNER JOIN peltem ON pelis.ID = peltem.idpel WHERE peltem.idtem=? and pelis.valoracion>0 ORDER BY pelis.valoracion DESC, pelis.grupo, pelis.hd DESC, pelis.id;" , ( idtem , ) )
 Oo0O0O0ooO0O = iIi11Ii1 . fetchall ( )
 iI1iI1I1i1I . close ( )
 oO ( Oo0O0O0ooO0O , nota = True )
 if 40 - 40: oo0oooooO0 * iii1I11ii1i1 * i11iIiiIii
def oo0OO00OoooOo ( idgen ) :
 iI1iI1I1i1I = sqlite3 . connect ( Oo0O )
 iIi11Ii1 = iI1iI1I1i1I . cursor ( )
 iIi11Ii1 . execute ( "SELECT * FROM pelis INNER JOIN pelgen ON pelis.ID = pelgen.idpel WHERE pelgen.idgen=? ORDER BY pelis.grupo, pelis.hd, pelis.id;" , ( idgen , ) )
 Oo0O0O0ooO0O = iIi11Ii1 . fetchall ( )
 iI1iI1I1i1I . close ( )
 oO ( Oo0O0O0ooO0O )
 if 19 - 19: ooO % iiiii % iii1I11ii1i1 * OoI1Ii11I1Ii1i % Iii1I1
def ooo ( ) :
 iI1iI1I1i1I = sqlite3 . connect ( Oo0O )
 iIi11Ii1 = iI1iI1I1i1I . cursor ( )
 iIi11Ii1 . execute ( "SELECT temas.id, tema, Count(idpel) FROM temas INNER JOIN peltem ON temas.id = peltem.idtem GROUP BY temas.tema ORDER BY tema2" )
 Oo0O0O0ooO0O = iIi11Ii1 . fetchall ( )
 iI1iI1I1i1I . close ( )
 i1I = [ ]
 for i111IiI1I in Oo0O0O0ooO0O :
  oo0oO = i111IiI1I [ 0 ]
  OoOO000 = i111IiI1I [ 1 ]
  IIIIii = i111IiI1I [ 2 ]
  Oo0O0 = '[COLOR gold]%s[/COLOR] (%s)' % ( OoOO000 , IIIIii )
  o0o = xbmcgui . ListItem ( label = Oo0O0 , iconImage = '' )
  ooOoOoo0O = '{0}?action=tema2&idtem={1}' . format ( Oo , oo0oO )
  O0OOoO00OO0o = True
  i1I . append ( ( ooOoOoo0O , o0o , O0OOoO00OO0o ) )
 xbmcplugin . addDirectoryItems ( o0O , i1I , len ( i1I ) )
 xbmcplugin . endOfDirectory ( o0O )
 if 27 - 27: oo0oooooO0 % I11i11Ii
def o0oooOO00 ( idtem ) :
 iI1iI1I1i1I = sqlite3 . connect ( Oo0O )
 iIi11Ii1 = iI1iI1I1i1I . cursor ( )
 iIi11Ii1 . execute ( "SELECT * FROM pelis INNER JOIN peltem ON pelis.ID = peltem.idpel WHERE peltem.idtem=? ORDER BY pelis.grupo, pelis.hd, pelis.id;" , ( idtem , ) )
 Oo0O0O0ooO0O = iIi11Ii1 . fetchall ( )
 iI1iI1I1i1I . close ( )
 oO ( Oo0O0O0ooO0O )
 if 32 - 32: OO0oo0oOO
def Iii1 ( ) :
 iI1iI1I1i1I = sqlite3 . connect ( Oo0O )
 iIi11Ii1 = iI1iI1I1i1I . cursor ( )
 iIi11Ii1 . execute ( "Select anno,count(id) from pelis group by anno order by anno" )
 Oo0O0O0ooO0O = iIi11Ii1 . fetchall ( )
 iI1iI1I1i1I . close ( )
 i1I = [ ]
 for i111IiI1I in Oo0O0O0ooO0O :
  oOOOoo00 = i111IiI1I [ 0 ]
  IIIIii = i111IiI1I [ 1 ]
  Oo0O0 = '[COLOR gold]%s[/COLOR] (%s)' % ( oOOOoo00 , IIIIii )
  o0o = xbmcgui . ListItem ( label = Oo0O0 , iconImage = '' )
  ooOoOoo0O = '{0}?action=anno2&anno={1}' . format ( Oo , oOOOoo00 )
  O0OOoO00OO0o = True
  i1I . append ( ( ooOoOoo0O , o0o , O0OOoO00OO0o ) )
 try :
  xbmcplugin . setContent ( o0O , "files" )
  xbmc . executebuiltin ( "Container.SetViewMode(502)" )
 except : pass
 xbmcplugin . addDirectoryItems ( o0O , i1I , len ( i1I ) )
 xbmcplugin . endOfDirectory ( o0O )
 if 9 - 9: Iii1I1 % Iii1I1 - OoI1Ii11I1Ii1i
def OoO ( anno ) :
 iI1iI1I1i1I = sqlite3 . connect ( Oo0O )
 iIi11Ii1 = iI1iI1I1i1I . cursor ( )
 iIi11Ii1 . execute ( "Select * from pelis where anno = ? order by grupo, hd;" , ( anno , ) )
 Oo0O0O0ooO0O = iIi11Ii1 . fetchall ( )
 iI1iI1I1i1I . close ( )
 oO ( Oo0O0O0ooO0O )
 if 12 - 12: Iii1I1 - OoI1Ii11I1Ii1i
def oOoO00O0 ( ) :
 iI1iI1I1i1I = sqlite3 . connect ( Oo0O )
 iIi11Ii1 = iI1iI1I1i1I . cursor ( )
 iIi11Ii1 . execute ( "SELECT grupos.id, grupo, Count(idgru) FROM grupos INNER JOIN pelgru ON grupos.id = pelgru.idgru GROUP BY grupos.id having count(grupos.id)>1 ORDER BY grupo2" )
 Oo0O0O0ooO0O = iIi11Ii1 . fetchall ( )
 iI1iI1I1i1I . close ( )
 i1I = [ ]
 for i111IiI1I in Oo0O0O0ooO0O :
  oo0oO = i111IiI1I [ 0 ]
  OoOO000 = i111IiI1I [ 1 ]
  IIIIii = i111IiI1I [ 2 ]
  Oo0O0 = '[COLOR gold]%s[/COLOR] (%s)' % ( OoOO000 , IIIIii )
  o0o = xbmcgui . ListItem ( label = Oo0O0 , iconImage = '' )
  ooOoOoo0O = '{0}?action=grupo2&idgru={1}' . format ( Oo , oo0oO )
  O0OOoO00OO0o = True
  i1I . append ( ( ooOoOoo0O , o0o , O0OOoO00OO0o ) )
 xbmcplugin . addDirectoryItems ( o0O , i1I , len ( i1I ) )
 xbmcplugin . endOfDirectory ( o0O )
 if 75 - 75: I11i11Ii . oo0oooooO0 . Iii1I1 * OO0oo0oOO
def i11II1I11I1 ( ) :
 iI1iI1I1i1I = sqlite3 . connect ( Oo0O )
 iIi11Ii1 = iI1iI1I1i1I . cursor ( )
 iIi11Ii1 = iI1iI1I1i1I . cursor ( )
 if 67 - 67: I11i11Ii - OoI1Ii11I1Ii1i / oo - ii1I
 if 1 - 1: ooO0OO000o
 if 68 - 68: iIii1 - I11i11Ii / OO0oo0oOO / oo
 iIi11Ii1 . execute ( "SELECT pais, Count(id) FROM pelis group by pais order by repe,pais;" )
 Oo0O0O0ooO0O = iIi11Ii1 . fetchall ( )
 iI1iI1I1i1I . close ( )
 i1I = [ ]
 for i111IiI1I in Oo0O0O0ooO0O :
  I11iiii = i111IiI1I [ 0 ]
  IIIIii = i111IiI1I [ 1 ]
  O0i1iI = base64 . urlsafe_b64encode ( I11iiii . encode ( 'utf-8' ) )
  if I11iiii . encode ( 'utf-8' ) == 'España' :
   I11iiii = 'ESPAÑA' . decode ( 'utf-8' )
  Oo0O0 = '[COLOR gold]%s[/COLOR] (%s)' % ( I11iiii , IIIIii )
  o0o = xbmcgui . ListItem ( label = Oo0O0 , iconImage = '' )
  ooOoOoo0O = '{0}?action=pais2&pais={1}' . format ( Oo , O0i1iI )
  O0OOoO00OO0o = True
  i1I . append ( ( ooOoOoo0O , o0o , O0OOoO00OO0o ) )
 xbmcplugin . addDirectoryItems ( o0O , i1I , len ( i1I ) )
 xbmcplugin . endOfDirectory ( o0O )
 if 29 - 29: I11i11Ii % ooo0Oo0 - I11i11Ii / ooo0Oo0 . ii1I
def i11III1111iIi ( ) :
 I1i111I = ii11i ( )
 if I1i111I :
  iI1iI1I1i1I = sqlite3 . connect ( Oo0O )
  iIi11Ii1 = iI1iI1I1i1I . cursor ( )
  I1i111I = OO0o ( unicode ( I1i111I . decode ( 'utf-8' ) ) ) . upper ( )
  I1i111I = '%' + I1i111I + '%'
  iIi11Ii1 . execute ( "SELECT grupos.id, grupo, Count(idgru) FROM grupos INNER JOIN pelgru ON grupos.id = pelgru.idgru WHERE grupo2 like ? GROUP BY grupos.id having count(grupos.id)>1 ORDER BY grupo2" , ( I1i111I , ) )
  Oo0O0O0ooO0O = iIi11Ii1 . fetchall ( )
  iI1iI1I1i1I . close ( )
  i1I = [ ]
  for i111IiI1I in Oo0O0O0ooO0O :
   oo0oO = i111IiI1I [ 0 ]
   OoOO000 = i111IiI1I [ 1 ]
   IIIIii = i111IiI1I [ 2 ]
   Oo0O0 = '[COLOR gold]%s[/COLOR] (%s)' % ( OoOO000 , IIIIii )
   o0o = xbmcgui . ListItem ( label = Oo0O0 , iconImage = '' )
   ooOoOoo0O = '{0}?action=grupo2&idgru={1}' . format ( Oo , oo0oO )
   O0OOoO00OO0o = True
   i1I . append ( ( ooOoOoo0O , o0o , O0OOoO00OO0o ) )
  xbmcplugin . addDirectoryItems ( o0O , i1I , len ( i1I ) )
  xbmcplugin . endOfDirectory ( o0O )
  if 97 - 97: ii1I . OOoO / iIii1 * Iii1I1
def o0O0o ( idgru ) :
 iI1iI1I1i1I = sqlite3 . connect ( Oo0O )
 iIi11Ii1 = iI1iI1I1i1I . cursor ( )
 iIi11Ii1 . execute ( "SELECT * FROM pelis INNER JOIN pelgru ON pelis.ID = pelgru.idpel WHERE pelgru.idgru=? ORDER BY pelis.anno, pelis.grupo, pelis.hd, pelis.id;" , ( idgru , ) )
 Oo0O0O0ooO0O = iIi11Ii1 . fetchall ( )
 iI1iI1I1i1I . close ( )
 oO ( Oo0O0O0ooO0O , True )
 if 77 - 77: o0oo0o - I11i11Ii * i11iIiiIii * oo0oooooO0 * OO0O0O
def oOo0 ( pais ) :
 pais = base64 . b64decode ( pais ) . decode ( 'utf-8' )
 iI1iI1I1i1I = sqlite3 . connect ( Oo0O )
 iIi11Ii1 = iI1iI1I1i1I . cursor ( )
 iIi11Ii1 . execute ( "SELECT * FROM pelis WHERE pais=? ORDER BY pelis.anno, pelis.grupo, pelis.hd, pelis.id;" , ( pais , ) )
 Oo0O0O0ooO0O = iIi11Ii1 . fetchall ( )
 iI1iI1I1i1I . close ( )
 oO ( Oo0O0O0ooO0O , True )
 if 56 - 56: OoI1Ii11I1Ii1i + ooO0OO000o + o0oo0o - oo0oooooO0 . o0oo0o
def OOOooo ( ) :
 I1i111I = ii11i ( )
 if I1i111I :
  iI1iI1I1i1I = sqlite3 . connect ( Oo0O )
  iIi11Ii1 = iI1iI1I1i1I . cursor ( )
  I1i111I = OO0o ( unicode ( I1i111I . decode ( 'utf-8' ) ) ) . upper ( )
  I1i111I = '%' + I1i111I + '%'
  iIi11Ii1 . execute ( "Select * from pelis where grupo like ? order by grupo" , ( I1i111I , ) )
  Oo0O0O0ooO0O = iIi11Ii1 . fetchall ( )
  iI1iI1I1i1I . close ( )
  oO ( Oo0O0O0ooO0O )
  if 94 - 94: iiiii + Ii11111i / o0oo0o * ooo0Oo0
def o0OOo0o0O0O ( ) :
 I1i111I = ii11i ( )
 if I1i111I :
  iI1iI1I1i1I = sqlite3 . connect ( Oo0O )
  iIi11Ii1 = iI1iI1I1i1I . cursor ( )
  I1i111I = OO0o ( unicode ( I1i111I . decode ( 'utf-8' ) ) ) . upper ( )
  I1i111I = '%' + I1i111I + '%'
  iIi11Ii1 . execute ( "Select director, count(id) from pelis group by director having director2 like ? order by director2" , ( I1i111I , ) )
  Oo0O0O0ooO0O = iIi11Ii1 . fetchall ( )
  iI1iI1I1i1I . close ( )
  i1I = [ ]
  for i111IiI1I in Oo0O0O0ooO0O :
   I1I1i1I = i111IiI1I [ 0 ] . encode ( 'utf-8' )
   IIIIii = i111IiI1I [ 1 ]
   Oo0O0 = '[COLOR gold]%s[/COLOR] (%s)' % ( I1I1i1I , IIIIii )
   o0o = xbmcgui . ListItem ( label = Oo0O0 , iconImage = '' )
   ooOoOoo0O = '{0}?action=busdir2&director={1}' . format ( Oo , I1I1i1I )
   O0OOoO00OO0o = True
   i1I . append ( ( ooOoOoo0O , o0o , O0OOoO00OO0o ) )
  xbmcplugin . addDirectoryItems ( o0O , i1I , len ( i1I ) )
  xbmcplugin . endOfDirectory ( o0O )
  if 65 - 65: i11iIiiIii
def O0O0o0oOOO ( director ) :
 iI1iI1I1i1I = sqlite3 . connect ( Oo0O )
 iIi11Ii1 = iI1iI1I1i1I . cursor ( )
 iIi11Ii1 . execute ( "Select * from pelis where director = ? order by anno, grupo, id" , ( director . decode ( 'utf-8' ) , ) )
 Oo0O0O0ooO0O = iIi11Ii1 . fetchall ( )
 iI1iI1I1i1I . close ( )
 oO ( Oo0O0O0ooO0O , True )
 if 67 - 67: o0oo0o + ooO . OoI1Ii11I1Ii1i . ooO0OO000o
def o000ooooO0o ( ) :
 I1i111I = ii11i ( )
 if I1i111I :
  iI1iI1I1i1I = sqlite3 . connect ( Oo0O )
  iIi11Ii1 = iI1iI1I1i1I . cursor ( )
  I1i111I = OO0o ( unicode ( I1i111I . decode ( 'utf-8' ) ) ) . upper ( )
  I1i111I = '%' + I1i111I + '%'
  iIi11Ii1 . execute ( "SELECT actores.id, actor, Count(idact) FROM actores INNER JOIN pelact ON actores.id = pelact.idact GROUP BY actores.actor having actor2 like ? ORDER BY actor2" , ( I1i111I , ) )
  Oo0O0O0ooO0O = iIi11Ii1 . fetchall ( )
  iI1iI1I1i1I . close ( )
  i1I = [ ]
  for i111IiI1I in Oo0O0O0ooO0O :
   iI1i11 = i111IiI1I [ 0 ]
   I1Ii = i111IiI1I [ 1 ]
   IIIIii = i111IiI1I [ 2 ]
   Oo0O0 = '[COLOR gold]%s[/COLOR] (%s)' % ( I1Ii , IIIIii )
   o0o = xbmcgui . ListItem ( label = Oo0O0 , iconImage = '' )
   ooOoOoo0O = '{0}?action=busact2&idact={1}' . format ( Oo , iI1i11 )
   O0OOoO00OO0o = True
   i1I . append ( ( ooOoOoo0O , o0o , O0OOoO00OO0o ) )
  xbmcplugin . addDirectoryItems ( o0O , i1I , len ( i1I ) )
  xbmcplugin . endOfDirectory ( o0O )
  if 66 - 66: Iii1I1 % ooO + i11iIiiIii . o0oo0o / O00OoOoo00 + ooO
def ooo00Ooo ( idact ) :
 iI1iI1I1i1I = sqlite3 . connect ( Oo0O )
 iIi11Ii1 = iI1iI1I1i1I . cursor ( )
 iIi11Ii1 . execute ( "SELECT * FROM pelis INNER JOIN pelact ON pelis.ID = pelact.idpel WHERE pelact.idact=? ORDER BY pelis.anno, pelis.grupo, pelis.id;" , ( idact , ) )
 Oo0O0O0ooO0O = iIi11Ii1 . fetchall ( )
 iI1iI1I1i1I . close ( )
 oO ( Oo0O0O0ooO0O , True )
 if 93 - 93: i11iIiiIii - I11i11Ii * ooO * oo % Iii1I1 + iiiii
def I1i1i1 ( ) :
 import datetime
 oOOOoo00 = datetime . datetime . now ( ) . year
 iI1iI1I1i1I = sqlite3 . connect ( Oo0O )
 iIi11Ii1 = iI1iI1I1i1I . cursor ( )
 iIi11Ii1 . execute ( "SELECT * FROM pelis where gb is not null and anno>=? order by gb, HD LIMIT(100);" , ( oOOOoo00 - 1 , ) )
 Oo0O0O0ooO0O = iIi11Ii1 . fetchall ( )
 iI1iI1I1i1I . close ( )
 oO ( Oo0O0O0ooO0O , False )
 if 73 - 73: Iii1I1 * iIii1 + O00OoOoo00 + oo0oooooO0
def Ii ( ) :
 import datetime
 oOOOoo00 = datetime . datetime . now ( ) . year
 iI1iI1I1i1I = sqlite3 . connect ( Oo0O )
 iIi11Ii1 = iI1iI1I1i1I . cursor ( )
 iIi11Ii1 . execute ( "SELECT * FROM pelis where gb is not null and anno<? order by gb, HD LIMIT(100);" , ( oOOOoo00 - 1 , ) )
 Oo0O0O0ooO0O = iIi11Ii1 . fetchall ( )
 iI1iI1I1i1I . close ( )
 oO ( Oo0O0O0ooO0O , False )
 if 100 - 100: OO0oo0oOO + ooo0Oo0 + ooo0Oo0
def I1ii1I1iiii ( ) :
 iI1iI1I1i1I = sqlite3 . connect ( Oo0O )
 iIi11Ii1 = iI1iI1I1i1I . cursor ( )
 iIi11Ii1 . execute ( "SELECT * FROM pelis order by vta DESC LIMIT(100);" )
 Oo0O0O0ooO0O = iIi11Ii1 . fetchall ( )
 iI1iI1I1i1I . close ( )
 oO ( Oo0O0O0ooO0O , False )
 if 36 - 36: iiiii . iiI1i1
def oOIIiIi ( ) :
 iI1iI1I1i1I = sqlite3 . connect ( Oo0O )
 iIi11Ii1 = iI1iI1I1i1I . cursor ( )
 iIi11Ii1 . execute ( "SELECT * FROM pelis where HD='S' order by id DESC LIMIT(100);" )
 Oo0O0O0ooO0O = iIi11Ii1 . fetchall ( )
 iI1iI1I1i1I . close ( )
 oO ( Oo0O0O0ooO0O , False )
 if 91 - 91: ooO * Ii11111i / I11i11Ii . Iii1I1 + iiI1i1 + o0oo0o
def iIIi ( ) :
 iI1iI1I1i1I = sqlite3 . connect ( Oo0O )
 iIi11Ii1 = iI1iI1I1i1I . cursor ( )
 iIi11Ii1 . execute ( "Select id,genero from generos order by genero2;" )
 Oo0O0O0ooO0O = iIi11Ii1 . fetchall ( )
 i1I = [ ]
 Oo0O0 = '[COLOR gold]*** GÉNEROS ***[/COLOR]'
 o0o = xbmcgui . ListItem ( label = Oo0O0 , iconImage = '' )
 O0OOoO00OO0o = False
 i1I . append ( ( '' , o0o , O0OOoO00OO0o ) )
 for i111IiI1I in Oo0O0O0ooO0O :
  oo0oO = i111IiI1I [ 0 ]
  OoOO000 = i111IiI1I [ 1 ]
  o0o = xbmcgui . ListItem ( label = OoOO000 , iconImage = '' )
  ooOoOoo0O = '{0}?action=TopGen&idgen={1}' . format ( Oo , oo0oO )
  O0OOoO00OO0o = True
  i1I . append ( ( ooOoOoo0O , o0o , O0OOoO00OO0o ) )
 iIi11Ii1 . execute ( "Select id,tema from temas order by tema2;" )
 Oo0O0O0ooO0O = iIi11Ii1 . fetchall ( )
 Oo0O0 = '[COLOR gold]*** TEMAS ***[/COLOR]'
 o0o = xbmcgui . ListItem ( label = Oo0O0 , iconImage = '' )
 O0OOoO00OO0o = False
 i1I . append ( ( '' , o0o , O0OOoO00OO0o ) )
 for i111IiI1I in Oo0O0O0ooO0O :
  oo0oO = i111IiI1I [ 0 ]
  OoOO000 = i111IiI1I [ 1 ]
  o0o = xbmcgui . ListItem ( label = OoOO000 , iconImage = '' )
  ooOoOoo0O = '{0}?action=TopTem&idtem={1}' . format ( Oo , oo0oO )
  O0OOoO00OO0o = True
  i1I . append ( ( ooOoOoo0O , o0o , O0OOoO00OO0o ) )
 iI1iI1I1i1I . close ( )
 xbmcplugin . addDirectoryItems ( o0O , i1I , len ( i1I ) )
 xbmcplugin . endOfDirectory ( o0O )
 if 11 - 11: I11i11Ii * OOoO
def o000oo ( ) :
 iI1iI1I1i1I = sqlite3 . connect ( Oo0O )
 iIi11Ii1 = iI1iI1I1i1I . cursor ( )
 iIi11Ii1 . execute ( "Select id,genero from generos order by genero2;" )
 Oo0O0O0ooO0O = iIi11Ii1 . fetchall ( )
 iI1iI1I1i1I . close ( )
 i1I = [ ]
 Oo0O0 = '[COLOR gold]Selecciona un género[/COLOR]'
 o0o = xbmcgui . ListItem ( label = Oo0O0 , iconImage = '' )
 O0OOoO00OO0o = False
 i1I . append ( ( '' , o0o , O0OOoO00OO0o ) )
 for i111IiI1I in Oo0O0O0ooO0O :
  oo0oO = i111IiI1I [ 0 ]
  OoOO000 = i111IiI1I [ 1 ]
  o0o = xbmcgui . ListItem ( label = OoOO000 , iconImage = '' )
  ooOoOoo0O = '{0}?action=pelrec2&idgen={1}' . format ( Oo , oo0oO )
  O0OOoO00OO0o = True
  i1I . append ( ( ooOoOoo0O , o0o , O0OOoO00OO0o ) )
 xbmcplugin . addDirectoryItems ( o0O , i1I , len ( i1I ) )
 xbmcplugin . endOfDirectory ( o0O )
 if 95 - 95: oo0oooooO0 / oo0oooooO0
def IIiI1Ii ( idgen ) :
 O0O0O0Oo = sqlite3 . connect ( IiI )
 OOOOoO00o0O = O0O0O0Oo . cursor ( )
 OOOOoO00o0O . execute ( 'CREATE TABLE IF NOT EXISTS "vtas" (`id` INTEGER NOT NULL, `faffid` INTEGER NOT NULL, PRIMARY KEY(`id`));' )
 if 41 - 41: ooo0Oo0 * O00OoOoo00 - iii1I11ii1i1 + OoI1Ii11I1Ii1i
 iI1iI1I1i1I = sqlite3 . connect ( Oo0O )
 iIi11Ii1 = iI1iI1I1i1I . cursor ( )
 iIi11Ii1 . execute ( 'CREATE TABLE IF NOT EXISTS "reko" (`id` INTEGER NOT NULL, `idpel` INTEGER NOT NULL, PRIMARY KEY(`id`));' )
 iIi11Ii1 . execute ( 'delete from reko;' )
 iI1iI1I1i1I . commit ( )
 iIi11Ii1 . execute ( "SELECT pelis.id,faffid,grupo FROM pelis INNER JOIN pelgen ON pelis.ID = pelgen.idpel WHERE pelis.valoracion>6.5 and pelgen.idgen=? ORDER BY pelis.id;" , ( idgen , ) )
 Oo0O0O0ooO0O = iIi11Ii1 . fetchall ( )
 oOOOo00O00O = [ ]
 i1i1i11IIi = [ ]
 iIIIII1I = len ( Oo0O0O0ooO0O ) - 1
 from random import randint
 while 1 == 1 :
  ooI1i = randint ( 0 , iIIIII1I )
  if ooI1i not in i1i1i11IIi :
   i1i1i11IIi . append ( ooI1i )
   i111IiI1I = Oo0O0O0ooO0O [ ooI1i ]
   iIII = i111IiI1I [ 1 ]
   OOOOoO00o0O . execute ( "SELECT id from vtas where faffid=?;" , ( iIII , ) )
   o0o0O = OOOOoO00o0O . fetchone ( )
   if not o0o0O :
    OOOOoO00o0O . execute ( "INSERT INTO vtas(faffid) VALUES (?);" , ( iIII , ) )
    O0O0O0Oo . commit ( )
    ooooO0oOoOOoO = { }
    ooooO0oOoOOoO [ 'grupo' ] = i111IiI1I [ 2 ]
    ooooO0oOoOOoO [ 'id' ] = i111IiI1I [ 0 ]
    oOOOo00O00O . append ( ooooO0oOoOOoO )
    if len ( oOOOo00O00O ) == 10 :
     break
   if len ( i1i1i11IIi ) > iIIIII1I :
    OOOOoO00o0O . execute ( "DELETE FROM vtas;" )
    O0O0O0Oo . commit ( )
    break
 O0O0O0Oo . close ( )
 oOOOo00O00O . sort ( key = lambda I1i11i : I1i11i [ 'grupo' ] )
 OOOo00oo0oO = [ ]
 for ooooO0oOoOOoO in oOOOo00O00O :
  iIi11Ii1 . execute ( 'INSERT INTO reko(idpel) VALUES (?);' , ( ooooO0oOoOOoO [ 'id' ] , ) )
  OOOo00oo0oO . append ( str ( ooooO0oOoOOoO [ 'id' ] ) )
 OOOo00oo0oO = '_%s' % '.' . join ( OOOo00oo0oO )
 iIi11Ii1 . execute ( "SELECT * FROM pelis INNER JOIN reko ON pelis.ID = reko.idpel ORDER BY reko.id;" )
 Oo0O0O0ooO0O = iIi11Ii1 . fetchall ( )
 iIi11Ii1 . execute ( 'delete from reko;' )
 iI1iI1I1i1I . commit ( )
 iI1iI1I1i1I . close ( )
 oO ( Oo0O0O0ooO0O , False , OOOo00oo0oO )
 if 11 - 11: I11i11Ii / ooO0OO000o + OoI1Ii11I1Ii1i * ooO - ooO - I11i11Ii
def O0oOooooo0O ( idgen ) :
 iI1iI1I1i1I = sqlite3 . connect ( Oo0O )
 iIi11Ii1 = iI1iI1I1i1I . cursor ( )
 iIi11Ii1 . execute ( 'CREATE TABLE IF NOT EXISTS "reco" (`id` INTEGER NOT NULL, `idpel` INTEGER NOT NULL, PRIMARY KEY(`id`));' )
 iI1iI1I1i1I . commit ( )
 iIi11Ii1 . execute ( 'select idpel from reco order by id;' )
 Oo0O0O0ooO0O = iIi11Ii1 . fetchall ( )
 iI1iI1I1i1I . close ( )
 if Oo0O0O0ooO0O :
  iiI1I1 = [ ]
  for i111IiI1I in Oo0O0O0ooO0O :
   iiI1I1 . append ( str ( i111IiI1I [ 0 ] ) )
  iiI1I1 = '_%s' % '.' . join ( iiI1I1 )
  if 56 - 56: I11i11Ii . Iii1I1 + Ii11111i
  iI1iI1I1i1I = sqlite3 . connect ( Oo0O )
  iIi11Ii1 = iI1iI1I1i1I . cursor ( )
  iIi11Ii1 . execute ( "SELECT * FROM pelis INNER JOIN reco ON pelis.ID = reco.idpel ORDER BY reco.id;" )
  Oo0O0O0ooO0O = iIi11Ii1 . fetchall ( )
  iIi11Ii1 . execute ( 'delete from reco;' )
  iI1iI1I1i1I . commit ( )
  iI1iI1I1i1I . close ( )
  oO ( Oo0O0O0ooO0O , False , iiI1I1 )
 else :
  IIiI1Ii ( idgen )
  if 1 - 1: iIii1
def O0O0Ooo ( paramstring ) :
 oOoO0 = dict ( parse_qsl ( paramstring ) )
 if oOoO0 :
  if oOoO0 [ 'action' ] == 'genero' :
   iII11I1IiiIi ( )
  if oOoO0 [ 'action' ] == 'genero2' :
   oo0OO00OoooOo ( oOoO0 [ 'idgen' ] )
  if oOoO0 [ 'action' ] == 'tema' :
   ooo ( )
  if oOoO0 [ 'action' ] == 'tema2' :
   o0oooOO00 ( oOoO0 [ 'idtem' ] )
  elif oOoO0 [ 'action' ] == 'anno' :
   Iii1 ( )
  elif oOoO0 [ 'action' ] == 'shlnk' :
   OOO0o ( oOoO0 [ 'server' ] , oOoO0 [ 'user' ] , oOoO0 [ 'cole' ] , oOoO0 [ 'peli' ] , oOoO0 [ 'last' ] )
  elif oOoO0 [ 'action' ] == 'anno2' :
   OoO ( oOoO0 [ 'anno' ] )
  elif oOoO0 [ 'action' ] == 'grupo' :
   oOoO00O0 ( )
  elif oOoO0 [ 'action' ] == 'grupo2' :
   o0O0o ( oOoO0 [ 'idgru' ] )
  elif oOoO0 [ 'action' ] == 'pais' :
   i11II1I11I1 ( )
  elif oOoO0 [ 'action' ] == 'pais2' :
   oOo0 ( oOoO0 [ 'pais' ] )
  elif oOoO0 [ 'action' ] == 'bustit' :
   OOOooo ( )
  elif oOoO0 [ 'action' ] == 'busdir' :
   o0OOo0o0O0O ( )
  elif oOoO0 [ 'action' ] == 'busdir2' :
   O0O0o0oOOO ( oOoO0 [ 'director' ] )
  elif oOoO0 [ 'action' ] == 'busact' :
   o000ooooO0o ( )
  elif oOoO0 [ 'action' ] == 'busact2' :
   ooo00Ooo ( oOoO0 [ 'idact' ] )
  elif oOoO0 [ 'action' ] == 'busgru' :
   i11III1111iIi ( )
  elif oOoO0 [ 'action' ] == 'ultim' :
   I1i1i1 ( )
  elif oOoO0 [ 'action' ] == 'ultim2' :
   Ii ( )
  elif oOoO0 [ 'action' ] == 'ulthd' :
   oOIIiIi ( )
  elif oOoO0 [ 'action' ] == 'mvtas' :
   I1ii1I1iiii ( )
  elif oOoO0 [ 'action' ] == 'pelrec' :
   o000oo ( )
  elif oOoO0 [ 'action' ] == 'pelrec2' :
   O0oOooooo0O ( oOoO0 [ 'idgen' ] )
  elif oOoO0 [ 'action' ] == 'peltop' :
   iIIi ( )
  elif oOoO0 [ 'action' ] == 'TopGen' :
   oOo0OOoO0 ( oOoO0 [ 'idgen' ] )
  elif oOoO0 [ 'action' ] == 'TopTem' :
   IiII111i1i11 ( oOoO0 [ 'idtem' ] )
  elif oOoO0 [ 'action' ] == 'play' :
   O0OOO ( oOoO0 [ 'server' ] , oOoO0 [ 'user' ] , oOoO0 [ 'cole' ] , oOoO0 [ 'peli' ] , oOoO0 [ 'id' ] , oOoO0 [ 'tit' ] )
 else :
  i1IIIII11I1IiI ( )
  if 77 - 77: OO0O0O . iIii1 % iIii1 + i11iIiiIii
if __name__ == '__main__' :
 IiiIII111iI = sys . argv [ 2 ] [ 1 : ]
 O0O0Ooo ( sys . argv [ 2 ] [ 1 : ] )
 if 72 - 72: OO0O0O * O00OoOoo00 % oo0oooooO0 / iiI1i1
# dd678faae9ac167bc83abf78e5cb2f3f0688d3a3
')